//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5466
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.5466.
// 
#pragma warning disable 1591

namespace FlexImage.WebService.CaptureWebReference {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CaptureServiceSoapBinding", Namespace="http://impl.service.flexps.flexdoc.com.br/")]
    public partial class CaptureService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback setDocFRecaptureOperationCompleted;
        
        private System.Threading.SendOrPostCallback closeBatchFOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocumentFToRecaptureOperationCompleted;
        
        private System.Threading.SendOrPostCallback insertDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback openBatchFOperationCompleted;
        
        private System.Threading.SendOrPostCallback setBatchFTransmittedOperationCompleted;
        
        private System.Threading.SendOrPostCallback getBatchFToRecaptureOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CaptureService() {
            this.Url = global::FlexImage.WebService.Properties.Settings.Default.WSCapture_CaptureWebReference_CaptureService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event setDocFRecaptureCompletedEventHandler setDocFRecaptureCompleted;
        
        /// <remarks/>
        public event closeBatchFCompletedEventHandler closeBatchFCompleted;
        
        /// <remarks/>
        public event getDocumentFToRecaptureCompletedEventHandler getDocumentFToRecaptureCompleted;
        
        /// <remarks/>
        public event insertDocumentCompletedEventHandler insertDocumentCompleted;
        
        /// <remarks/>
        public event openBatchFCompletedEventHandler openBatchFCompleted;
        
        /// <remarks/>
        public event setBatchFTransmittedCompletedEventHandler setBatchFTransmittedCompleted;
        
        /// <remarks/>
        public event getBatchFToRecaptureCompletedEventHandler getBatchFToRecaptureCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setDocFRecapture([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentIdOld, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdOldSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentIdNew, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdNewSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified) {
            this.Invoke("setDocFRecapture", new object[] {
                        token,
                        documentIdOld,
                        documentIdOldSpecified,
                        documentIdNew,
                        documentIdNewSpecified,
                        batchId,
                        batchIdSpecified,
                        stationId,
                        stationIdSpecified,
                        usrId,
                        usrIdSpecified});
        }
        
        /// <remarks/>
        public void setDocFRecaptureAsync(string token, long documentIdOld, bool documentIdOldSpecified, long documentIdNew, bool documentIdNewSpecified, long batchId, bool batchIdSpecified, long stationId, bool stationIdSpecified, long usrId, bool usrIdSpecified) {
            this.setDocFRecaptureAsync(token, documentIdOld, documentIdOldSpecified, documentIdNew, documentIdNewSpecified, batchId, batchIdSpecified, stationId, stationIdSpecified, usrId, usrIdSpecified, null);
        }
        
        /// <remarks/>
        public void setDocFRecaptureAsync(string token, long documentIdOld, bool documentIdOldSpecified, long documentIdNew, bool documentIdNewSpecified, long batchId, bool batchIdSpecified, long stationId, bool stationIdSpecified, long usrId, bool usrIdSpecified, object userState) {
            if ((this.setDocFRecaptureOperationCompleted == null)) {
                this.setDocFRecaptureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetDocFRecaptureOperationCompleted);
            }
            this.InvokeAsync("setDocFRecapture", new object[] {
                        token,
                        documentIdOld,
                        documentIdOldSpecified,
                        documentIdNew,
                        documentIdNewSpecified,
                        batchId,
                        batchIdSpecified,
                        stationId,
                        stationIdSpecified,
                        usrId,
                        usrIdSpecified}, this.setDocFRecaptureOperationCompleted, userState);
        }
        
        private void OnsetDocFRecaptureOperationCompleted(object arg) {
            if ((this.setDocFRecaptureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setDocFRecaptureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void closeBatchF([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long siteId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool siteIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute("docsCanceled", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int[] docsCanceled, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int totDocs, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool totDocsSpecified) {
            this.Invoke("closeBatchF", new object[] {
                        token,
                        batchId,
                        batchIdSpecified,
                        stationId,
                        stationIdSpecified,
                        siteId,
                        siteIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        docsCanceled,
                        totDocs,
                        totDocsSpecified});
        }
        
        /// <remarks/>
        public void closeBatchFAsync(string token, long batchId, bool batchIdSpecified, long stationId, bool stationIdSpecified, long siteId, bool siteIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, int[] docsCanceled, int totDocs, bool totDocsSpecified) {
            this.closeBatchFAsync(token, batchId, batchIdSpecified, stationId, stationIdSpecified, siteId, siteIdSpecified, workflowId, workflowIdSpecified, usrId, usrIdSpecified, docsCanceled, totDocs, totDocsSpecified, null);
        }
        
        /// <remarks/>
        public void closeBatchFAsync(string token, long batchId, bool batchIdSpecified, long stationId, bool stationIdSpecified, long siteId, bool siteIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, int[] docsCanceled, int totDocs, bool totDocsSpecified, object userState) {
            if ((this.closeBatchFOperationCompleted == null)) {
                this.closeBatchFOperationCompleted = new System.Threading.SendOrPostCallback(this.OncloseBatchFOperationCompleted);
            }
            this.InvokeAsync("closeBatchF", new object[] {
                        token,
                        batchId,
                        batchIdSpecified,
                        stationId,
                        stationIdSpecified,
                        siteId,
                        siteIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        docsCanceled,
                        totDocs,
                        totDocsSpecified}, this.closeBatchFOperationCompleted, userState);
        }
        
        private void OncloseBatchFOperationCompleted(object arg) {
            if ((this.closeBatchFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.closeBatchFCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public documentDto[] getDocumentFToRecapture([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified) {
            object[] results = this.Invoke("getDocumentFToRecapture", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        batchId,
                        batchIdSpecified});
            return ((documentDto[])(results[0]));
        }
        
        /// <remarks/>
        public void getDocumentFToRecaptureAsync(string token, long usrId, bool usrIdSpecified, long batchId, bool batchIdSpecified) {
            this.getDocumentFToRecaptureAsync(token, usrId, usrIdSpecified, batchId, batchIdSpecified, null);
        }
        
        /// <remarks/>
        public void getDocumentFToRecaptureAsync(string token, long usrId, bool usrIdSpecified, long batchId, bool batchIdSpecified, object userState) {
            if ((this.getDocumentFToRecaptureOperationCompleted == null)) {
                this.getDocumentFToRecaptureOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocumentFToRecaptureOperationCompleted);
            }
            this.InvokeAsync("getDocumentFToRecapture", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        batchId,
                        batchIdSpecified}, this.getDocumentFToRecaptureOperationCompleted, userState);
        }
        
        private void OngetDocumentFToRecaptureOperationCompleted(object arg) {
            if ((this.getDocumentFToRecaptureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocumentFToRecaptureCompleted(this, new getDocumentFToRecaptureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void insertDocument(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long typeId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typeIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string xml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long docId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool docIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int fileSize, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool fileSizeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int captSeq, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool captSeqSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string fileType, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string ocrTextNumber, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] decimal ocrTextValue, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool ocrTextValueSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentHashFile) {
            this.Invoke("insertDocument", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified,
                        typeId,
                        typeIdSpecified,
                        batchId,
                        batchIdSpecified,
                        xml,
                        docId,
                        docIdSpecified,
                        fileSize,
                        fileSizeSpecified,
                        captSeq,
                        captSeqSpecified,
                        fileType,
                        ocrTextNumber,
                        ocrTextValue,
                        ocrTextValueSpecified,
                        documentHashFile});
        }
        
        /// <remarks/>
        public void insertDocumentAsync(
                    string token, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    string xml, 
                    long docId, 
                    bool docIdSpecified, 
                    int fileSize, 
                    bool fileSizeSpecified, 
                    int captSeq, 
                    bool captSeqSpecified, 
                    string fileType, 
                    string ocrTextNumber, 
                    decimal ocrTextValue, 
                    bool ocrTextValueSpecified, 
                    string documentHashFile) {
            this.insertDocumentAsync(token, usrId, usrIdSpecified, stationId, stationIdSpecified, typeId, typeIdSpecified, batchId, batchIdSpecified, xml, docId, docIdSpecified, fileSize, fileSizeSpecified, captSeq, captSeqSpecified, fileType, ocrTextNumber, ocrTextValue, ocrTextValueSpecified, documentHashFile, null);
        }
        
        /// <remarks/>
        public void insertDocumentAsync(
                    string token, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    string xml, 
                    long docId, 
                    bool docIdSpecified, 
                    int fileSize, 
                    bool fileSizeSpecified, 
                    int captSeq, 
                    bool captSeqSpecified, 
                    string fileType, 
                    string ocrTextNumber, 
                    decimal ocrTextValue, 
                    bool ocrTextValueSpecified, 
                    string documentHashFile, 
                    object userState) {
            if ((this.insertDocumentOperationCompleted == null)) {
                this.insertDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OninsertDocumentOperationCompleted);
            }
            this.InvokeAsync("insertDocument", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified,
                        typeId,
                        typeIdSpecified,
                        batchId,
                        batchIdSpecified,
                        xml,
                        docId,
                        docIdSpecified,
                        fileSize,
                        fileSizeSpecified,
                        captSeq,
                        captSeqSpecified,
                        fileType,
                        ocrTextNumber,
                        ocrTextValue,
                        ocrTextValueSpecified,
                        documentHashFile}, this.insertDocumentOperationCompleted, userState);
        }
        
        private void OninsertDocumentOperationCompleted(object arg) {
            if ((this.insertDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.insertDocumentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long openBatchF([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long siteId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool siteIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified) {
            object[] results = this.Invoke("openBatchF", new object[] {
                        token,
                        workflowId,
                        workflowIdSpecified,
                        stationId,
                        stationIdSpecified,
                        siteId,
                        siteIdSpecified,
                        usrId,
                        usrIdSpecified});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void openBatchFAsync(string token, long workflowId, bool workflowIdSpecified, long stationId, bool stationIdSpecified, long siteId, bool siteIdSpecified, long usrId, bool usrIdSpecified) {
            this.openBatchFAsync(token, workflowId, workflowIdSpecified, stationId, stationIdSpecified, siteId, siteIdSpecified, usrId, usrIdSpecified, null);
        }
        
        /// <remarks/>
        public void openBatchFAsync(string token, long workflowId, bool workflowIdSpecified, long stationId, bool stationIdSpecified, long siteId, bool siteIdSpecified, long usrId, bool usrIdSpecified, object userState) {
            if ((this.openBatchFOperationCompleted == null)) {
                this.openBatchFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnopenBatchFOperationCompleted);
            }
            this.InvokeAsync("openBatchF", new object[] {
                        token,
                        workflowId,
                        workflowIdSpecified,
                        stationId,
                        stationIdSpecified,
                        siteId,
                        siteIdSpecified,
                        usrId,
                        usrIdSpecified}, this.openBatchFOperationCompleted, userState);
        }
        
        private void OnopenBatchFOperationCompleted(object arg) {
            if ((this.openBatchFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.openBatchFCompleted(this, new openBatchFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setBatchFTransmitted([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int totFiles, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool totFilesSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified) {
            this.Invoke("setBatchFTransmitted", new object[] {
                        token,
                        batchId,
                        batchIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        totFiles,
                        totFilesSpecified,
                        stationId,
                        stationIdSpecified,
                        usrId,
                        usrIdSpecified});
        }
        
        /// <remarks/>
        public void setBatchFTransmittedAsync(string token, long batchId, bool batchIdSpecified, long workflowId, bool workflowIdSpecified, int totFiles, bool totFilesSpecified, long stationId, bool stationIdSpecified, long usrId, bool usrIdSpecified) {
            this.setBatchFTransmittedAsync(token, batchId, batchIdSpecified, workflowId, workflowIdSpecified, totFiles, totFilesSpecified, stationId, stationIdSpecified, usrId, usrIdSpecified, null);
        }
        
        /// <remarks/>
        public void setBatchFTransmittedAsync(string token, long batchId, bool batchIdSpecified, long workflowId, bool workflowIdSpecified, int totFiles, bool totFilesSpecified, long stationId, bool stationIdSpecified, long usrId, bool usrIdSpecified, object userState) {
            if ((this.setBatchFTransmittedOperationCompleted == null)) {
                this.setBatchFTransmittedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetBatchFTransmittedOperationCompleted);
            }
            this.InvokeAsync("setBatchFTransmitted", new object[] {
                        token,
                        batchId,
                        batchIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        totFiles,
                        totFilesSpecified,
                        stationId,
                        stationIdSpecified,
                        usrId,
                        usrIdSpecified}, this.setBatchFTransmittedOperationCompleted, userState);
        }
        
        private void OnsetBatchFTransmittedOperationCompleted(object arg) {
            if ((this.setBatchFTransmittedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setBatchFTransmittedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long[] getBatchFToRecapture([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            object[] results = this.Invoke("getBatchFToRecapture", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void getBatchFToRecaptureAsync(string token, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.getBatchFToRecaptureAsync(token, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void getBatchFToRecaptureAsync(string token, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.getBatchFToRecaptureOperationCompleted == null)) {
                this.getBatchFToRecaptureOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetBatchFToRecaptureOperationCompleted);
            }
            this.InvokeAsync("getBatchFToRecapture", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.getBatchFToRecaptureOperationCompleted, userState);
        }
        
        private void OngetBatchFToRecaptureOperationCompleted(object arg) {
            if ((this.getBatchFToRecaptureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getBatchFToRecaptureCompleted(this, new getBatchFToRecaptureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.flexps.flexdoc.com.br/")]
    public partial class documentDto {
        
        private long batchIdField;
        
        private bool batchIdFieldSpecified;
        
        private int documentCaptureSeqField;
        
        private bool documentCaptureSeqFieldSpecified;
        
        private System.DateTime documentCreatedField;
        
        private bool documentCreatedFieldSpecified;
        
        private byte[] documentFileBackField;
        
        private byte[] documentFileFrontField;
        
        private int documentFileSizeBackField;
        
        private bool documentFileSizeBackFieldSpecified;
        
        private int documentFileSizeFrontField;
        
        private bool documentFileSizeFrontFieldSpecified;
        
        private string documentFileTypeBackField;
        
        private string documentFileTypeFrontField;
        
        private string documentHashFileField;
        
        private string documentHashFileBackField;
        
        private string documentHashXmlField;
        
        private string documentHashXmlBackField;
        
        private long documentIdField;
        
        private bool documentIdFieldSpecified;
        
        private int documentNsuField;
        
        private bool documentNsuFieldSpecified;
        
        private int documentNsuHostField;
        
        private bool documentNsuHostFieldSpecified;
        
        private string documentNumberField;
        
        private string documentReasonField;
        
        private int documentStatusField;
        
        private bool documentStatusFieldSpecified;
        
        private decimal documentValueField;
        
        private bool documentValueFieldSpecified;
        
        private string documentXmlField;
        
        private exceptionDto[] exceptionDtoListField;
        
        private pendingDto[] pendingDtoListField;
        
        private bool receiptField;
        
        private int siteExternalIdField;
        
        private bool siteExternalIdFieldSpecified;
        
        private string siteNameField;
        
        private long transIdField;
        
        private bool transIdFieldSpecified;
        
        private string typeAliasField;
        
        private long typeIdField;
        
        private bool typeIdFieldSpecified;
        
        private int typeOperationField;
        
        private bool typeOperationFieldSpecified;
        
        private int typeReceiptField;
        
        private bool typeReceiptFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long batchId {
            get {
                return this.batchIdField;
            }
            set {
                this.batchIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool batchIdSpecified {
            get {
                return this.batchIdFieldSpecified;
            }
            set {
                this.batchIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentCaptureSeq {
            get {
                return this.documentCaptureSeqField;
            }
            set {
                this.documentCaptureSeqField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentCaptureSeqSpecified {
            get {
                return this.documentCaptureSeqFieldSpecified;
            }
            set {
                this.documentCaptureSeqFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime documentCreated {
            get {
                return this.documentCreatedField;
            }
            set {
                this.documentCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentCreatedSpecified {
            get {
                return this.documentCreatedFieldSpecified;
            }
            set {
                this.documentCreatedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")]
        public byte[] documentFileBack {
            get {
                return this.documentFileBackField;
            }
            set {
                this.documentFileBackField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")]
        public byte[] documentFileFront {
            get {
                return this.documentFileFrontField;
            }
            set {
                this.documentFileFrontField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentFileSizeBack {
            get {
                return this.documentFileSizeBackField;
            }
            set {
                this.documentFileSizeBackField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentFileSizeBackSpecified {
            get {
                return this.documentFileSizeBackFieldSpecified;
            }
            set {
                this.documentFileSizeBackFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentFileSizeFront {
            get {
                return this.documentFileSizeFrontField;
            }
            set {
                this.documentFileSizeFrontField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentFileSizeFrontSpecified {
            get {
                return this.documentFileSizeFrontFieldSpecified;
            }
            set {
                this.documentFileSizeFrontFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentFileTypeBack {
            get {
                return this.documentFileTypeBackField;
            }
            set {
                this.documentFileTypeBackField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentFileTypeFront {
            get {
                return this.documentFileTypeFrontField;
            }
            set {
                this.documentFileTypeFrontField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentHashFile {
            get {
                return this.documentHashFileField;
            }
            set {
                this.documentHashFileField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentHashFileBack {
            get {
                return this.documentHashFileBackField;
            }
            set {
                this.documentHashFileBackField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentHashXml {
            get {
                return this.documentHashXmlField;
            }
            set {
                this.documentHashXmlField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentHashXmlBack {
            get {
                return this.documentHashXmlBackField;
            }
            set {
                this.documentHashXmlBackField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long documentId {
            get {
                return this.documentIdField;
            }
            set {
                this.documentIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentIdSpecified {
            get {
                return this.documentIdFieldSpecified;
            }
            set {
                this.documentIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentNsu {
            get {
                return this.documentNsuField;
            }
            set {
                this.documentNsuField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNsuSpecified {
            get {
                return this.documentNsuFieldSpecified;
            }
            set {
                this.documentNsuFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentNsuHost {
            get {
                return this.documentNsuHostField;
            }
            set {
                this.documentNsuHostField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNsuHostSpecified {
            get {
                return this.documentNsuHostFieldSpecified;
            }
            set {
                this.documentNsuHostFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentNumber {
            get {
                return this.documentNumberField;
            }
            set {
                this.documentNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentReason {
            get {
                return this.documentReasonField;
            }
            set {
                this.documentReasonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentStatus {
            get {
                return this.documentStatusField;
            }
            set {
                this.documentStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentStatusSpecified {
            get {
                return this.documentStatusFieldSpecified;
            }
            set {
                this.documentStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal documentValue {
            get {
                return this.documentValueField;
            }
            set {
                this.documentValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentValueSpecified {
            get {
                return this.documentValueFieldSpecified;
            }
            set {
                this.documentValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentXml {
            get {
                return this.documentXmlField;
            }
            set {
                this.documentXmlField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("exceptionDtoList", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public exceptionDto[] exceptionDtoList {
            get {
                return this.exceptionDtoListField;
            }
            set {
                this.exceptionDtoListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("pendingDtoList", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public pendingDto[] pendingDtoList {
            get {
                return this.pendingDtoListField;
            }
            set {
                this.pendingDtoListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool receipt {
            get {
                return this.receiptField;
            }
            set {
                this.receiptField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int siteExternalId {
            get {
                return this.siteExternalIdField;
            }
            set {
                this.siteExternalIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool siteExternalIdSpecified {
            get {
                return this.siteExternalIdFieldSpecified;
            }
            set {
                this.siteExternalIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string siteName {
            get {
                return this.siteNameField;
            }
            set {
                this.siteNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long transId {
            get {
                return this.transIdField;
            }
            set {
                this.transIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool transIdSpecified {
            get {
                return this.transIdFieldSpecified;
            }
            set {
                this.transIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string typeAlias {
            get {
                return this.typeAliasField;
            }
            set {
                this.typeAliasField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long typeId {
            get {
                return this.typeIdField;
            }
            set {
                this.typeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeIdSpecified {
            get {
                return this.typeIdFieldSpecified;
            }
            set {
                this.typeIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int typeOperation {
            get {
                return this.typeOperationField;
            }
            set {
                this.typeOperationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeOperationSpecified {
            get {
                return this.typeOperationFieldSpecified;
            }
            set {
                this.typeOperationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int typeReceipt {
            get {
                return this.typeReceiptField;
            }
            set {
                this.typeReceiptField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeReceiptSpecified {
            get {
                return this.typeReceiptFieldSpecified;
            }
            set {
                this.typeReceiptFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.flexps.flexdoc.com.br/")]
    public partial class exceptionDto {
        
        private int exceptionAuthTypeField;
        
        private bool exceptionAuthTypeFieldSpecified;
        
        private long exceptionIdField;
        
        private bool exceptionIdFieldSpecified;
        
        private string exceptionNameField;
        
        private int exceptionOriginField;
        
        private bool exceptionOriginFieldSpecified;
        
        private string exceptionOsfField;
        
        private int exceptionPendingField;
        
        private bool exceptionPendingFieldSpecified;
        
        private int exceptionTypeField;
        
        private bool exceptionTypeFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int exceptionAuthType {
            get {
                return this.exceptionAuthTypeField;
            }
            set {
                this.exceptionAuthTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool exceptionAuthTypeSpecified {
            get {
                return this.exceptionAuthTypeFieldSpecified;
            }
            set {
                this.exceptionAuthTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long exceptionId {
            get {
                return this.exceptionIdField;
            }
            set {
                this.exceptionIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool exceptionIdSpecified {
            get {
                return this.exceptionIdFieldSpecified;
            }
            set {
                this.exceptionIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string exceptionName {
            get {
                return this.exceptionNameField;
            }
            set {
                this.exceptionNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int exceptionOrigin {
            get {
                return this.exceptionOriginField;
            }
            set {
                this.exceptionOriginField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool exceptionOriginSpecified {
            get {
                return this.exceptionOriginFieldSpecified;
            }
            set {
                this.exceptionOriginFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string exceptionOsf {
            get {
                return this.exceptionOsfField;
            }
            set {
                this.exceptionOsfField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int exceptionPending {
            get {
                return this.exceptionPendingField;
            }
            set {
                this.exceptionPendingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool exceptionPendingSpecified {
            get {
                return this.exceptionPendingFieldSpecified;
            }
            set {
                this.exceptionPendingFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int exceptionType {
            get {
                return this.exceptionTypeField;
            }
            set {
                this.exceptionTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool exceptionTypeSpecified {
            get {
                return this.exceptionTypeFieldSpecified;
            }
            set {
                this.exceptionTypeFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.flexps.flexdoc.com.br/")]
    public partial class pendingDto {
        
        private System.DateTime pendingDateField;
        
        private bool pendingDateFieldSpecified;
        
        private long pendingIdField;
        
        private bool pendingIdFieldSpecified;
        
        private string pendingReasonField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime pendingDate {
            get {
                return this.pendingDateField;
            }
            set {
                this.pendingDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pendingDateSpecified {
            get {
                return this.pendingDateFieldSpecified;
            }
            set {
                this.pendingDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long pendingId {
            get {
                return this.pendingIdField;
            }
            set {
                this.pendingIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pendingIdSpecified {
            get {
                return this.pendingIdFieldSpecified;
            }
            set {
                this.pendingIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string pendingReason {
            get {
                return this.pendingReasonField;
            }
            set {
                this.pendingReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void setDocFRecaptureCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void closeBatchFCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void getDocumentFToRecaptureCompletedEventHandler(object sender, getDocumentFToRecaptureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDocumentFToRecaptureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDocumentFToRecaptureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public documentDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((documentDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void insertDocumentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void openBatchFCompletedEventHandler(object sender, openBatchFCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class openBatchFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal openBatchFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void setBatchFTransmittedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void getBatchFToRecaptureCompletedEventHandler(object sender, getBatchFToRecaptureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getBatchFToRecaptureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getBatchFToRecaptureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace FlexImage.WebService.DocumentNFWebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DocumentNfServiceSoapBinding", Namespace="http://impl.service.flexps.flexdoc.com.br/")]
    public partial class DocumentNfService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getListDocsForBkpOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocumentNfOperationCompleted;
        
        private System.Threading.SendOrPostCallback closeBackupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getListDocsForBkpByTypeOperationCompleted;
        
        private System.Threading.SendOrPostCallback insertDocumentNfOperationCompleted;
        
        private System.Threading.SendOrPostCallback getListDocsForBkpByDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback insertPredocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback getOpenBackupOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocsNfByBatchNfOperationCompleted;
        
        private System.Threading.SendOrPostCallback indexDocumentNfOperationCompleted;
        
        private System.Threading.SendOrPostCallback setDocumentBackupedOperationCompleted;
        
        private System.Threading.SendOrPostCallback isCapaOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateFileInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPendingSignatureOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocKeyByDocNfIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPreDocKeyByPreDocumentIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback reBackupOperationCompleted;
        
        private System.Threading.SendOrPostCallback openBackupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocsNfIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteDocumentNfOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DocumentNfService() {
            this.Url = global::FlexImage.WebService.Properties.Settings.Default.FlexImage_WSDocumentNF_DocumentNFWebReference_DocumentNfService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getListDocsForBkpCompletedEventHandler getListDocsForBkpCompleted;
        
        /// <remarks/>
        public event getDocumentNfCompletedEventHandler getDocumentNfCompleted;
        
        /// <remarks/>
        public event closeBackupsCompletedEventHandler closeBackupsCompleted;
        
        /// <remarks/>
        public event getListDocsForBkpByTypeCompletedEventHandler getListDocsForBkpByTypeCompleted;
        
        /// <remarks/>
        public event insertDocumentNfCompletedEventHandler insertDocumentNfCompleted;
        
        /// <remarks/>
        public event getListDocsForBkpByDateCompletedEventHandler getListDocsForBkpByDateCompleted;
        
        /// <remarks/>
        public event insertPredocumentCompletedEventHandler insertPredocumentCompleted;
        
        /// <remarks/>
        public event getOpenBackupCompletedEventHandler getOpenBackupCompleted;
        
        /// <remarks/>
        public event getDocsNfByBatchNfCompletedEventHandler getDocsNfByBatchNfCompleted;
        
        /// <remarks/>
        public event indexDocumentNfCompletedEventHandler indexDocumentNfCompleted;
        
        /// <remarks/>
        public event setDocumentBackupedCompletedEventHandler setDocumentBackupedCompleted;
        
        /// <remarks/>
        public event isCapaCompletedEventHandler isCapaCompleted;
        
        /// <remarks/>
        public event updateFileInfoCompletedEventHandler updateFileInfoCompleted;
        
        /// <remarks/>
        public event getPendingSignatureCompletedEventHandler getPendingSignatureCompleted;
        
        /// <remarks/>
        public event getDocKeyByDocNfIdCompletedEventHandler getDocKeyByDocNfIdCompleted;
        
        /// <remarks/>
        public event getPreDocKeyByPreDocumentIdCompletedEventHandler getPreDocKeyByPreDocumentIdCompleted;
        
        /// <remarks/>
        public event reBackupCompletedEventHandler reBackupCompleted;
        
        /// <remarks/>
        public event openBackupsCompletedEventHandler openBackupsCompleted;
        
        /// <remarks/>
        public event getDocsNfIdCompletedEventHandler getDocsNfIdCompleted;
        
        /// <remarks/>
        public event deleteDocumentNfCompletedEventHandler deleteDocumentNfCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public documentNfDto[] getListDocsForBkp([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentNfIdInitial, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentNfIdInitialSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int length, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool lengthSpecified) {
            object[] results = this.Invoke("getListDocsForBkp", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentNfIdInitial,
                        documentNfIdInitialSpecified,
                        length,
                        lengthSpecified});
            return ((documentNfDto[])(results[0]));
        }
        
        /// <remarks/>
        public void getListDocsForBkpAsync(string token, long usrId, bool usrIdSpecified, long documentNfIdInitial, bool documentNfIdInitialSpecified, int length, bool lengthSpecified) {
            this.getListDocsForBkpAsync(token, usrId, usrIdSpecified, documentNfIdInitial, documentNfIdInitialSpecified, length, lengthSpecified, null);
        }
        
        /// <remarks/>
        public void getListDocsForBkpAsync(string token, long usrId, bool usrIdSpecified, long documentNfIdInitial, bool documentNfIdInitialSpecified, int length, bool lengthSpecified, object userState) {
            if ((this.getListDocsForBkpOperationCompleted == null)) {
                this.getListDocsForBkpOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetListDocsForBkpOperationCompleted);
            }
            this.InvokeAsync("getListDocsForBkp", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentNfIdInitial,
                        documentNfIdInitialSpecified,
                        length,
                        lengthSpecified}, this.getListDocsForBkpOperationCompleted, userState);
        }
        
        private void OngetListDocsForBkpOperationCompleted(object arg) {
            if ((this.getListDocsForBkpCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getListDocsForBkpCompleted(this, new getListDocsForBkpCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public documentNfDto getDocumentNf([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentNfIdSpecified) {
            object[] results = this.Invoke("getDocumentNf", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentNfId,
                        documentNfIdSpecified});
            return ((documentNfDto)(results[0]));
        }
        
        /// <remarks/>
        public void getDocumentNfAsync(string token, long usrId, bool usrIdSpecified, long documentNfId, bool documentNfIdSpecified) {
            this.getDocumentNfAsync(token, usrId, usrIdSpecified, documentNfId, documentNfIdSpecified, null);
        }
        
        /// <remarks/>
        public void getDocumentNfAsync(string token, long usrId, bool usrIdSpecified, long documentNfId, bool documentNfIdSpecified, object userState) {
            if ((this.getDocumentNfOperationCompleted == null)) {
                this.getDocumentNfOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocumentNfOperationCompleted);
            }
            this.InvokeAsync("getDocumentNf", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentNfId,
                        documentNfIdSpecified}, this.getDocumentNfOperationCompleted, userState);
        }
        
        private void OngetDocumentNfOperationCompleted(object arg) {
            if ((this.getDocumentNfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocumentNfCompleted(this, new getDocumentNfCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void closeBackups([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long backupId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool backupIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int totalDocs, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool totalDocsSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int totalBytes, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool totalBytesSpecified) {
            this.Invoke("closeBackups", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        backupId,
                        backupIdSpecified,
                        totalDocs,
                        totalDocsSpecified,
                        totalBytes,
                        totalBytesSpecified});
        }
        
        /// <remarks/>
        public void closeBackupsAsync(string token, long usrId, bool usrIdSpecified, long backupId, bool backupIdSpecified, int totalDocs, bool totalDocsSpecified, int totalBytes, bool totalBytesSpecified) {
            this.closeBackupsAsync(token, usrId, usrIdSpecified, backupId, backupIdSpecified, totalDocs, totalDocsSpecified, totalBytes, totalBytesSpecified, null);
        }
        
        /// <remarks/>
        public void closeBackupsAsync(string token, long usrId, bool usrIdSpecified, long backupId, bool backupIdSpecified, int totalDocs, bool totalDocsSpecified, int totalBytes, bool totalBytesSpecified, object userState) {
            if ((this.closeBackupsOperationCompleted == null)) {
                this.closeBackupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OncloseBackupsOperationCompleted);
            }
            this.InvokeAsync("closeBackups", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        backupId,
                        backupIdSpecified,
                        totalDocs,
                        totalDocsSpecified,
                        totalBytes,
                        totalBytesSpecified}, this.closeBackupsOperationCompleted, userState);
        }
        
        private void OncloseBackupsOperationCompleted(object arg) {
            if ((this.closeBackupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.closeBackupsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public documentNfDto[] getListDocsForBkpByType([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long typeId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typeIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentNfIdInitial, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentNfIdInitialSpecified) {
            object[] results = this.Invoke("getListDocsForBkpByType", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        typeId,
                        typeIdSpecified,
                        documentNfIdInitial,
                        documentNfIdInitialSpecified});
            return ((documentNfDto[])(results[0]));
        }
        
        /// <remarks/>
        public void getListDocsForBkpByTypeAsync(string token, long usrId, bool usrIdSpecified, long typeId, bool typeIdSpecified, long documentNfIdInitial, bool documentNfIdInitialSpecified) {
            this.getListDocsForBkpByTypeAsync(token, usrId, usrIdSpecified, typeId, typeIdSpecified, documentNfIdInitial, documentNfIdInitialSpecified, null);
        }
        
        /// <remarks/>
        public void getListDocsForBkpByTypeAsync(string token, long usrId, bool usrIdSpecified, long typeId, bool typeIdSpecified, long documentNfIdInitial, bool documentNfIdInitialSpecified, object userState) {
            if ((this.getListDocsForBkpByTypeOperationCompleted == null)) {
                this.getListDocsForBkpByTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetListDocsForBkpByTypeOperationCompleted);
            }
            this.InvokeAsync("getListDocsForBkpByType", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        typeId,
                        typeIdSpecified,
                        documentNfIdInitial,
                        documentNfIdInitialSpecified}, this.getListDocsForBkpByTypeOperationCompleted, userState);
        }
        
        private void OngetListDocsForBkpByTypeOperationCompleted(object arg) {
            if ((this.getListDocsForBkpByTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getListDocsForBkpByTypeCompleted(this, new getListDocsForBkpByTypeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void insertDocumentNf(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long docNfId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool docNfIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long typeId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typeIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long virtualFolderId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool virtualFolderIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchNfId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int origin, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool originSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int fileSize, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool fileSizeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int captSeq, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool captSeqSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string fileType, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int totalPages, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool totalPagesSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string originalFileName, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string hash) {
            this.Invoke("insertDocumentNf", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified,
                        docNfId,
                        docNfIdSpecified,
                        typeId,
                        typeIdSpecified,
                        virtualFolderId,
                        virtualFolderIdSpecified,
                        batchNfId,
                        batchNfIdSpecified,
                        origin,
                        originSpecified,
                        fileSize,
                        fileSizeSpecified,
                        captSeq,
                        captSeqSpecified,
                        fileType,
                        totalPages,
                        totalPagesSpecified,
                        originalFileName,
                        hash});
        }
        
        /// <remarks/>
        public void insertDocumentNfAsync(
                    string token, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified, 
                    long docNfId, 
                    bool docNfIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    long virtualFolderId, 
                    bool virtualFolderIdSpecified, 
                    long batchNfId, 
                    bool batchNfIdSpecified, 
                    int origin, 
                    bool originSpecified, 
                    int fileSize, 
                    bool fileSizeSpecified, 
                    int captSeq, 
                    bool captSeqSpecified, 
                    string fileType, 
                    int totalPages, 
                    bool totalPagesSpecified, 
                    string originalFileName, 
                    string hash) {
            this.insertDocumentNfAsync(token, usrId, usrIdSpecified, stationId, stationIdSpecified, docNfId, docNfIdSpecified, typeId, typeIdSpecified, virtualFolderId, virtualFolderIdSpecified, batchNfId, batchNfIdSpecified, origin, originSpecified, fileSize, fileSizeSpecified, captSeq, captSeqSpecified, fileType, totalPages, totalPagesSpecified, originalFileName, hash, null);
        }
        
        /// <remarks/>
        public void insertDocumentNfAsync(
                    string token, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified, 
                    long docNfId, 
                    bool docNfIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    long virtualFolderId, 
                    bool virtualFolderIdSpecified, 
                    long batchNfId, 
                    bool batchNfIdSpecified, 
                    int origin, 
                    bool originSpecified, 
                    int fileSize, 
                    bool fileSizeSpecified, 
                    int captSeq, 
                    bool captSeqSpecified, 
                    string fileType, 
                    int totalPages, 
                    bool totalPagesSpecified, 
                    string originalFileName, 
                    string hash, 
                    object userState) {
            if ((this.insertDocumentNfOperationCompleted == null)) {
                this.insertDocumentNfOperationCompleted = new System.Threading.SendOrPostCallback(this.OninsertDocumentNfOperationCompleted);
            }
            this.InvokeAsync("insertDocumentNf", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified,
                        docNfId,
                        docNfIdSpecified,
                        typeId,
                        typeIdSpecified,
                        virtualFolderId,
                        virtualFolderIdSpecified,
                        batchNfId,
                        batchNfIdSpecified,
                        origin,
                        originSpecified,
                        fileSize,
                        fileSizeSpecified,
                        captSeq,
                        captSeqSpecified,
                        fileType,
                        totalPages,
                        totalPagesSpecified,
                        originalFileName,
                        hash}, this.insertDocumentNfOperationCompleted, userState);
        }
        
        private void OninsertDocumentNfOperationCompleted(object arg) {
            if ((this.insertDocumentNfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.insertDocumentNfCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public documentNfDto[] getListDocsForBkpByDate([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime dataInicial, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool dataInicialSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime dataFinal, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool dataFinalSpecified) {
            object[] results = this.Invoke("getListDocsForBkpByDate", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        dataInicial,
                        dataInicialSpecified,
                        dataFinal,
                        dataFinalSpecified});
            return ((documentNfDto[])(results[0]));
        }
        
        /// <remarks/>
        public void getListDocsForBkpByDateAsync(string token, long usrId, bool usrIdSpecified, System.DateTime dataInicial, bool dataInicialSpecified, System.DateTime dataFinal, bool dataFinalSpecified) {
            this.getListDocsForBkpByDateAsync(token, usrId, usrIdSpecified, dataInicial, dataInicialSpecified, dataFinal, dataFinalSpecified, null);
        }
        
        /// <remarks/>
        public void getListDocsForBkpByDateAsync(string token, long usrId, bool usrIdSpecified, System.DateTime dataInicial, bool dataInicialSpecified, System.DateTime dataFinal, bool dataFinalSpecified, object userState) {
            if ((this.getListDocsForBkpByDateOperationCompleted == null)) {
                this.getListDocsForBkpByDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetListDocsForBkpByDateOperationCompleted);
            }
            this.InvokeAsync("getListDocsForBkpByDate", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        dataInicial,
                        dataInicialSpecified,
                        dataFinal,
                        dataFinalSpecified}, this.getListDocsForBkpByDateOperationCompleted, userState);
        }
        
        private void OngetListDocsForBkpByDateOperationCompleted(object arg) {
            if ((this.getListDocsForBkpByDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getListDocsForBkpByDateCompleted(this, new getListDocsForBkpByDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long insertPredocument([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long typeId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typeIdSpecified, [System.Xml.Serialization.XmlElementAttribute("preDocKeyDtoList", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] preDocKeyDto[] preDocKeyDtoList) {
            object[] results = this.Invoke("insertPredocument", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        typeId,
                        typeIdSpecified,
                        preDocKeyDtoList});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void insertPredocumentAsync(string token, long usrId, bool usrIdSpecified, long typeId, bool typeIdSpecified, preDocKeyDto[] preDocKeyDtoList) {
            this.insertPredocumentAsync(token, usrId, usrIdSpecified, typeId, typeIdSpecified, preDocKeyDtoList, null);
        }
        
        /// <remarks/>
        public void insertPredocumentAsync(string token, long usrId, bool usrIdSpecified, long typeId, bool typeIdSpecified, preDocKeyDto[] preDocKeyDtoList, object userState) {
            if ((this.insertPredocumentOperationCompleted == null)) {
                this.insertPredocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OninsertPredocumentOperationCompleted);
            }
            this.InvokeAsync("insertPredocument", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        typeId,
                        typeIdSpecified,
                        preDocKeyDtoList}, this.insertPredocumentOperationCompleted, userState);
        }
        
        private void OninsertPredocumentOperationCompleted(object arg) {
            if ((this.insertPredocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.insertPredocumentCompleted(this, new insertPredocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long getOpenBackup([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified) {
            object[] results = this.Invoke("getOpenBackup", new object[] {
                        token,
                        usrId,
                        usrIdSpecified});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void getOpenBackupAsync(string token, long usrId, bool usrIdSpecified) {
            this.getOpenBackupAsync(token, usrId, usrIdSpecified, null);
        }
        
        /// <remarks/>
        public void getOpenBackupAsync(string token, long usrId, bool usrIdSpecified, object userState) {
            if ((this.getOpenBackupOperationCompleted == null)) {
                this.getOpenBackupOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetOpenBackupOperationCompleted);
            }
            this.InvokeAsync("getOpenBackup", new object[] {
                        token,
                        usrId,
                        usrIdSpecified}, this.getOpenBackupOperationCompleted, userState);
        }
        
        private void OngetOpenBackupOperationCompleted(object arg) {
            if ((this.getOpenBackupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getOpenBackupCompleted(this, new getOpenBackupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public documentNfDto[] getDocsNfByBatchNf([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfIdSpecified) {
            object[] results = this.Invoke("getDocsNfByBatchNf", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        batchNfId,
                        batchNfIdSpecified});
            return ((documentNfDto[])(results[0]));
        }
        
        /// <remarks/>
        public void getDocsNfByBatchNfAsync(string token, long usrId, bool usrIdSpecified, long batchNfId, bool batchNfIdSpecified) {
            this.getDocsNfByBatchNfAsync(token, usrId, usrIdSpecified, batchNfId, batchNfIdSpecified, null);
        }
        
        /// <remarks/>
        public void getDocsNfByBatchNfAsync(string token, long usrId, bool usrIdSpecified, long batchNfId, bool batchNfIdSpecified, object userState) {
            if ((this.getDocsNfByBatchNfOperationCompleted == null)) {
                this.getDocsNfByBatchNfOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocsNfByBatchNfOperationCompleted);
            }
            this.InvokeAsync("getDocsNfByBatchNf", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        batchNfId,
                        batchNfIdSpecified}, this.getDocsNfByBatchNfOperationCompleted, userState);
        }
        
        private void OngetDocsNfByBatchNfOperationCompleted(object arg) {
            if ((this.getDocsNfByBatchNfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocsNfByBatchNfCompleted(this, new getDocsNfByBatchNfCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void indexDocumentNf([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentNfIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long typeId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typeIdSpecified, [System.Xml.Serialization.XmlElementAttribute("docKeys", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] docKeyDto[] docKeys, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool autoIndexed) {
            this.Invoke("indexDocumentNf", new object[] {
                        token,
                        documentNfId,
                        documentNfIdSpecified,
                        typeId,
                        typeIdSpecified,
                        docKeys,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified,
                        autoIndexed});
        }
        
        /// <remarks/>
        public void indexDocumentNfAsync(string token, long documentNfId, bool documentNfIdSpecified, long typeId, bool typeIdSpecified, docKeyDto[] docKeys, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, bool autoIndexed) {
            this.indexDocumentNfAsync(token, documentNfId, documentNfIdSpecified, typeId, typeIdSpecified, docKeys, usrId, usrIdSpecified, stationId, stationIdSpecified, autoIndexed, null);
        }
        
        /// <remarks/>
        public void indexDocumentNfAsync(string token, long documentNfId, bool documentNfIdSpecified, long typeId, bool typeIdSpecified, docKeyDto[] docKeys, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, bool autoIndexed, object userState) {
            if ((this.indexDocumentNfOperationCompleted == null)) {
                this.indexDocumentNfOperationCompleted = new System.Threading.SendOrPostCallback(this.OnindexDocumentNfOperationCompleted);
            }
            this.InvokeAsync("indexDocumentNf", new object[] {
                        token,
                        documentNfId,
                        documentNfIdSpecified,
                        typeId,
                        typeIdSpecified,
                        docKeys,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified,
                        autoIndexed}, this.indexDocumentNfOperationCompleted, userState);
        }
        
        private void OnindexDocumentNfOperationCompleted(object arg) {
            if ((this.indexDocumentNfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.indexDocumentNfCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setDocumentBackuped([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentNfIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long backupsId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool backupsIdSpecified) {
            this.Invoke("setDocumentBackuped", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentNfId,
                        documentNfIdSpecified,
                        backupsId,
                        backupsIdSpecified});
        }
        
        /// <remarks/>
        public void setDocumentBackupedAsync(string token, long usrId, bool usrIdSpecified, long documentNfId, bool documentNfIdSpecified, long backupsId, bool backupsIdSpecified) {
            this.setDocumentBackupedAsync(token, usrId, usrIdSpecified, documentNfId, documentNfIdSpecified, backupsId, backupsIdSpecified, null);
        }
        
        /// <remarks/>
        public void setDocumentBackupedAsync(string token, long usrId, bool usrIdSpecified, long documentNfId, bool documentNfIdSpecified, long backupsId, bool backupsIdSpecified, object userState) {
            if ((this.setDocumentBackupedOperationCompleted == null)) {
                this.setDocumentBackupedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetDocumentBackupedOperationCompleted);
            }
            this.InvokeAsync("setDocumentBackuped", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentNfId,
                        documentNfIdSpecified,
                        backupsId,
                        backupsIdSpecified}, this.setDocumentBackupedOperationCompleted, userState);
        }
        
        private void OnsetDocumentBackupedOperationCompleted(object arg) {
            if ((this.setDocumentBackupedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setDocumentBackupedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool isCapa([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentNfIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfIdSpecified) {
            object[] results = this.Invoke("isCapa", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentNfId,
                        documentNfIdSpecified,
                        batchNfId,
                        batchNfIdSpecified});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void isCapaAsync(string token, long usrId, bool usrIdSpecified, long documentNfId, bool documentNfIdSpecified, long batchNfId, bool batchNfIdSpecified) {
            this.isCapaAsync(token, usrId, usrIdSpecified, documentNfId, documentNfIdSpecified, batchNfId, batchNfIdSpecified, null);
        }
        
        /// <remarks/>
        public void isCapaAsync(string token, long usrId, bool usrIdSpecified, long documentNfId, bool documentNfIdSpecified, long batchNfId, bool batchNfIdSpecified, object userState) {
            if ((this.isCapaOperationCompleted == null)) {
                this.isCapaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnisCapaOperationCompleted);
            }
            this.InvokeAsync("isCapa", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentNfId,
                        documentNfIdSpecified,
                        batchNfId,
                        batchNfIdSpecified}, this.isCapaOperationCompleted, userState);
        }
        
        private void OnisCapaOperationCompleted(object arg) {
            if ((this.isCapaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.isCapaCompleted(this, new isCapaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void updateFileInfo([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentNfIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string hashFile, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string fileType, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int fileSize, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool fileSizeSpecified) {
            this.Invoke("updateFileInfo", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentNfId,
                        documentNfIdSpecified,
                        hashFile,
                        fileType,
                        fileSize,
                        fileSizeSpecified});
        }
        
        /// <remarks/>
        public void updateFileInfoAsync(string token, long usrId, bool usrIdSpecified, long documentNfId, bool documentNfIdSpecified, string hashFile, string fileType, int fileSize, bool fileSizeSpecified) {
            this.updateFileInfoAsync(token, usrId, usrIdSpecified, documentNfId, documentNfIdSpecified, hashFile, fileType, fileSize, fileSizeSpecified, null);
        }
        
        /// <remarks/>
        public void updateFileInfoAsync(string token, long usrId, bool usrIdSpecified, long documentNfId, bool documentNfIdSpecified, string hashFile, string fileType, int fileSize, bool fileSizeSpecified, object userState) {
            if ((this.updateFileInfoOperationCompleted == null)) {
                this.updateFileInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateFileInfoOperationCompleted);
            }
            this.InvokeAsync("updateFileInfo", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentNfId,
                        documentNfIdSpecified,
                        hashFile,
                        fileType,
                        fileSize,
                        fileSizeSpecified}, this.updateFileInfoOperationCompleted, userState);
        }
        
        private void OnupdateFileInfoOperationCompleted(object arg) {
            if ((this.updateFileInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateFileInfoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public documentNfDto[] getPendingSignature([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified) {
            object[] results = this.Invoke("getPendingSignature", new object[] {
                        token,
                        usrId,
                        usrIdSpecified});
            return ((documentNfDto[])(results[0]));
        }
        
        /// <remarks/>
        public void getPendingSignatureAsync(string token, long usrId, bool usrIdSpecified) {
            this.getPendingSignatureAsync(token, usrId, usrIdSpecified, null);
        }
        
        /// <remarks/>
        public void getPendingSignatureAsync(string token, long usrId, bool usrIdSpecified, object userState) {
            if ((this.getPendingSignatureOperationCompleted == null)) {
                this.getPendingSignatureOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPendingSignatureOperationCompleted);
            }
            this.InvokeAsync("getPendingSignature", new object[] {
                        token,
                        usrId,
                        usrIdSpecified}, this.getPendingSignatureOperationCompleted, userState);
        }
        
        private void OngetPendingSignatureOperationCompleted(object arg) {
            if ((this.getPendingSignatureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPendingSignatureCompleted(this, new getPendingSignatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public docKeyDto[] getDocKeyByDocNfId([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentNfIdSpecified) {
            object[] results = this.Invoke("getDocKeyByDocNfId", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentNfId,
                        documentNfIdSpecified});
            return ((docKeyDto[])(results[0]));
        }
        
        /// <remarks/>
        public void getDocKeyByDocNfIdAsync(string token, long usrId, bool usrIdSpecified, long documentNfId, bool documentNfIdSpecified) {
            this.getDocKeyByDocNfIdAsync(token, usrId, usrIdSpecified, documentNfId, documentNfIdSpecified, null);
        }
        
        /// <remarks/>
        public void getDocKeyByDocNfIdAsync(string token, long usrId, bool usrIdSpecified, long documentNfId, bool documentNfIdSpecified, object userState) {
            if ((this.getDocKeyByDocNfIdOperationCompleted == null)) {
                this.getDocKeyByDocNfIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocKeyByDocNfIdOperationCompleted);
            }
            this.InvokeAsync("getDocKeyByDocNfId", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentNfId,
                        documentNfIdSpecified}, this.getDocKeyByDocNfIdOperationCompleted, userState);
        }
        
        private void OngetDocKeyByDocNfIdOperationCompleted(object arg) {
            if ((this.getDocKeyByDocNfIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocKeyByDocNfIdCompleted(this, new getDocKeyByDocNfIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public preDocKeyDto[] getPreDocKeyByPreDocumentId([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long preDocumentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool preDocumentIdSpecified) {
            object[] results = this.Invoke("getPreDocKeyByPreDocumentId", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        preDocumentId,
                        preDocumentIdSpecified});
            return ((preDocKeyDto[])(results[0]));
        }
        
        /// <remarks/>
        public void getPreDocKeyByPreDocumentIdAsync(string token, long usrId, bool usrIdSpecified, long preDocumentId, bool preDocumentIdSpecified) {
            this.getPreDocKeyByPreDocumentIdAsync(token, usrId, usrIdSpecified, preDocumentId, preDocumentIdSpecified, null);
        }
        
        /// <remarks/>
        public void getPreDocKeyByPreDocumentIdAsync(string token, long usrId, bool usrIdSpecified, long preDocumentId, bool preDocumentIdSpecified, object userState) {
            if ((this.getPreDocKeyByPreDocumentIdOperationCompleted == null)) {
                this.getPreDocKeyByPreDocumentIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPreDocKeyByPreDocumentIdOperationCompleted);
            }
            this.InvokeAsync("getPreDocKeyByPreDocumentId", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        preDocumentId,
                        preDocumentIdSpecified}, this.getPreDocKeyByPreDocumentIdOperationCompleted, userState);
        }
        
        private void OngetPreDocKeyByPreDocumentIdOperationCompleted(object arg) {
            if ((this.getPreDocKeyByPreDocumentIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPreDocKeyByPreDocumentIdCompleted(this, new getPreDocKeyByPreDocumentIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long[] reBackup([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long backupsId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool backupsIdSpecified) {
            object[] results = this.Invoke("reBackup", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        backupsId,
                        backupsIdSpecified});
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void reBackupAsync(string token, long usrId, bool usrIdSpecified, long backupsId, bool backupsIdSpecified) {
            this.reBackupAsync(token, usrId, usrIdSpecified, backupsId, backupsIdSpecified, null);
        }
        
        /// <remarks/>
        public void reBackupAsync(string token, long usrId, bool usrIdSpecified, long backupsId, bool backupsIdSpecified, object userState) {
            if ((this.reBackupOperationCompleted == null)) {
                this.reBackupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreBackupOperationCompleted);
            }
            this.InvokeAsync("reBackup", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        backupsId,
                        backupsIdSpecified}, this.reBackupOperationCompleted, userState);
        }
        
        private void OnreBackupOperationCompleted(object arg) {
            if ((this.reBackupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.reBackupCompleted(this, new reBackupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long openBackups([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string desc, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long mediaTypeId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool mediaTypeIdSpecified) {
            object[] results = this.Invoke("openBackups", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        desc,
                        mediaTypeId,
                        mediaTypeIdSpecified});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void openBackupsAsync(string token, long usrId, bool usrIdSpecified, string desc, long mediaTypeId, bool mediaTypeIdSpecified) {
            this.openBackupsAsync(token, usrId, usrIdSpecified, desc, mediaTypeId, mediaTypeIdSpecified, null);
        }
        
        /// <remarks/>
        public void openBackupsAsync(string token, long usrId, bool usrIdSpecified, string desc, long mediaTypeId, bool mediaTypeIdSpecified, object userState) {
            if ((this.openBackupsOperationCompleted == null)) {
                this.openBackupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnopenBackupsOperationCompleted);
            }
            this.InvokeAsync("openBackups", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        desc,
                        mediaTypeId,
                        mediaTypeIdSpecified}, this.openBackupsOperationCompleted, userState);
        }
        
        private void OnopenBackupsOperationCompleted(object arg) {
            if ((this.openBackupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.openBackupsCompleted(this, new openBackupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long[] getDocsNfId([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int cache, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool cacheSpecified) {
            object[] results = this.Invoke("getDocsNfId", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        cache,
                        cacheSpecified});
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void getDocsNfIdAsync(string token, long usrId, bool usrIdSpecified, int cache, bool cacheSpecified) {
            this.getDocsNfIdAsync(token, usrId, usrIdSpecified, cache, cacheSpecified, null);
        }
        
        /// <remarks/>
        public void getDocsNfIdAsync(string token, long usrId, bool usrIdSpecified, int cache, bool cacheSpecified, object userState) {
            if ((this.getDocsNfIdOperationCompleted == null)) {
                this.getDocsNfIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocsNfIdOperationCompleted);
            }
            this.InvokeAsync("getDocsNfId", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        cache,
                        cacheSpecified}, this.getDocsNfIdOperationCompleted, userState);
        }
        
        private void OngetDocsNfIdOperationCompleted(object arg) {
            if ((this.getDocsNfIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocsNfIdCompleted(this, new getDocsNfIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void deleteDocumentNf([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentNfIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("deleteDocumentNf", new object[] {
                        token,
                        documentNfId,
                        documentNfIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void deleteDocumentNfAsync(string token, long documentNfId, bool documentNfIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.deleteDocumentNfAsync(token, documentNfId, documentNfIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void deleteDocumentNfAsync(string token, long documentNfId, bool documentNfIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.deleteDocumentNfOperationCompleted == null)) {
                this.deleteDocumentNfOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteDocumentNfOperationCompleted);
            }
            this.InvokeAsync("deleteDocumentNf", new object[] {
                        token,
                        documentNfId,
                        documentNfIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.deleteDocumentNfOperationCompleted, userState);
        }
        
        private void OndeleteDocumentNfOperationCompleted(object arg) {
            if ((this.deleteDocumentNfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteDocumentNfCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.flexps.flexdoc.com.br/")]
    public partial class documentNfDto {
        
        private long backupsIdField;
        
        private bool backupsIdFieldSpecified;
        
        private long batchNfIdField;
        
        private bool batchNfIdFieldSpecified;
        
        private int batchNfTotalDocsField;
        
        private bool batchNfTotalDocsFieldSpecified;
        
        private string boxDesc1Field;
        
        private string boxDesc2Field;
        
        private string boxDesc3Field;
        
        private string boxGroupField;
        
        private long boxIdField;
        
        private bool boxIdFieldSpecified;
        
        private int boxNumField;
        
        private bool boxNumFieldSpecified;
        
        private int boxYearField;
        
        private bool boxYearFieldSpecified;
        
        private docKeyDto[] docKeyDtoListField;
        
        private string docKeysLabelField;
        
        private int documentNfCaptureSeqField;
        
        private bool documentNfCaptureSeqFieldSpecified;
        
        private System.DateTime documentNfCreatedField;
        
        private bool documentNfCreatedFieldSpecified;
        
        private int documentNfCryptoField;
        
        private bool documentNfCryptoFieldSpecified;
        
        private int documentNfFileSizeField;
        
        private bool documentNfFileSizeFieldSpecified;
        
        private string documentNfFileTypeField;
        
        private string documentNfHashField;
        
        private long documentNfIdField;
        
        private bool documentNfIdFieldSpecified;
        
        private int documentNfPagesField;
        
        private bool documentNfPagesFieldSpecified;
        
        private string documentNfReasonField;
        
        private int documentNfSecurityLevelField;
        
        private bool documentNfSecurityLevelFieldSpecified;
        
        private int documentNfStatusField;
        
        private bool documentNfStatusFieldSpecified;
        
        private long documentNfVirtualFolderField;
        
        private bool documentNfVirtualFolderFieldSpecified;
        
        private long siteIdField;
        
        private bool siteIdFieldSpecified;
        
        private string typeAliasField;
        
        private long typeIdField;
        
        private bool typeIdFieldSpecified;
        
        private string typeNameField;
        
        private int typeOperationField;
        
        private bool typeOperationFieldSpecified;
        
        private long typeParentField;
        
        private bool typeParentFieldSpecified;
        
        private long usrCaptIdField;
        
        private bool usrCaptIdFieldSpecified;
        
        private string usrCaptNameField;
        
        private long usrIndexIdField;
        
        private bool usrIndexIdFieldSpecified;
        
        private string usrIndexNameField;
        
        private string valueField;
        
        private long workflowIdField;
        
        private bool workflowIdFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long backupsId {
            get {
                return this.backupsIdField;
            }
            set {
                this.backupsIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool backupsIdSpecified {
            get {
                return this.backupsIdFieldSpecified;
            }
            set {
                this.backupsIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long batchNfId {
            get {
                return this.batchNfIdField;
            }
            set {
                this.batchNfIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool batchNfIdSpecified {
            get {
                return this.batchNfIdFieldSpecified;
            }
            set {
                this.batchNfIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int batchNfTotalDocs {
            get {
                return this.batchNfTotalDocsField;
            }
            set {
                this.batchNfTotalDocsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool batchNfTotalDocsSpecified {
            get {
                return this.batchNfTotalDocsFieldSpecified;
            }
            set {
                this.batchNfTotalDocsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string boxDesc1 {
            get {
                return this.boxDesc1Field;
            }
            set {
                this.boxDesc1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string boxDesc2 {
            get {
                return this.boxDesc2Field;
            }
            set {
                this.boxDesc2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string boxDesc3 {
            get {
                return this.boxDesc3Field;
            }
            set {
                this.boxDesc3Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string boxGroup {
            get {
                return this.boxGroupField;
            }
            set {
                this.boxGroupField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long boxId {
            get {
                return this.boxIdField;
            }
            set {
                this.boxIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool boxIdSpecified {
            get {
                return this.boxIdFieldSpecified;
            }
            set {
                this.boxIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int boxNum {
            get {
                return this.boxNumField;
            }
            set {
                this.boxNumField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool boxNumSpecified {
            get {
                return this.boxNumFieldSpecified;
            }
            set {
                this.boxNumFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int boxYear {
            get {
                return this.boxYearField;
            }
            set {
                this.boxYearField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool boxYearSpecified {
            get {
                return this.boxYearFieldSpecified;
            }
            set {
                this.boxYearFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("docKeyDtoList", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public docKeyDto[] docKeyDtoList {
            get {
                return this.docKeyDtoListField;
            }
            set {
                this.docKeyDtoListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string docKeysLabel {
            get {
                return this.docKeysLabelField;
            }
            set {
                this.docKeysLabelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentNfCaptureSeq {
            get {
                return this.documentNfCaptureSeqField;
            }
            set {
                this.documentNfCaptureSeqField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNfCaptureSeqSpecified {
            get {
                return this.documentNfCaptureSeqFieldSpecified;
            }
            set {
                this.documentNfCaptureSeqFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime documentNfCreated {
            get {
                return this.documentNfCreatedField;
            }
            set {
                this.documentNfCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNfCreatedSpecified {
            get {
                return this.documentNfCreatedFieldSpecified;
            }
            set {
                this.documentNfCreatedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentNfCrypto {
            get {
                return this.documentNfCryptoField;
            }
            set {
                this.documentNfCryptoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNfCryptoSpecified {
            get {
                return this.documentNfCryptoFieldSpecified;
            }
            set {
                this.documentNfCryptoFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentNfFileSize {
            get {
                return this.documentNfFileSizeField;
            }
            set {
                this.documentNfFileSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNfFileSizeSpecified {
            get {
                return this.documentNfFileSizeFieldSpecified;
            }
            set {
                this.documentNfFileSizeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentNfFileType {
            get {
                return this.documentNfFileTypeField;
            }
            set {
                this.documentNfFileTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentNfHash {
            get {
                return this.documentNfHashField;
            }
            set {
                this.documentNfHashField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long documentNfId {
            get {
                return this.documentNfIdField;
            }
            set {
                this.documentNfIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNfIdSpecified {
            get {
                return this.documentNfIdFieldSpecified;
            }
            set {
                this.documentNfIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentNfPages {
            get {
                return this.documentNfPagesField;
            }
            set {
                this.documentNfPagesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNfPagesSpecified {
            get {
                return this.documentNfPagesFieldSpecified;
            }
            set {
                this.documentNfPagesFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentNfReason {
            get {
                return this.documentNfReasonField;
            }
            set {
                this.documentNfReasonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentNfSecurityLevel {
            get {
                return this.documentNfSecurityLevelField;
            }
            set {
                this.documentNfSecurityLevelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNfSecurityLevelSpecified {
            get {
                return this.documentNfSecurityLevelFieldSpecified;
            }
            set {
                this.documentNfSecurityLevelFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentNfStatus {
            get {
                return this.documentNfStatusField;
            }
            set {
                this.documentNfStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNfStatusSpecified {
            get {
                return this.documentNfStatusFieldSpecified;
            }
            set {
                this.documentNfStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long documentNfVirtualFolder {
            get {
                return this.documentNfVirtualFolderField;
            }
            set {
                this.documentNfVirtualFolderField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNfVirtualFolderSpecified {
            get {
                return this.documentNfVirtualFolderFieldSpecified;
            }
            set {
                this.documentNfVirtualFolderFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long siteId {
            get {
                return this.siteIdField;
            }
            set {
                this.siteIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool siteIdSpecified {
            get {
                return this.siteIdFieldSpecified;
            }
            set {
                this.siteIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string typeAlias {
            get {
                return this.typeAliasField;
            }
            set {
                this.typeAliasField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long typeId {
            get {
                return this.typeIdField;
            }
            set {
                this.typeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeIdSpecified {
            get {
                return this.typeIdFieldSpecified;
            }
            set {
                this.typeIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string typeName {
            get {
                return this.typeNameField;
            }
            set {
                this.typeNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int typeOperation {
            get {
                return this.typeOperationField;
            }
            set {
                this.typeOperationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeOperationSpecified {
            get {
                return this.typeOperationFieldSpecified;
            }
            set {
                this.typeOperationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long typeParent {
            get {
                return this.typeParentField;
            }
            set {
                this.typeParentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeParentSpecified {
            get {
                return this.typeParentFieldSpecified;
            }
            set {
                this.typeParentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long usrCaptId {
            get {
                return this.usrCaptIdField;
            }
            set {
                this.usrCaptIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool usrCaptIdSpecified {
            get {
                return this.usrCaptIdFieldSpecified;
            }
            set {
                this.usrCaptIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string usrCaptName {
            get {
                return this.usrCaptNameField;
            }
            set {
                this.usrCaptNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long usrIndexId {
            get {
                return this.usrIndexIdField;
            }
            set {
                this.usrIndexIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool usrIndexIdSpecified {
            get {
                return this.usrIndexIdFieldSpecified;
            }
            set {
                this.usrIndexIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string usrIndexName {
            get {
                return this.usrIndexNameField;
            }
            set {
                this.usrIndexNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long workflowId {
            get {
                return this.workflowIdField;
            }
            set {
                this.workflowIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool workflowIdSpecified {
            get {
                return this.workflowIdFieldSpecified;
            }
            set {
                this.workflowIdFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.flexps.flexdoc.com.br/")]
    public partial class docKeyDto {
        
        private long batchNfIdField;
        
        private bool batchNfIdFieldSpecified;
        
        private long docKeyIdField;
        
        private bool docKeyIdFieldSpecified;
        
        private int docKeyOcrScoreField;
        
        private bool docKeyOcrScoreFieldSpecified;
        
        private string docKeyOcrTextField;
        
        private string docKeyValueField;
        
        private long documentNfIdField;
        
        private bool documentNfIdFieldSpecified;
        
        private long keyDefIdField;
        
        private bool keyDefIdFieldSpecified;
        
        private string keyDefNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long batchNfId {
            get {
                return this.batchNfIdField;
            }
            set {
                this.batchNfIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool batchNfIdSpecified {
            get {
                return this.batchNfIdFieldSpecified;
            }
            set {
                this.batchNfIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long docKeyId {
            get {
                return this.docKeyIdField;
            }
            set {
                this.docKeyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool docKeyIdSpecified {
            get {
                return this.docKeyIdFieldSpecified;
            }
            set {
                this.docKeyIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int docKeyOcrScore {
            get {
                return this.docKeyOcrScoreField;
            }
            set {
                this.docKeyOcrScoreField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool docKeyOcrScoreSpecified {
            get {
                return this.docKeyOcrScoreFieldSpecified;
            }
            set {
                this.docKeyOcrScoreFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string docKeyOcrText {
            get {
                return this.docKeyOcrTextField;
            }
            set {
                this.docKeyOcrTextField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string docKeyValue {
            get {
                return this.docKeyValueField;
            }
            set {
                this.docKeyValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long documentNfId {
            get {
                return this.documentNfIdField;
            }
            set {
                this.documentNfIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNfIdSpecified {
            get {
                return this.documentNfIdFieldSpecified;
            }
            set {
                this.documentNfIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long keyDefId {
            get {
                return this.keyDefIdField;
            }
            set {
                this.keyDefIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool keyDefIdSpecified {
            get {
                return this.keyDefIdFieldSpecified;
            }
            set {
                this.keyDefIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string keyDefName {
            get {
                return this.keyDefNameField;
            }
            set {
                this.keyDefNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.flexps.flexdoc.com.br/")]
    public partial class preDocKeyDto {
        
        private long keyDefIdField;
        
        private bool keyDefIdFieldSpecified;
        
        private string keyDefNameField;
        
        private long preDocKeyIdField;
        
        private bool preDocKeyIdFieldSpecified;
        
        private string preDocKeyValueField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long keyDefId {
            get {
                return this.keyDefIdField;
            }
            set {
                this.keyDefIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool keyDefIdSpecified {
            get {
                return this.keyDefIdFieldSpecified;
            }
            set {
                this.keyDefIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string keyDefName {
            get {
                return this.keyDefNameField;
            }
            set {
                this.keyDefNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long preDocKeyId {
            get {
                return this.preDocKeyIdField;
            }
            set {
                this.preDocKeyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool preDocKeyIdSpecified {
            get {
                return this.preDocKeyIdFieldSpecified;
            }
            set {
                this.preDocKeyIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string preDocKeyValue {
            get {
                return this.preDocKeyValueField;
            }
            set {
                this.preDocKeyValueField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void getListDocsForBkpCompletedEventHandler(object sender, getListDocsForBkpCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getListDocsForBkpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getListDocsForBkpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public documentNfDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((documentNfDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void getDocumentNfCompletedEventHandler(object sender, getDocumentNfCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDocumentNfCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDocumentNfCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public documentNfDto Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((documentNfDto)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void closeBackupsCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void getListDocsForBkpByTypeCompletedEventHandler(object sender, getListDocsForBkpByTypeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getListDocsForBkpByTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getListDocsForBkpByTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public documentNfDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((documentNfDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void insertDocumentNfCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void getListDocsForBkpByDateCompletedEventHandler(object sender, getListDocsForBkpByDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getListDocsForBkpByDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getListDocsForBkpByDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public documentNfDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((documentNfDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void insertPredocumentCompletedEventHandler(object sender, insertPredocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class insertPredocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal insertPredocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void getOpenBackupCompletedEventHandler(object sender, getOpenBackupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getOpenBackupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getOpenBackupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void getDocsNfByBatchNfCompletedEventHandler(object sender, getDocsNfByBatchNfCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDocsNfByBatchNfCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDocsNfByBatchNfCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public documentNfDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((documentNfDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void indexDocumentNfCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void setDocumentBackupedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void isCapaCompletedEventHandler(object sender, isCapaCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class isCapaCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal isCapaCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void updateFileInfoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void getPendingSignatureCompletedEventHandler(object sender, getPendingSignatureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPendingSignatureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPendingSignatureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public documentNfDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((documentNfDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void getDocKeyByDocNfIdCompletedEventHandler(object sender, getDocKeyByDocNfIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDocKeyByDocNfIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDocKeyByDocNfIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public docKeyDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((docKeyDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void getPreDocKeyByPreDocumentIdCompletedEventHandler(object sender, getPreDocKeyByPreDocumentIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPreDocKeyByPreDocumentIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPreDocKeyByPreDocumentIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public preDocKeyDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((preDocKeyDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void reBackupCompletedEventHandler(object sender, reBackupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class reBackupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal reBackupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void openBackupsCompletedEventHandler(object sender, openBackupsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class openBackupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal openBackupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void getDocsNfIdCompletedEventHandler(object sender, getDocsNfIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDocsNfIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDocsNfIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void deleteDocumentNfCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591
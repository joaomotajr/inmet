//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace FlexImage.WebService.CaptureNFWebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="CaptureNfServiceSoapBinding", Namespace="http://impl.service.flexps.flexdoc.com.br/")]
    public partial class CaptureNfService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getDocumentNfToRecaptureOperationCompleted;
        
        private System.Threading.SendOrPostCallback closeBatchNfOperationCompleted;
        
        private System.Threading.SendOrPostCallback insertDocumentNfOperationCompleted;
        
        private System.Threading.SendOrPostCallback setDocNfRecaptureOperationCompleted;
        
        private System.Threading.SendOrPostCallback openBatchNfOperationCompleted;
        
        private System.Threading.SendOrPostCallback setBatchNfTransmittedOperationCompleted;
        
        private System.Threading.SendOrPostCallback getBatchNfToRecaptureOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public CaptureNfService() {
            this.Url = global::FlexImage.WebService.Properties.Settings.Default.FlexImage_WSCaptureNF_CaptureNFWebReference_CaptureNfService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getDocumentNfToRecaptureCompletedEventHandler getDocumentNfToRecaptureCompleted;
        
        /// <remarks/>
        public event closeBatchNfCompletedEventHandler closeBatchNfCompleted;
        
        /// <remarks/>
        public event insertDocumentNfCompletedEventHandler insertDocumentNfCompleted;
        
        /// <remarks/>
        public event setDocNfRecaptureCompletedEventHandler setDocNfRecaptureCompleted;
        
        /// <remarks/>
        public event openBatchNfCompletedEventHandler openBatchNfCompleted;
        
        /// <remarks/>
        public event setBatchNfTransmittedCompletedEventHandler setBatchNfTransmittedCompleted;
        
        /// <remarks/>
        public event getBatchNfToRecaptureCompletedEventHandler getBatchNfToRecaptureCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public documentNfDto[] getDocumentNfToRecapture([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfIdSpecified) {
            object[] results = this.Invoke("getDocumentNfToRecapture", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        batchNfId,
                        batchNfIdSpecified});
            return ((documentNfDto[])(results[0]));
        }
        
        /// <remarks/>
        public void getDocumentNfToRecaptureAsync(string token, long usrId, bool usrIdSpecified, long batchNfId, bool batchNfIdSpecified) {
            this.getDocumentNfToRecaptureAsync(token, usrId, usrIdSpecified, batchNfId, batchNfIdSpecified, null);
        }
        
        /// <remarks/>
        public void getDocumentNfToRecaptureAsync(string token, long usrId, bool usrIdSpecified, long batchNfId, bool batchNfIdSpecified, object userState) {
            if ((this.getDocumentNfToRecaptureOperationCompleted == null)) {
                this.getDocumentNfToRecaptureOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocumentNfToRecaptureOperationCompleted);
            }
            this.InvokeAsync("getDocumentNfToRecapture", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        batchNfId,
                        batchNfIdSpecified}, this.getDocumentNfToRecaptureOperationCompleted, userState);
        }
        
        private void OngetDocumentNfToRecaptureOperationCompleted(object arg) {
            if ((this.getDocumentNfToRecaptureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocumentNfToRecaptureCompleted(this, new getDocumentNfToRecaptureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void closeBatchNf([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long siteId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool siteIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute("docsNfCanceled", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int[] docsNfCanceled) {
            this.Invoke("closeBatchNf", new object[] {
                        token,
                        batchNfId,
                        batchNfIdSpecified,
                        stationId,
                        stationIdSpecified,
                        siteId,
                        siteIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        docsNfCanceled});
        }
        
        /// <remarks/>
        public void closeBatchNfAsync(string token, long batchNfId, bool batchNfIdSpecified, long stationId, bool stationIdSpecified, long siteId, bool siteIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, int[] docsNfCanceled) {
            this.closeBatchNfAsync(token, batchNfId, batchNfIdSpecified, stationId, stationIdSpecified, siteId, siteIdSpecified, workflowId, workflowIdSpecified, usrId, usrIdSpecified, docsNfCanceled, null);
        }
        
        /// <remarks/>
        public void closeBatchNfAsync(string token, long batchNfId, bool batchNfIdSpecified, long stationId, bool stationIdSpecified, long siteId, bool siteIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, int[] docsNfCanceled, object userState) {
            if ((this.closeBatchNfOperationCompleted == null)) {
                this.closeBatchNfOperationCompleted = new System.Threading.SendOrPostCallback(this.OncloseBatchNfOperationCompleted);
            }
            this.InvokeAsync("closeBatchNf", new object[] {
                        token,
                        batchNfId,
                        batchNfIdSpecified,
                        stationId,
                        stationIdSpecified,
                        siteId,
                        siteIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        docsNfCanceled}, this.closeBatchNfOperationCompleted, userState);
        }
        
        private void OncloseBatchNfOperationCompleted(object arg) {
            if ((this.closeBatchNfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.closeBatchNfCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void insertDocumentNf(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long docNfId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool docNfIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long typeId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typeIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long virtualFolderId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool virtualFolderIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchNfId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int origin, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool originSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int fileSize, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool fileSizeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int captSeq, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool captSeqSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string fileType, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int totalPages, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool totalPagesSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string originalFileName, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string hash) {
            this.Invoke("insertDocumentNf", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified,
                        docNfId,
                        docNfIdSpecified,
                        typeId,
                        typeIdSpecified,
                        virtualFolderId,
                        virtualFolderIdSpecified,
                        batchNfId,
                        batchNfIdSpecified,
                        origin,
                        originSpecified,
                        fileSize,
                        fileSizeSpecified,
                        captSeq,
                        captSeqSpecified,
                        fileType,
                        totalPages,
                        totalPagesSpecified,
                        originalFileName,
                        hash});
        }
        
        /// <remarks/>
        public void insertDocumentNfAsync(
                    string token, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified, 
                    long docNfId, 
                    bool docNfIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    long virtualFolderId, 
                    bool virtualFolderIdSpecified, 
                    long batchNfId, 
                    bool batchNfIdSpecified, 
                    int origin, 
                    bool originSpecified, 
                    int fileSize, 
                    bool fileSizeSpecified, 
                    int captSeq, 
                    bool captSeqSpecified, 
                    string fileType, 
                    int totalPages, 
                    bool totalPagesSpecified, 
                    string originalFileName, 
                    string hash) {
            this.insertDocumentNfAsync(token, usrId, usrIdSpecified, stationId, stationIdSpecified, docNfId, docNfIdSpecified, typeId, typeIdSpecified, virtualFolderId, virtualFolderIdSpecified, batchNfId, batchNfIdSpecified, origin, originSpecified, fileSize, fileSizeSpecified, captSeq, captSeqSpecified, fileType, totalPages, totalPagesSpecified, originalFileName, hash, null);
        }
        
        /// <remarks/>
        public void insertDocumentNfAsync(
                    string token, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified, 
                    long docNfId, 
                    bool docNfIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    long virtualFolderId, 
                    bool virtualFolderIdSpecified, 
                    long batchNfId, 
                    bool batchNfIdSpecified, 
                    int origin, 
                    bool originSpecified, 
                    int fileSize, 
                    bool fileSizeSpecified, 
                    int captSeq, 
                    bool captSeqSpecified, 
                    string fileType, 
                    int totalPages, 
                    bool totalPagesSpecified, 
                    string originalFileName, 
                    string hash, 
                    object userState) {
            if ((this.insertDocumentNfOperationCompleted == null)) {
                this.insertDocumentNfOperationCompleted = new System.Threading.SendOrPostCallback(this.OninsertDocumentNfOperationCompleted);
            }
            this.InvokeAsync("insertDocumentNf", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified,
                        docNfId,
                        docNfIdSpecified,
                        typeId,
                        typeIdSpecified,
                        virtualFolderId,
                        virtualFolderIdSpecified,
                        batchNfId,
                        batchNfIdSpecified,
                        origin,
                        originSpecified,
                        fileSize,
                        fileSizeSpecified,
                        captSeq,
                        captSeqSpecified,
                        fileType,
                        totalPages,
                        totalPagesSpecified,
                        originalFileName,
                        hash}, this.insertDocumentNfOperationCompleted, userState);
        }
        
        private void OninsertDocumentNfOperationCompleted(object arg) {
            if ((this.insertDocumentNfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.insertDocumentNfCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setDocNfRecapture([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentNfIdOld, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentNfIdOldSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentNfIdNew, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentNfIdNewSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified) {
            this.Invoke("setDocNfRecapture", new object[] {
                        token,
                        documentNfIdOld,
                        documentNfIdOldSpecified,
                        documentNfIdNew,
                        documentNfIdNewSpecified,
                        batchNfId,
                        batchNfIdSpecified,
                        stationId,
                        stationIdSpecified,
                        usrId,
                        usrIdSpecified});
        }
        
        /// <remarks/>
        public void setDocNfRecaptureAsync(string token, long documentNfIdOld, bool documentNfIdOldSpecified, long documentNfIdNew, bool documentNfIdNewSpecified, long batchNfId, bool batchNfIdSpecified, long stationId, bool stationIdSpecified, long usrId, bool usrIdSpecified) {
            this.setDocNfRecaptureAsync(token, documentNfIdOld, documentNfIdOldSpecified, documentNfIdNew, documentNfIdNewSpecified, batchNfId, batchNfIdSpecified, stationId, stationIdSpecified, usrId, usrIdSpecified, null);
        }
        
        /// <remarks/>
        public void setDocNfRecaptureAsync(string token, long documentNfIdOld, bool documentNfIdOldSpecified, long documentNfIdNew, bool documentNfIdNewSpecified, long batchNfId, bool batchNfIdSpecified, long stationId, bool stationIdSpecified, long usrId, bool usrIdSpecified, object userState) {
            if ((this.setDocNfRecaptureOperationCompleted == null)) {
                this.setDocNfRecaptureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetDocNfRecaptureOperationCompleted);
            }
            this.InvokeAsync("setDocNfRecapture", new object[] {
                        token,
                        documentNfIdOld,
                        documentNfIdOldSpecified,
                        documentNfIdNew,
                        documentNfIdNewSpecified,
                        batchNfId,
                        batchNfIdSpecified,
                        stationId,
                        stationIdSpecified,
                        usrId,
                        usrIdSpecified}, this.setDocNfRecaptureOperationCompleted, userState);
        }
        
        private void OnsetDocNfRecaptureOperationCompleted(object arg) {
            if ((this.setDocNfRecaptureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setDocNfRecaptureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long openBatchNf([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long siteId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool siteIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified) {
            object[] results = this.Invoke("openBatchNf", new object[] {
                        token,
                        workflowId,
                        workflowIdSpecified,
                        stationId,
                        stationIdSpecified,
                        siteId,
                        siteIdSpecified,
                        usrId,
                        usrIdSpecified});
            return ((long)(results[0]));
        }
        
        /// <remarks/>
        public void openBatchNfAsync(string token, long workflowId, bool workflowIdSpecified, long stationId, bool stationIdSpecified, long siteId, bool siteIdSpecified, long usrId, bool usrIdSpecified) {
            this.openBatchNfAsync(token, workflowId, workflowIdSpecified, stationId, stationIdSpecified, siteId, siteIdSpecified, usrId, usrIdSpecified, null);
        }
        
        /// <remarks/>
        public void openBatchNfAsync(string token, long workflowId, bool workflowIdSpecified, long stationId, bool stationIdSpecified, long siteId, bool siteIdSpecified, long usrId, bool usrIdSpecified, object userState) {
            if ((this.openBatchNfOperationCompleted == null)) {
                this.openBatchNfOperationCompleted = new System.Threading.SendOrPostCallback(this.OnopenBatchNfOperationCompleted);
            }
            this.InvokeAsync("openBatchNf", new object[] {
                        token,
                        workflowId,
                        workflowIdSpecified,
                        stationId,
                        stationIdSpecified,
                        siteId,
                        siteIdSpecified,
                        usrId,
                        usrIdSpecified}, this.openBatchNfOperationCompleted, userState);
        }
        
        private void OnopenBatchNfOperationCompleted(object arg) {
            if ((this.openBatchNfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.openBatchNfCompleted(this, new openBatchNfCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setBatchNfTransmitted([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified) {
            this.Invoke("setBatchNfTransmitted", new object[] {
                        token,
                        batchNfId,
                        batchNfIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        stationId,
                        stationIdSpecified,
                        usrId,
                        usrIdSpecified});
        }
        
        /// <remarks/>
        public void setBatchNfTransmittedAsync(string token, long batchNfId, bool batchNfIdSpecified, long workflowId, bool workflowIdSpecified, long stationId, bool stationIdSpecified, long usrId, bool usrIdSpecified) {
            this.setBatchNfTransmittedAsync(token, batchNfId, batchNfIdSpecified, workflowId, workflowIdSpecified, stationId, stationIdSpecified, usrId, usrIdSpecified, null);
        }
        
        /// <remarks/>
        public void setBatchNfTransmittedAsync(string token, long batchNfId, bool batchNfIdSpecified, long workflowId, bool workflowIdSpecified, long stationId, bool stationIdSpecified, long usrId, bool usrIdSpecified, object userState) {
            if ((this.setBatchNfTransmittedOperationCompleted == null)) {
                this.setBatchNfTransmittedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetBatchNfTransmittedOperationCompleted);
            }
            this.InvokeAsync("setBatchNfTransmitted", new object[] {
                        token,
                        batchNfId,
                        batchNfIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        stationId,
                        stationIdSpecified,
                        usrId,
                        usrIdSpecified}, this.setBatchNfTransmittedOperationCompleted, userState);
        }
        
        private void OnsetBatchNfTransmittedOperationCompleted(object arg) {
            if ((this.setBatchNfTransmittedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setBatchNfTransmittedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long[] getBatchNfToRecapture([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            object[] results = this.Invoke("getBatchNfToRecapture", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void getBatchNfToRecaptureAsync(string token, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.getBatchNfToRecaptureAsync(token, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void getBatchNfToRecaptureAsync(string token, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.getBatchNfToRecaptureOperationCompleted == null)) {
                this.getBatchNfToRecaptureOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetBatchNfToRecaptureOperationCompleted);
            }
            this.InvokeAsync("getBatchNfToRecapture", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.getBatchNfToRecaptureOperationCompleted, userState);
        }
        
        private void OngetBatchNfToRecaptureOperationCompleted(object arg) {
            if ((this.getBatchNfToRecaptureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getBatchNfToRecaptureCompleted(this, new getBatchNfToRecaptureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.flexps.flexdoc.com.br/")]
    public partial class documentNfDto {
        
        private long backupsIdField;
        
        private bool backupsIdFieldSpecified;
        
        private long batchNfIdField;
        
        private bool batchNfIdFieldSpecified;
        
        private int batchNfTotalDocsField;
        
        private bool batchNfTotalDocsFieldSpecified;
        
        private string boxDesc1Field;
        
        private string boxDesc2Field;
        
        private string boxDesc3Field;
        
        private string boxGroupField;
        
        private long boxIdField;
        
        private bool boxIdFieldSpecified;
        
        private int boxNumField;
        
        private bool boxNumFieldSpecified;
        
        private int boxYearField;
        
        private bool boxYearFieldSpecified;
        
        private docKeyDto[] docKeyDtoListField;
        
        private string docKeysLabelField;
        
        private int documentNfCaptureSeqField;
        
        private bool documentNfCaptureSeqFieldSpecified;
        
        private System.DateTime documentNfCreatedField;
        
        private bool documentNfCreatedFieldSpecified;
        
        private int documentNfCryptoField;
        
        private bool documentNfCryptoFieldSpecified;
        
        private int documentNfFileSizeField;
        
        private bool documentNfFileSizeFieldSpecified;
        
        private string documentNfFileTypeField;
        
        private string documentNfHashField;
        
        private long documentNfIdField;
        
        private bool documentNfIdFieldSpecified;
        
        private int documentNfPagesField;
        
        private bool documentNfPagesFieldSpecified;
        
        private string documentNfReasonField;
        
        private int documentNfSecurityLevelField;
        
        private bool documentNfSecurityLevelFieldSpecified;
        
        private int documentNfStatusField;
        
        private bool documentNfStatusFieldSpecified;
        
        private long documentNfVirtualFolderField;
        
        private bool documentNfVirtualFolderFieldSpecified;
        
        private long siteIdField;
        
        private bool siteIdFieldSpecified;
        
        private string typeAliasField;
        
        private long typeIdField;
        
        private bool typeIdFieldSpecified;
        
        private string typeNameField;
        
        private int typeOperationField;
        
        private bool typeOperationFieldSpecified;
        
        private long typeParentField;
        
        private bool typeParentFieldSpecified;
        
        private long usrCaptIdField;
        
        private bool usrCaptIdFieldSpecified;
        
        private string usrCaptNameField;
        
        private long usrIndexIdField;
        
        private bool usrIndexIdFieldSpecified;
        
        private string usrIndexNameField;
        
        private string valueField;
        
        private long workflowIdField;
        
        private bool workflowIdFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long backupsId {
            get {
                return this.backupsIdField;
            }
            set {
                this.backupsIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool backupsIdSpecified {
            get {
                return this.backupsIdFieldSpecified;
            }
            set {
                this.backupsIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long batchNfId {
            get {
                return this.batchNfIdField;
            }
            set {
                this.batchNfIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool batchNfIdSpecified {
            get {
                return this.batchNfIdFieldSpecified;
            }
            set {
                this.batchNfIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int batchNfTotalDocs {
            get {
                return this.batchNfTotalDocsField;
            }
            set {
                this.batchNfTotalDocsField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool batchNfTotalDocsSpecified {
            get {
                return this.batchNfTotalDocsFieldSpecified;
            }
            set {
                this.batchNfTotalDocsFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string boxDesc1 {
            get {
                return this.boxDesc1Field;
            }
            set {
                this.boxDesc1Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string boxDesc2 {
            get {
                return this.boxDesc2Field;
            }
            set {
                this.boxDesc2Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string boxDesc3 {
            get {
                return this.boxDesc3Field;
            }
            set {
                this.boxDesc3Field = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string boxGroup {
            get {
                return this.boxGroupField;
            }
            set {
                this.boxGroupField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long boxId {
            get {
                return this.boxIdField;
            }
            set {
                this.boxIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool boxIdSpecified {
            get {
                return this.boxIdFieldSpecified;
            }
            set {
                this.boxIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int boxNum {
            get {
                return this.boxNumField;
            }
            set {
                this.boxNumField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool boxNumSpecified {
            get {
                return this.boxNumFieldSpecified;
            }
            set {
                this.boxNumFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int boxYear {
            get {
                return this.boxYearField;
            }
            set {
                this.boxYearField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool boxYearSpecified {
            get {
                return this.boxYearFieldSpecified;
            }
            set {
                this.boxYearFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("docKeyDtoList", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public docKeyDto[] docKeyDtoList {
            get {
                return this.docKeyDtoListField;
            }
            set {
                this.docKeyDtoListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string docKeysLabel {
            get {
                return this.docKeysLabelField;
            }
            set {
                this.docKeysLabelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentNfCaptureSeq {
            get {
                return this.documentNfCaptureSeqField;
            }
            set {
                this.documentNfCaptureSeqField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNfCaptureSeqSpecified {
            get {
                return this.documentNfCaptureSeqFieldSpecified;
            }
            set {
                this.documentNfCaptureSeqFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime documentNfCreated {
            get {
                return this.documentNfCreatedField;
            }
            set {
                this.documentNfCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNfCreatedSpecified {
            get {
                return this.documentNfCreatedFieldSpecified;
            }
            set {
                this.documentNfCreatedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentNfCrypto {
            get {
                return this.documentNfCryptoField;
            }
            set {
                this.documentNfCryptoField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNfCryptoSpecified {
            get {
                return this.documentNfCryptoFieldSpecified;
            }
            set {
                this.documentNfCryptoFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentNfFileSize {
            get {
                return this.documentNfFileSizeField;
            }
            set {
                this.documentNfFileSizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNfFileSizeSpecified {
            get {
                return this.documentNfFileSizeFieldSpecified;
            }
            set {
                this.documentNfFileSizeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentNfFileType {
            get {
                return this.documentNfFileTypeField;
            }
            set {
                this.documentNfFileTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentNfHash {
            get {
                return this.documentNfHashField;
            }
            set {
                this.documentNfHashField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long documentNfId {
            get {
                return this.documentNfIdField;
            }
            set {
                this.documentNfIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNfIdSpecified {
            get {
                return this.documentNfIdFieldSpecified;
            }
            set {
                this.documentNfIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentNfPages {
            get {
                return this.documentNfPagesField;
            }
            set {
                this.documentNfPagesField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNfPagesSpecified {
            get {
                return this.documentNfPagesFieldSpecified;
            }
            set {
                this.documentNfPagesFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentNfReason {
            get {
                return this.documentNfReasonField;
            }
            set {
                this.documentNfReasonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentNfSecurityLevel {
            get {
                return this.documentNfSecurityLevelField;
            }
            set {
                this.documentNfSecurityLevelField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNfSecurityLevelSpecified {
            get {
                return this.documentNfSecurityLevelFieldSpecified;
            }
            set {
                this.documentNfSecurityLevelFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentNfStatus {
            get {
                return this.documentNfStatusField;
            }
            set {
                this.documentNfStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNfStatusSpecified {
            get {
                return this.documentNfStatusFieldSpecified;
            }
            set {
                this.documentNfStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long documentNfVirtualFolder {
            get {
                return this.documentNfVirtualFolderField;
            }
            set {
                this.documentNfVirtualFolderField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNfVirtualFolderSpecified {
            get {
                return this.documentNfVirtualFolderFieldSpecified;
            }
            set {
                this.documentNfVirtualFolderFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long siteId {
            get {
                return this.siteIdField;
            }
            set {
                this.siteIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool siteIdSpecified {
            get {
                return this.siteIdFieldSpecified;
            }
            set {
                this.siteIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string typeAlias {
            get {
                return this.typeAliasField;
            }
            set {
                this.typeAliasField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long typeId {
            get {
                return this.typeIdField;
            }
            set {
                this.typeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeIdSpecified {
            get {
                return this.typeIdFieldSpecified;
            }
            set {
                this.typeIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string typeName {
            get {
                return this.typeNameField;
            }
            set {
                this.typeNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int typeOperation {
            get {
                return this.typeOperationField;
            }
            set {
                this.typeOperationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeOperationSpecified {
            get {
                return this.typeOperationFieldSpecified;
            }
            set {
                this.typeOperationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long typeParent {
            get {
                return this.typeParentField;
            }
            set {
                this.typeParentField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeParentSpecified {
            get {
                return this.typeParentFieldSpecified;
            }
            set {
                this.typeParentFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long usrCaptId {
            get {
                return this.usrCaptIdField;
            }
            set {
                this.usrCaptIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool usrCaptIdSpecified {
            get {
                return this.usrCaptIdFieldSpecified;
            }
            set {
                this.usrCaptIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string usrCaptName {
            get {
                return this.usrCaptNameField;
            }
            set {
                this.usrCaptNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long usrIndexId {
            get {
                return this.usrIndexIdField;
            }
            set {
                this.usrIndexIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool usrIndexIdSpecified {
            get {
                return this.usrIndexIdFieldSpecified;
            }
            set {
                this.usrIndexIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string usrIndexName {
            get {
                return this.usrIndexNameField;
            }
            set {
                this.usrIndexNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string value {
            get {
                return this.valueField;
            }
            set {
                this.valueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long workflowId {
            get {
                return this.workflowIdField;
            }
            set {
                this.workflowIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool workflowIdSpecified {
            get {
                return this.workflowIdFieldSpecified;
            }
            set {
                this.workflowIdFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.flexps.flexdoc.com.br/")]
    public partial class docKeyDto {
        
        private long docKeyIdField;
        
        private bool docKeyIdFieldSpecified;
        
        private int docKeyOcrScoreField;
        
        private bool docKeyOcrScoreFieldSpecified;
        
        private string docKeyOcrTextField;
        
        private string docKeyValueField;
        
        private long documentNfIdField;
        
        private bool documentNfIdFieldSpecified;
        
        private long keyDefIdField;
        
        private bool keyDefIdFieldSpecified;
        
        private string keyDefNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long docKeyId {
            get {
                return this.docKeyIdField;
            }
            set {
                this.docKeyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool docKeyIdSpecified {
            get {
                return this.docKeyIdFieldSpecified;
            }
            set {
                this.docKeyIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int docKeyOcrScore {
            get {
                return this.docKeyOcrScoreField;
            }
            set {
                this.docKeyOcrScoreField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool docKeyOcrScoreSpecified {
            get {
                return this.docKeyOcrScoreFieldSpecified;
            }
            set {
                this.docKeyOcrScoreFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string docKeyOcrText {
            get {
                return this.docKeyOcrTextField;
            }
            set {
                this.docKeyOcrTextField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string docKeyValue {
            get {
                return this.docKeyValueField;
            }
            set {
                this.docKeyValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long documentNfId {
            get {
                return this.documentNfIdField;
            }
            set {
                this.documentNfIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNfIdSpecified {
            get {
                return this.documentNfIdFieldSpecified;
            }
            set {
                this.documentNfIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long keyDefId {
            get {
                return this.keyDefIdField;
            }
            set {
                this.keyDefIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool keyDefIdSpecified {
            get {
                return this.keyDefIdFieldSpecified;
            }
            set {
                this.keyDefIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string keyDefName {
            get {
                return this.keyDefNameField;
            }
            set {
                this.keyDefNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void getDocumentNfToRecaptureCompletedEventHandler(object sender, getDocumentNfToRecaptureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDocumentNfToRecaptureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDocumentNfToRecaptureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public documentNfDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((documentNfDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void closeBatchNfCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void insertDocumentNfCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void setDocNfRecaptureCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void openBatchNfCompletedEventHandler(object sender, openBatchNfCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class openBatchNfCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal openBatchNfCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void setBatchNfTransmittedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void getBatchNfToRecaptureCompletedEventHandler(object sender, getBatchNfToRecaptureCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getBatchNfToRecaptureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getBatchNfToRecaptureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591
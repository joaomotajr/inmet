//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace FlexImage.WebService.RepositoryWebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="RepositoryServiceSoapBinding", Namespace="http://impl.service.flexps.flexdoc.com.br/")]
    public partial class RepositoryService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback getFileGenericOperationCompleted;
        
        private System.Threading.SendOrPostCallback getFileWithExtensionOperationCompleted;
        
        private System.Threading.SendOrPostCallback uploadGenericOperationCompleted;
        
        private System.Threading.SendOrPostCallback uploadOperationCompleted;
        
        private System.Threading.SendOrPostCallback dirListOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteGenericOperationCompleted;
        
        private System.Threading.SendOrPostCallback recoverInfoOperationCompleted;
        
        private System.Threading.SendOrPostCallback deleteOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPdfPagesOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public RepositoryService() {
            this.Url = global::FlexImage.WebService.Properties.Settings.Default.FlexImage_WSRepository_RepositoryWebReference_RepositoryService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event getFileGenericCompletedEventHandler getFileGenericCompleted;
        
        /// <remarks/>
        public event getFileWithExtensionCompletedEventHandler getFileWithExtensionCompleted;
        
        /// <remarks/>
        public event uploadGenericCompletedEventHandler uploadGenericCompleted;
        
        /// <remarks/>
        public event uploadCompletedEventHandler uploadCompleted;
        
        /// <remarks/>
        public event dirListCompletedEventHandler dirListCompleted;
        
        /// <remarks/>
        public event deleteGenericCompletedEventHandler deleteGenericCompleted;
        
        /// <remarks/>
        public event recoverInfoCompletedEventHandler recoverInfoCompleted;
        
        /// <remarks/>
        public event deleteCompletedEventHandler deleteCompleted;
        
        /// <remarks/>
        public event getPdfPagesCompletedEventHandler getPdfPagesCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public fileDto getFileGeneric([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string path, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string fileName) {
            object[] results = this.Invoke("getFileGeneric", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        path,
                        fileName});
            return ((fileDto)(results[0]));
        }
        
        /// <remarks/>
        public void getFileGenericAsync(string token, long usrId, bool usrIdSpecified, string path, string fileName) {
            this.getFileGenericAsync(token, usrId, usrIdSpecified, path, fileName, null);
        }
        
        /// <remarks/>
        public void getFileGenericAsync(string token, long usrId, bool usrIdSpecified, string path, string fileName, object userState) {
            if ((this.getFileGenericOperationCompleted == null)) {
                this.getFileGenericOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFileGenericOperationCompleted);
            }
            this.InvokeAsync("getFileGeneric", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        path,
                        fileName}, this.getFileGenericOperationCompleted, userState);
        }
        
        private void OngetFileGenericOperationCompleted(object arg) {
            if ((this.getFileGenericCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFileGenericCompleted(this, new getFileGenericCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public fileDto getFileWithExtension([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool isBack, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string extension) {
            object[] results = this.Invoke("getFileWithExtension", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentId,
                        documentIdSpecified,
                        isBack,
                        extension});
            return ((fileDto)(results[0]));
        }
        
        /// <remarks/>
        public void getFileWithExtensionAsync(string token, long usrId, bool usrIdSpecified, long documentId, bool documentIdSpecified, bool isBack, string extension) {
            this.getFileWithExtensionAsync(token, usrId, usrIdSpecified, documentId, documentIdSpecified, isBack, extension, null);
        }
        
        /// <remarks/>
        public void getFileWithExtensionAsync(string token, long usrId, bool usrIdSpecified, long documentId, bool documentIdSpecified, bool isBack, string extension, object userState) {
            if ((this.getFileWithExtensionOperationCompleted == null)) {
                this.getFileWithExtensionOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetFileWithExtensionOperationCompleted);
            }
            this.InvokeAsync("getFileWithExtension", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentId,
                        documentIdSpecified,
                        isBack,
                        extension}, this.getFileWithExtensionOperationCompleted, userState);
        }
        
        private void OngetFileWithExtensionOperationCompleted(object arg) {
            if ((this.getFileWithExtensionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getFileWithExtensionCompleted(this, new getFileWithExtensionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool uploadGeneric([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")] byte[] file, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string path, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string filename) {
            object[] results = this.Invoke("uploadGeneric", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        file,
                        path,
                        filename});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void uploadGenericAsync(string token, long usrId, bool usrIdSpecified, byte[] file, string path, string filename) {
            this.uploadGenericAsync(token, usrId, usrIdSpecified, file, path, filename, null);
        }
        
        /// <remarks/>
        public void uploadGenericAsync(string token, long usrId, bool usrIdSpecified, byte[] file, string path, string filename, object userState) {
            if ((this.uploadGenericOperationCompleted == null)) {
                this.uploadGenericOperationCompleted = new System.Threading.SendOrPostCallback(this.OnuploadGenericOperationCompleted);
            }
            this.InvokeAsync("uploadGeneric", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        file,
                        path,
                        filename}, this.uploadGenericOperationCompleted, userState);
        }
        
        private void OnuploadGenericOperationCompleted(object arg) {
            if ((this.uploadGenericCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.uploadGenericCompleted(this, new uploadGenericCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool upload([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")] byte[] file, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool isBack, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string fileType, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int fileSize, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool fileSizeSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string hash, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int part, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool partSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int totalParts, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool totalPartsSpecified) {
            object[] results = this.Invoke("upload", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        file,
                        documentId,
                        documentIdSpecified,
                        isBack,
                        fileType,
                        fileSize,
                        fileSizeSpecified,
                        hash,
                        part,
                        partSpecified,
                        totalParts,
                        totalPartsSpecified});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void uploadAsync(string token, long usrId, bool usrIdSpecified, byte[] file, long documentId, bool documentIdSpecified, bool isBack, string fileType, int fileSize, bool fileSizeSpecified, string hash, int part, bool partSpecified, int totalParts, bool totalPartsSpecified) {
            this.uploadAsync(token, usrId, usrIdSpecified, file, documentId, documentIdSpecified, isBack, fileType, fileSize, fileSizeSpecified, hash, part, partSpecified, totalParts, totalPartsSpecified, null);
        }
        
        /// <remarks/>
        public void uploadAsync(
                    string token, 
                    long usrId, 
                    bool usrIdSpecified, 
                    byte[] file, 
                    long documentId, 
                    bool documentIdSpecified, 
                    bool isBack, 
                    string fileType, 
                    int fileSize, 
                    bool fileSizeSpecified, 
                    string hash, 
                    int part, 
                    bool partSpecified, 
                    int totalParts, 
                    bool totalPartsSpecified, 
                    object userState) {
            if ((this.uploadOperationCompleted == null)) {
                this.uploadOperationCompleted = new System.Threading.SendOrPostCallback(this.OnuploadOperationCompleted);
            }
            this.InvokeAsync("upload", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        file,
                        documentId,
                        documentIdSpecified,
                        isBack,
                        fileType,
                        fileSize,
                        fileSizeSpecified,
                        hash,
                        part,
                        partSpecified,
                        totalParts,
                        totalPartsSpecified}, this.uploadOperationCompleted, userState);
        }
        
        private void OnuploadOperationCompleted(object arg) {
            if ((this.uploadCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.uploadCompleted(this, new uploadCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string[] dirList([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string path) {
            object[] results = this.Invoke("dirList", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        path});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void dirListAsync(string token, long usrId, bool usrIdSpecified, string path) {
            this.dirListAsync(token, usrId, usrIdSpecified, path, null);
        }
        
        /// <remarks/>
        public void dirListAsync(string token, long usrId, bool usrIdSpecified, string path, object userState) {
            if ((this.dirListOperationCompleted == null)) {
                this.dirListOperationCompleted = new System.Threading.SendOrPostCallback(this.OndirListOperationCompleted);
            }
            this.InvokeAsync("dirList", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        path}, this.dirListOperationCompleted, userState);
        }
        
        private void OndirListOperationCompleted(object arg) {
            if ((this.dirListCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.dirListCompleted(this, new dirListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool deleteGeneric([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string path, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string fileName) {
            object[] results = this.Invoke("deleteGeneric", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        path,
                        fileName});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void deleteGenericAsync(string token, long usrId, bool usrIdSpecified, string path, string fileName) {
            this.deleteGenericAsync(token, usrId, usrIdSpecified, path, fileName, null);
        }
        
        /// <remarks/>
        public void deleteGenericAsync(string token, long usrId, bool usrIdSpecified, string path, string fileName, object userState) {
            if ((this.deleteGenericOperationCompleted == null)) {
                this.deleteGenericOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteGenericOperationCompleted);
            }
            this.InvokeAsync("deleteGeneric", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        path,
                        fileName}, this.deleteGenericOperationCompleted, userState);
        }
        
        private void OndeleteGenericOperationCompleted(object arg) {
            if ((this.deleteGenericCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteGenericCompleted(this, new deleteGenericCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void recoverInfo([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long length, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool lengthSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string hashFile, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] out int @return, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] out bool returnSpecified) {
            object[] results = this.Invoke("recoverInfo", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        length,
                        lengthSpecified,
                        hashFile});
            @return = ((int)(results[0]));
            returnSpecified = ((bool)(results[1]));
        }
        
        /// <remarks/>
        public void recoverInfoAsync(string token, long usrId, bool usrIdSpecified, long length, bool lengthSpecified, string hashFile) {
            this.recoverInfoAsync(token, usrId, usrIdSpecified, length, lengthSpecified, hashFile, null);
        }
        
        /// <remarks/>
        public void recoverInfoAsync(string token, long usrId, bool usrIdSpecified, long length, bool lengthSpecified, string hashFile, object userState) {
            if ((this.recoverInfoOperationCompleted == null)) {
                this.recoverInfoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrecoverInfoOperationCompleted);
            }
            this.InvokeAsync("recoverInfo", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        length,
                        lengthSpecified,
                        hashFile}, this.recoverInfoOperationCompleted, userState);
        }
        
        private void OnrecoverInfoOperationCompleted(object arg) {
            if ((this.recoverInfoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.recoverInfoCompleted(this, new recoverInfoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool delete([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] bool isBack, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string extension) {
            object[] results = this.Invoke("delete", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentId,
                        documentIdSpecified,
                        isBack,
                        extension});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void deleteAsync(string token, long usrId, bool usrIdSpecified, long documentId, bool documentIdSpecified, bool isBack, string extension) {
            this.deleteAsync(token, usrId, usrIdSpecified, documentId, documentIdSpecified, isBack, extension, null);
        }
        
        /// <remarks/>
        public void deleteAsync(string token, long usrId, bool usrIdSpecified, long documentId, bool documentIdSpecified, bool isBack, string extension, object userState) {
            if ((this.deleteOperationCompleted == null)) {
                this.deleteOperationCompleted = new System.Threading.SendOrPostCallback(this.OndeleteOperationCompleted);
            }
            this.InvokeAsync("delete", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentId,
                        documentIdSpecified,
                        isBack,
                        extension}, this.deleteOperationCompleted, userState);
        }
        
        private void OndeleteOperationCompleted(object arg) {
            if ((this.deleteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.deleteCompleted(this, new deleteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public fileDto getPdfPages([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentNfIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int startPage, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool startPageSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int endPage, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool endPageSpecified) {
            object[] results = this.Invoke("getPdfPages", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentNfId,
                        documentNfIdSpecified,
                        startPage,
                        startPageSpecified,
                        endPage,
                        endPageSpecified});
            return ((fileDto)(results[0]));
        }
        
        /// <remarks/>
        public void getPdfPagesAsync(string token, long usrId, bool usrIdSpecified, long documentNfId, bool documentNfIdSpecified, int startPage, bool startPageSpecified, int endPage, bool endPageSpecified) {
            this.getPdfPagesAsync(token, usrId, usrIdSpecified, documentNfId, documentNfIdSpecified, startPage, startPageSpecified, endPage, endPageSpecified, null);
        }
        
        /// <remarks/>
        public void getPdfPagesAsync(string token, long usrId, bool usrIdSpecified, long documentNfId, bool documentNfIdSpecified, int startPage, bool startPageSpecified, int endPage, bool endPageSpecified, object userState) {
            if ((this.getPdfPagesOperationCompleted == null)) {
                this.getPdfPagesOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPdfPagesOperationCompleted);
            }
            this.InvokeAsync("getPdfPages", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentNfId,
                        documentNfIdSpecified,
                        startPage,
                        startPageSpecified,
                        endPage,
                        endPageSpecified}, this.getPdfPagesOperationCompleted, userState);
        }
        
        private void OngetPdfPagesOperationCompleted(object arg) {
            if ((this.getPdfPagesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPdfPagesCompleted(this, new getPdfPagesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.flexps.flexdoc.com.br/")]
    public partial class fileDto {
        
        private byte[] byteArrayField;
        
        private string contentTypeField;
        
        private string extensionField;
        
        private string fileNameField;
        
        private string pathField;
        
        private int sizeField;
        
        private bool sizeFieldSpecified;
        
        private System.DateTime validDateField;
        
        private bool validDateFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")]
        public byte[] byteArray {
            get {
                return this.byteArrayField;
            }
            set {
                this.byteArrayField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string contentType {
            get {
                return this.contentTypeField;
            }
            set {
                this.contentTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string extension {
            get {
                return this.extensionField;
            }
            set {
                this.extensionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string fileName {
            get {
                return this.fileNameField;
            }
            set {
                this.fileNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string path {
            get {
                return this.pathField;
            }
            set {
                this.pathField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int size {
            get {
                return this.sizeField;
            }
            set {
                this.sizeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool sizeSpecified {
            get {
                return this.sizeFieldSpecified;
            }
            set {
                this.sizeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime validDate {
            get {
                return this.validDateField;
            }
            set {
                this.validDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool validDateSpecified {
            get {
                return this.validDateFieldSpecified;
            }
            set {
                this.validDateFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void getFileGenericCompletedEventHandler(object sender, getFileGenericCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFileGenericCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFileGenericCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public fileDto Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((fileDto)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void getFileWithExtensionCompletedEventHandler(object sender, getFileWithExtensionCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getFileWithExtensionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getFileWithExtensionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public fileDto Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((fileDto)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void uploadGenericCompletedEventHandler(object sender, uploadGenericCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class uploadGenericCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal uploadGenericCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void uploadCompletedEventHandler(object sender, uploadCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class uploadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal uploadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void dirListCompletedEventHandler(object sender, dirListCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class dirListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal dirListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void deleteGenericCompletedEventHandler(object sender, deleteGenericCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteGenericCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteGenericCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void recoverInfoCompletedEventHandler(object sender, recoverInfoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class recoverInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal recoverInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int @return {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public bool returnSpecified {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void deleteCompletedEventHandler(object sender, deleteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class deleteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal deleteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void getPdfPagesCompletedEventHandler(object sender, getPdfPagesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPdfPagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPdfPagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public fileDto Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((fileDto)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5466
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.5466.
// 
#pragma warning disable 1591

namespace FlexImage.WebService.DocumentWebReference {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="DocumentServiceSoapBinding", Namespace="http://impl.service.flexps.flexdoc.com.br/")]
    public partial class DocumentService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback rePrintReceiptOperationCompleted;
        
        private System.Threading.SendOrPostCallback ackPendingOperationCompleted;
        
        private System.Threading.SendOrPostCallback setTifDocumentFTransmittedBackDetachedOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocsIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback requestTifBackDetachedOperationCompleted;
        
        private System.Threading.SendOrPostCallback getReceiptByBatchOperationCompleted;
        
        private System.Threading.SendOrPostCallback updateValDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback ackExceptionOperationCompleted;
        
        private System.Threading.SendOrPostCallback getBatchFToReceiptOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocumentOperationCompleted;
        
        private System.Threading.SendOrPostCallback getPendingBySiteOperationCompleted;
        
        private System.Threading.SendOrPostCallback requestJpgDetachedOperationCompleted;
        
        private System.Threading.SendOrPostCallback printReceiptOperationCompleted;
        
        private System.Threading.SendOrPostCallback requestJpgBackDetachedOperationCompleted;
        
        private System.Threading.SendOrPostCallback setJpgDocumentFTransmittedFrontOperationCompleted;
        
        private System.Threading.SendOrPostCallback printRibbonByBatchOperationCompleted;
        
        private System.Threading.SendOrPostCallback mountTransOperationCompleted;
        
        private System.Threading.SendOrPostCallback setJpgTransmittedFrontDetachedOperationCompleted;
        
        private System.Threading.SendOrPostCallback setJpgDocumentFTransmittedBackDetachedOperationCompleted;
        
        private System.Threading.SendOrPostCallback setJpgDocumentFTransmittedBackOperationCompleted;
        
        private System.Threading.SendOrPostCallback requestJpgBackOperationCompleted;
        
        private System.Threading.SendOrPostCallback requestJpgOperationCompleted;
        
        private System.Threading.SendOrPostCallback recaptureOperationCompleted;
        
        private System.Threading.SendOrPostCallback reclassifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback getDocumentLogOperationCompleted;
        
        private System.Threading.SendOrPostCallback editDocumentOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public DocumentService() {
            this.Url = global::FlexImage.WebService.Properties.Settings.Default.FlexImage_WSDocument_DocumentWebReference_DocumentService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event rePrintReceiptCompletedEventHandler rePrintReceiptCompleted;
        
        /// <remarks/>
        public event ackPendingCompletedEventHandler ackPendingCompleted;
        
        /// <remarks/>
        public event setTifDocumentFTransmittedBackDetachedCompletedEventHandler setTifDocumentFTransmittedBackDetachedCompleted;
        
        /// <remarks/>
        public event getDocsIdCompletedEventHandler getDocsIdCompleted;
        
        /// <remarks/>
        public event requestTifBackDetachedCompletedEventHandler requestTifBackDetachedCompleted;
        
        /// <remarks/>
        public event getReceiptByBatchCompletedEventHandler getReceiptByBatchCompleted;
        
        /// <remarks/>
        public event updateValDocumentCompletedEventHandler updateValDocumentCompleted;
        
        /// <remarks/>
        public event ackExceptionCompletedEventHandler ackExceptionCompleted;
        
        /// <remarks/>
        public event getBatchFToReceiptCompletedEventHandler getBatchFToReceiptCompleted;
        
        /// <remarks/>
        public event getDocumentCompletedEventHandler getDocumentCompleted;
        
        /// <remarks/>
        public event getPendingBySiteCompletedEventHandler getPendingBySiteCompleted;
        
        /// <remarks/>
        public event requestJpgDetachedCompletedEventHandler requestJpgDetachedCompleted;
        
        /// <remarks/>
        public event printReceiptCompletedEventHandler printReceiptCompleted;
        
        /// <remarks/>
        public event requestJpgBackDetachedCompletedEventHandler requestJpgBackDetachedCompleted;
        
        /// <remarks/>
        public event setJpgDocumentFTransmittedFrontCompletedEventHandler setJpgDocumentFTransmittedFrontCompleted;
        
        /// <remarks/>
        public event printRibbonByBatchCompletedEventHandler printRibbonByBatchCompleted;
        
        /// <remarks/>
        public event mountTransCompletedEventHandler mountTransCompleted;
        
        /// <remarks/>
        public event setJpgTransmittedFrontDetachedCompletedEventHandler setJpgTransmittedFrontDetachedCompleted;
        
        /// <remarks/>
        public event setJpgDocumentFTransmittedBackDetachedCompletedEventHandler setJpgDocumentFTransmittedBackDetachedCompleted;
        
        /// <remarks/>
        public event setJpgDocumentFTransmittedBackCompletedEventHandler setJpgDocumentFTransmittedBackCompleted;
        
        /// <remarks/>
        public event requestJpgBackCompletedEventHandler requestJpgBackCompleted;
        
        /// <remarks/>
        public event requestJpgCompletedEventHandler requestJpgCompleted;
        
        /// <remarks/>
        public event recaptureCompletedEventHandler recaptureCompleted;
        
        /// <remarks/>
        public event reclassifyCompletedEventHandler reclassifyCompleted;
        
        /// <remarks/>
        public event getDocumentLogCompletedEventHandler getDocumentLogCompleted;
        
        /// <remarks/>
        public event editDocumentCompletedEventHandler editDocumentCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string rePrintReceipt([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            object[] results = this.Invoke("rePrintReceipt", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void rePrintReceiptAsync(string token, long documentId, bool documentIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.rePrintReceiptAsync(token, documentId, documentIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void rePrintReceiptAsync(string token, long documentId, bool documentIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.rePrintReceiptOperationCompleted == null)) {
                this.rePrintReceiptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrePrintReceiptOperationCompleted);
            }
            this.InvokeAsync("rePrintReceipt", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.rePrintReceiptOperationCompleted, userState);
        }
        
        private void OnrePrintReceiptOperationCompleted(object arg) {
            if ((this.rePrintReceiptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.rePrintReceiptCompleted(this, new rePrintReceiptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ackPending([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long pendingId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool pendingIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("ackPending", new object[] {
                        token,
                        pendingId,
                        pendingIdSpecified,
                        documentId,
                        documentIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void ackPendingAsync(string token, long pendingId, bool pendingIdSpecified, long documentId, bool documentIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.ackPendingAsync(token, pendingId, pendingIdSpecified, documentId, documentIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void ackPendingAsync(string token, long pendingId, bool pendingIdSpecified, long documentId, bool documentIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.ackPendingOperationCompleted == null)) {
                this.ackPendingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnackPendingOperationCompleted);
            }
            this.InvokeAsync("ackPending", new object[] {
                        token,
                        pendingId,
                        pendingIdSpecified,
                        documentId,
                        documentIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.ackPendingOperationCompleted, userState);
        }
        
        private void OnackPendingOperationCompleted(object arg) {
            if ((this.ackPendingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ackPendingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setTifDocumentFTransmittedBackDetached([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int documentFileSizeBack, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentFileSizeBackSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentFileTypeBack, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentHashFileBack, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("setTifDocumentFTransmittedBackDetached", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        documentFileSizeBack,
                        documentFileSizeBackSpecified,
                        documentFileTypeBack,
                        documentHashFileBack,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void setTifDocumentFTransmittedBackDetachedAsync(string token, long documentId, bool documentIdSpecified, long batchId, bool batchIdSpecified, int documentFileSizeBack, bool documentFileSizeBackSpecified, string documentFileTypeBack, string documentHashFileBack, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.setTifDocumentFTransmittedBackDetachedAsync(token, documentId, documentIdSpecified, batchId, batchIdSpecified, documentFileSizeBack, documentFileSizeBackSpecified, documentFileTypeBack, documentHashFileBack, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void setTifDocumentFTransmittedBackDetachedAsync(string token, long documentId, bool documentIdSpecified, long batchId, bool batchIdSpecified, int documentFileSizeBack, bool documentFileSizeBackSpecified, string documentFileTypeBack, string documentHashFileBack, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.setTifDocumentFTransmittedBackDetachedOperationCompleted == null)) {
                this.setTifDocumentFTransmittedBackDetachedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetTifDocumentFTransmittedBackDetachedOperationCompleted);
            }
            this.InvokeAsync("setTifDocumentFTransmittedBackDetached", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        documentFileSizeBack,
                        documentFileSizeBackSpecified,
                        documentFileTypeBack,
                        documentHashFileBack,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.setTifDocumentFTransmittedBackDetachedOperationCompleted, userState);
        }
        
        private void OnsetTifDocumentFTransmittedBackDetachedOperationCompleted(object arg) {
            if ((this.setTifDocumentFTransmittedBackDetachedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setTifDocumentFTransmittedBackDetachedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long[] getDocsId([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int cache, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool cacheSpecified) {
            object[] results = this.Invoke("getDocsId", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        cache,
                        cacheSpecified});
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void getDocsIdAsync(string token, long usrId, bool usrIdSpecified, int cache, bool cacheSpecified) {
            this.getDocsIdAsync(token, usrId, usrIdSpecified, cache, cacheSpecified, null);
        }
        
        /// <remarks/>
        public void getDocsIdAsync(string token, long usrId, bool usrIdSpecified, int cache, bool cacheSpecified, object userState) {
            if ((this.getDocsIdOperationCompleted == null)) {
                this.getDocsIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocsIdOperationCompleted);
            }
            this.InvokeAsync("getDocsId", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        cache,
                        cacheSpecified}, this.getDocsIdOperationCompleted, userState);
        }
        
        private void OngetDocsIdOperationCompleted(object arg) {
            if ((this.getDocsIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocsIdCompleted(this, new getDocsIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void requestTifBackDetached([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("requestTifBackDetached", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void requestTifBackDetachedAsync(string token, long documentId, bool documentIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.requestTifBackDetachedAsync(token, documentId, documentIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void requestTifBackDetachedAsync(string token, long documentId, bool documentIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.requestTifBackDetachedOperationCompleted == null)) {
                this.requestTifBackDetachedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrequestTifBackDetachedOperationCompleted);
            }
            this.InvokeAsync("requestTifBackDetached", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.requestTifBackDetachedOperationCompleted, userState);
        }
        
        private void OnrequestTifBackDetachedOperationCompleted(object arg) {
            if ((this.requestTifBackDetachedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.requestTifBackDetachedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public documentDto[] getReceiptByBatch([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified) {
            object[] results = this.Invoke("getReceiptByBatch", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        batchId,
                        batchIdSpecified});
            return ((documentDto[])(results[0]));
        }
        
        /// <remarks/>
        public void getReceiptByBatchAsync(string token, long usrId, bool usrIdSpecified, long batchId, bool batchIdSpecified) {
            this.getReceiptByBatchAsync(token, usrId, usrIdSpecified, batchId, batchIdSpecified, null);
        }
        
        /// <remarks/>
        public void getReceiptByBatchAsync(string token, long usrId, bool usrIdSpecified, long batchId, bool batchIdSpecified, object userState) {
            if ((this.getReceiptByBatchOperationCompleted == null)) {
                this.getReceiptByBatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetReceiptByBatchOperationCompleted);
            }
            this.InvokeAsync("getReceiptByBatch", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        batchId,
                        batchIdSpecified}, this.getReceiptByBatchOperationCompleted, userState);
        }
        
        private void OngetReceiptByBatchOperationCompleted(object arg) {
            if ((this.getReceiptByBatchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getReceiptByBatchCompleted(this, new getReceiptByBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void updateValDocument([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentXml, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentNumber, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] decimal newDocumentValue, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool newDocumentValueSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] decimal oldDocumentValue, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool oldDocumentValueSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("updateValDocument", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        documentXml,
                        documentNumber,
                        newDocumentValue,
                        newDocumentValueSpecified,
                        oldDocumentValue,
                        oldDocumentValueSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void updateValDocumentAsync(string token, long documentId, bool documentIdSpecified, string documentXml, string documentNumber, decimal newDocumentValue, bool newDocumentValueSpecified, decimal oldDocumentValue, bool oldDocumentValueSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.updateValDocumentAsync(token, documentId, documentIdSpecified, documentXml, documentNumber, newDocumentValue, newDocumentValueSpecified, oldDocumentValue, oldDocumentValueSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void updateValDocumentAsync(string token, long documentId, bool documentIdSpecified, string documentXml, string documentNumber, decimal newDocumentValue, bool newDocumentValueSpecified, decimal oldDocumentValue, bool oldDocumentValueSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.updateValDocumentOperationCompleted == null)) {
                this.updateValDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OnupdateValDocumentOperationCompleted);
            }
            this.InvokeAsync("updateValDocument", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        documentXml,
                        documentNumber,
                        newDocumentValue,
                        newDocumentValueSpecified,
                        oldDocumentValue,
                        oldDocumentValueSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.updateValDocumentOperationCompleted, userState);
        }
        
        private void OnupdateValDocumentOperationCompleted(object arg) {
            if ((this.updateValDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.updateValDocumentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void ackException([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long exceptionId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool exceptionIdSpecified, [System.Xml.Serialization.XmlElementAttribute("usrInternalIds", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string[] usrInternalIds, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("ackException", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        exceptionId,
                        exceptionIdSpecified,
                        usrInternalIds,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void ackExceptionAsync(string token, long documentId, bool documentIdSpecified, long exceptionId, bool exceptionIdSpecified, string[] usrInternalIds, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.ackExceptionAsync(token, documentId, documentIdSpecified, exceptionId, exceptionIdSpecified, usrInternalIds, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void ackExceptionAsync(string token, long documentId, bool documentIdSpecified, long exceptionId, bool exceptionIdSpecified, string[] usrInternalIds, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.ackExceptionOperationCompleted == null)) {
                this.ackExceptionOperationCompleted = new System.Threading.SendOrPostCallback(this.OnackExceptionOperationCompleted);
            }
            this.InvokeAsync("ackException", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        exceptionId,
                        exceptionIdSpecified,
                        usrInternalIds,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.ackExceptionOperationCompleted, userState);
        }
        
        private void OnackExceptionOperationCompleted(object arg) {
            if ((this.ackExceptionCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ackExceptionCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long[] getBatchFToReceipt([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long siteId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool siteIdSpecified) {
            object[] results = this.Invoke("getBatchFToReceipt", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        siteId,
                        siteIdSpecified});
            return ((long[])(results[0]));
        }
        
        /// <remarks/>
        public void getBatchFToReceiptAsync(string token, long usrId, bool usrIdSpecified, long siteId, bool siteIdSpecified) {
            this.getBatchFToReceiptAsync(token, usrId, usrIdSpecified, siteId, siteIdSpecified, null);
        }
        
        /// <remarks/>
        public void getBatchFToReceiptAsync(string token, long usrId, bool usrIdSpecified, long siteId, bool siteIdSpecified, object userState) {
            if ((this.getBatchFToReceiptOperationCompleted == null)) {
                this.getBatchFToReceiptOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetBatchFToReceiptOperationCompleted);
            }
            this.InvokeAsync("getBatchFToReceipt", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        siteId,
                        siteIdSpecified}, this.getBatchFToReceiptOperationCompleted, userState);
        }
        
        private void OngetBatchFToReceiptOperationCompleted(object arg) {
            if ((this.getBatchFToReceiptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getBatchFToReceiptCompleted(this, new getBatchFToReceiptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public documentDto getDocument([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified) {
            object[] results = this.Invoke("getDocument", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentId,
                        documentIdSpecified});
            return ((documentDto)(results[0]));
        }
        
        /// <remarks/>
        public void getDocumentAsync(string token, long usrId, bool usrIdSpecified, long documentId, bool documentIdSpecified) {
            this.getDocumentAsync(token, usrId, usrIdSpecified, documentId, documentIdSpecified, null);
        }
        
        /// <remarks/>
        public void getDocumentAsync(string token, long usrId, bool usrIdSpecified, long documentId, bool documentIdSpecified, object userState) {
            if ((this.getDocumentOperationCompleted == null)) {
                this.getDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocumentOperationCompleted);
            }
            this.InvokeAsync("getDocument", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentId,
                        documentIdSpecified}, this.getDocumentOperationCompleted, userState);
        }
        
        private void OngetDocumentOperationCompleted(object arg) {
            if ((this.getDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocumentCompleted(this, new getDocumentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public documentDto[] getPendingBySite([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long siteId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool siteIdSpecified) {
            object[] results = this.Invoke("getPendingBySite", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        siteId,
                        siteIdSpecified});
            return ((documentDto[])(results[0]));
        }
        
        /// <remarks/>
        public void getPendingBySiteAsync(string token, long usrId, bool usrIdSpecified, long siteId, bool siteIdSpecified) {
            this.getPendingBySiteAsync(token, usrId, usrIdSpecified, siteId, siteIdSpecified, null);
        }
        
        /// <remarks/>
        public void getPendingBySiteAsync(string token, long usrId, bool usrIdSpecified, long siteId, bool siteIdSpecified, object userState) {
            if ((this.getPendingBySiteOperationCompleted == null)) {
                this.getPendingBySiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetPendingBySiteOperationCompleted);
            }
            this.InvokeAsync("getPendingBySite", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        siteId,
                        siteIdSpecified}, this.getPendingBySiteOperationCompleted, userState);
        }
        
        private void OngetPendingBySiteOperationCompleted(object arg) {
            if ((this.getPendingBySiteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getPendingBySiteCompleted(this, new getPendingBySiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void requestJpgDetached([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("requestJpgDetached", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void requestJpgDetachedAsync(string token, long documentId, bool documentIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.requestJpgDetachedAsync(token, documentId, documentIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void requestJpgDetachedAsync(string token, long documentId, bool documentIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.requestJpgDetachedOperationCompleted == null)) {
                this.requestJpgDetachedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrequestJpgDetachedOperationCompleted);
            }
            this.InvokeAsync("requestJpgDetached", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.requestJpgDetachedOperationCompleted, userState);
        }
        
        private void OnrequestJpgDetachedOperationCompleted(object arg) {
            if ((this.requestJpgDetachedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.requestJpgDetachedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string printReceipt([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            object[] results = this.Invoke("printReceipt", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void printReceiptAsync(string token, long documentId, bool documentIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.printReceiptAsync(token, documentId, documentIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void printReceiptAsync(string token, long documentId, bool documentIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.printReceiptOperationCompleted == null)) {
                this.printReceiptOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprintReceiptOperationCompleted);
            }
            this.InvokeAsync("printReceipt", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.printReceiptOperationCompleted, userState);
        }
        
        private void OnprintReceiptOperationCompleted(object arg) {
            if ((this.printReceiptCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.printReceiptCompleted(this, new printReceiptCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void requestJpgBackDetached([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("requestJpgBackDetached", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void requestJpgBackDetachedAsync(string token, long documentId, bool documentIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.requestJpgBackDetachedAsync(token, documentId, documentIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void requestJpgBackDetachedAsync(string token, long documentId, bool documentIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.requestJpgBackDetachedOperationCompleted == null)) {
                this.requestJpgBackDetachedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrequestJpgBackDetachedOperationCompleted);
            }
            this.InvokeAsync("requestJpgBackDetached", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.requestJpgBackDetachedOperationCompleted, userState);
        }
        
        private void OnrequestJpgBackDetachedOperationCompleted(object arg) {
            if ((this.requestJpgBackDetachedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.requestJpgBackDetachedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setJpgDocumentFTransmittedFront([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int documentFileSizeFront, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentFileSizeFrontSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentFileTypeFront, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentHashFile, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("setJpgDocumentFTransmittedFront", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        documentFileSizeFront,
                        documentFileSizeFrontSpecified,
                        documentFileTypeFront,
                        documentHashFile,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void setJpgDocumentFTransmittedFrontAsync(string token, long documentId, bool documentIdSpecified, long batchId, bool batchIdSpecified, int documentFileSizeFront, bool documentFileSizeFrontSpecified, string documentFileTypeFront, string documentHashFile, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.setJpgDocumentFTransmittedFrontAsync(token, documentId, documentIdSpecified, batchId, batchIdSpecified, documentFileSizeFront, documentFileSizeFrontSpecified, documentFileTypeFront, documentHashFile, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void setJpgDocumentFTransmittedFrontAsync(string token, long documentId, bool documentIdSpecified, long batchId, bool batchIdSpecified, int documentFileSizeFront, bool documentFileSizeFrontSpecified, string documentFileTypeFront, string documentHashFile, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.setJpgDocumentFTransmittedFrontOperationCompleted == null)) {
                this.setJpgDocumentFTransmittedFrontOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetJpgDocumentFTransmittedFrontOperationCompleted);
            }
            this.InvokeAsync("setJpgDocumentFTransmittedFront", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        documentFileSizeFront,
                        documentFileSizeFrontSpecified,
                        documentFileTypeFront,
                        documentHashFile,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.setJpgDocumentFTransmittedFrontOperationCompleted, userState);
        }
        
        private void OnsetJpgDocumentFTransmittedFrontOperationCompleted(object arg) {
            if ((this.setJpgDocumentFTransmittedFrontCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setJpgDocumentFTransmittedFrontCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string printRibbonByBatch([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            object[] results = this.Invoke("printRibbonByBatch", new object[] {
                        token,
                        batchId,
                        batchIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void printRibbonByBatchAsync(string token, long batchId, bool batchIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.printRibbonByBatchAsync(token, batchId, batchIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void printRibbonByBatchAsync(string token, long batchId, bool batchIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.printRibbonByBatchOperationCompleted == null)) {
                this.printRibbonByBatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprintRibbonByBatchOperationCompleted);
            }
            this.InvokeAsync("printRibbonByBatch", new object[] {
                        token,
                        batchId,
                        batchIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.printRibbonByBatchOperationCompleted, userState);
        }
        
        private void OnprintRibbonByBatchOperationCompleted(object arg) {
            if ((this.printRibbonByBatchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.printRibbonByBatchCompleted(this, new printRibbonByBatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void mountTrans([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute("documentIds", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long[] documentIds, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentCoverId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentCoverIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("mountTrans", new object[] {
                        token,
                        batchId,
                        batchIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        documentIds,
                        documentCoverId,
                        documentCoverIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void mountTransAsync(string token, long batchId, bool batchIdSpecified, long workflowId, bool workflowIdSpecified, long[] documentIds, long documentCoverId, bool documentCoverIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.mountTransAsync(token, batchId, batchIdSpecified, workflowId, workflowIdSpecified, documentIds, documentCoverId, documentCoverIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void mountTransAsync(string token, long batchId, bool batchIdSpecified, long workflowId, bool workflowIdSpecified, long[] documentIds, long documentCoverId, bool documentCoverIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.mountTransOperationCompleted == null)) {
                this.mountTransOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmountTransOperationCompleted);
            }
            this.InvokeAsync("mountTrans", new object[] {
                        token,
                        batchId,
                        batchIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        documentIds,
                        documentCoverId,
                        documentCoverIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.mountTransOperationCompleted, userState);
        }
        
        private void OnmountTransOperationCompleted(object arg) {
            if ((this.mountTransCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.mountTransCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setJpgTransmittedFrontDetached([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int documentFileSizeFront, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentFileSizeFrontSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentFileTypeFront, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentHashFile, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("setJpgTransmittedFrontDetached", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        documentFileSizeFront,
                        documentFileSizeFrontSpecified,
                        documentFileTypeFront,
                        documentHashFile,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void setJpgTransmittedFrontDetachedAsync(string token, long documentId, bool documentIdSpecified, long batchId, bool batchIdSpecified, int documentFileSizeFront, bool documentFileSizeFrontSpecified, string documentFileTypeFront, string documentHashFile, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.setJpgTransmittedFrontDetachedAsync(token, documentId, documentIdSpecified, batchId, batchIdSpecified, documentFileSizeFront, documentFileSizeFrontSpecified, documentFileTypeFront, documentHashFile, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void setJpgTransmittedFrontDetachedAsync(string token, long documentId, bool documentIdSpecified, long batchId, bool batchIdSpecified, int documentFileSizeFront, bool documentFileSizeFrontSpecified, string documentFileTypeFront, string documentHashFile, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.setJpgTransmittedFrontDetachedOperationCompleted == null)) {
                this.setJpgTransmittedFrontDetachedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetJpgTransmittedFrontDetachedOperationCompleted);
            }
            this.InvokeAsync("setJpgTransmittedFrontDetached", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        documentFileSizeFront,
                        documentFileSizeFrontSpecified,
                        documentFileTypeFront,
                        documentHashFile,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.setJpgTransmittedFrontDetachedOperationCompleted, userState);
        }
        
        private void OnsetJpgTransmittedFrontDetachedOperationCompleted(object arg) {
            if ((this.setJpgTransmittedFrontDetachedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setJpgTransmittedFrontDetachedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setJpgDocumentFTransmittedBackDetached([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int documentFileSizeBack, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentFileSizeBackSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentFileTypeBack, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentHashFile, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("setJpgDocumentFTransmittedBackDetached", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        documentFileSizeBack,
                        documentFileSizeBackSpecified,
                        documentFileTypeBack,
                        documentHashFile,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void setJpgDocumentFTransmittedBackDetachedAsync(string token, long documentId, bool documentIdSpecified, long batchId, bool batchIdSpecified, int documentFileSizeBack, bool documentFileSizeBackSpecified, string documentFileTypeBack, string documentHashFile, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.setJpgDocumentFTransmittedBackDetachedAsync(token, documentId, documentIdSpecified, batchId, batchIdSpecified, documentFileSizeBack, documentFileSizeBackSpecified, documentFileTypeBack, documentHashFile, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void setJpgDocumentFTransmittedBackDetachedAsync(string token, long documentId, bool documentIdSpecified, long batchId, bool batchIdSpecified, int documentFileSizeBack, bool documentFileSizeBackSpecified, string documentFileTypeBack, string documentHashFile, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.setJpgDocumentFTransmittedBackDetachedOperationCompleted == null)) {
                this.setJpgDocumentFTransmittedBackDetachedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetJpgDocumentFTransmittedBackDetachedOperationCompleted);
            }
            this.InvokeAsync("setJpgDocumentFTransmittedBackDetached", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        documentFileSizeBack,
                        documentFileSizeBackSpecified,
                        documentFileTypeBack,
                        documentHashFile,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.setJpgDocumentFTransmittedBackDetachedOperationCompleted, userState);
        }
        
        private void OnsetJpgDocumentFTransmittedBackDetachedOperationCompleted(object arg) {
            if ((this.setJpgDocumentFTransmittedBackDetachedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setJpgDocumentFTransmittedBackDetachedCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void setJpgDocumentFTransmittedBack([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int documentFileSizeBack, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentFileSizeBackSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentFileTypeBack, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentHashFileBack, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("setJpgDocumentFTransmittedBack", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        documentFileSizeBack,
                        documentFileSizeBackSpecified,
                        documentFileTypeBack,
                        documentHashFileBack,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void setJpgDocumentFTransmittedBackAsync(string token, long documentId, bool documentIdSpecified, long batchId, bool batchIdSpecified, int documentFileSizeBack, bool documentFileSizeBackSpecified, string documentFileTypeBack, string documentHashFileBack, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.setJpgDocumentFTransmittedBackAsync(token, documentId, documentIdSpecified, batchId, batchIdSpecified, documentFileSizeBack, documentFileSizeBackSpecified, documentFileTypeBack, documentHashFileBack, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void setJpgDocumentFTransmittedBackAsync(string token, long documentId, bool documentIdSpecified, long batchId, bool batchIdSpecified, int documentFileSizeBack, bool documentFileSizeBackSpecified, string documentFileTypeBack, string documentHashFileBack, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.setJpgDocumentFTransmittedBackOperationCompleted == null)) {
                this.setJpgDocumentFTransmittedBackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnsetJpgDocumentFTransmittedBackOperationCompleted);
            }
            this.InvokeAsync("setJpgDocumentFTransmittedBack", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        documentFileSizeBack,
                        documentFileSizeBackSpecified,
                        documentFileTypeBack,
                        documentHashFileBack,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.setJpgDocumentFTransmittedBackOperationCompleted, userState);
        }
        
        private void OnsetJpgDocumentFTransmittedBackOperationCompleted(object arg) {
            if ((this.setJpgDocumentFTransmittedBackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.setJpgDocumentFTransmittedBackCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void requestJpgBack([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("requestJpgBack", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void requestJpgBackAsync(string token, long documentId, bool documentIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.requestJpgBackAsync(token, documentId, documentIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void requestJpgBackAsync(string token, long documentId, bool documentIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.requestJpgBackOperationCompleted == null)) {
                this.requestJpgBackOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrequestJpgBackOperationCompleted);
            }
            this.InvokeAsync("requestJpgBack", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.requestJpgBackOperationCompleted, userState);
        }
        
        private void OnrequestJpgBackOperationCompleted(object arg) {
            if ((this.requestJpgBackCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.requestJpgBackCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void requestJpg([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("requestJpg", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void requestJpgAsync(string token, long documentId, bool documentIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.requestJpgAsync(token, documentId, documentIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void requestJpgAsync(string token, long documentId, bool documentIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.requestJpgOperationCompleted == null)) {
                this.requestJpgOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrequestJpgOperationCompleted);
            }
            this.InvokeAsync("requestJpg", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.requestJpgOperationCompleted, userState);
        }
        
        private void OnrequestJpgOperationCompleted(object arg) {
            if ((this.requestJpgCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.requestJpgCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void recapture([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string reason, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("recapture", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        reason,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void recaptureAsync(string token, long documentId, bool documentIdSpecified, long batchId, bool batchIdSpecified, string reason, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.recaptureAsync(token, documentId, documentIdSpecified, batchId, batchIdSpecified, reason, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void recaptureAsync(string token, long documentId, bool documentIdSpecified, long batchId, bool batchIdSpecified, string reason, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.recaptureOperationCompleted == null)) {
                this.recaptureOperationCompleted = new System.Threading.SendOrPostCallback(this.OnrecaptureOperationCompleted);
            }
            this.InvokeAsync("recapture", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        reason,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.recaptureOperationCompleted, userState);
        }
        
        private void OnrecaptureOperationCompleted(object arg) {
            if ((this.recaptureCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.recaptureCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void reclassify([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int batchTotalDocs, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchTotalDocsSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("reclassify", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void reclassifyAsync(string token, long documentId, bool documentIdSpecified, long batchId, bool batchIdSpecified, int batchTotalDocs, bool batchTotalDocsSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.reclassifyAsync(token, documentId, documentIdSpecified, batchId, batchIdSpecified, batchTotalDocs, batchTotalDocsSpecified, workflowId, workflowIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void reclassifyAsync(string token, long documentId, bool documentIdSpecified, long batchId, bool batchIdSpecified, int batchTotalDocs, bool batchTotalDocsSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.reclassifyOperationCompleted == null)) {
                this.reclassifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreclassifyOperationCompleted);
            }
            this.InvokeAsync("reclassify", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.reclassifyOperationCompleted, userState);
        }
        
        private void OnreclassifyOperationCompleted(object arg) {
            if ((this.reclassifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.reclassifyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public documentLogDto[] getDocumentLog([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified) {
            object[] results = this.Invoke("getDocumentLog", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentId,
                        documentIdSpecified});
            return ((documentLogDto[])(results[0]));
        }
        
        /// <remarks/>
        public void getDocumentLogAsync(string token, long usrId, bool usrIdSpecified, long documentId, bool documentIdSpecified) {
            this.getDocumentLogAsync(token, usrId, usrIdSpecified, documentId, documentIdSpecified, null);
        }
        
        /// <remarks/>
        public void getDocumentLogAsync(string token, long usrId, bool usrIdSpecified, long documentId, bool documentIdSpecified, object userState) {
            if ((this.getDocumentLogOperationCompleted == null)) {
                this.getDocumentLogOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetDocumentLogOperationCompleted);
            }
            this.InvokeAsync("getDocumentLog", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentId,
                        documentIdSpecified}, this.getDocumentLogOperationCompleted, userState);
        }
        
        private void OngetDocumentLogOperationCompleted(object arg) {
            if ((this.getDocumentLogCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getDocumentLogCompleted(this, new getDocumentLogCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void editDocument([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string newDocumentXml, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string oldDocumentXml, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentNumber, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] decimal documentValue, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentValueSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("editDocument", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        newDocumentXml,
                        oldDocumentXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void editDocumentAsync(string token, long documentId, bool documentIdSpecified, string newDocumentXml, string oldDocumentXml, string documentNumber, decimal documentValue, bool documentValueSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.editDocumentAsync(token, documentId, documentIdSpecified, newDocumentXml, oldDocumentXml, documentNumber, documentValue, documentValueSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void editDocumentAsync(string token, long documentId, bool documentIdSpecified, string newDocumentXml, string oldDocumentXml, string documentNumber, decimal documentValue, bool documentValueSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.editDocumentOperationCompleted == null)) {
                this.editDocumentOperationCompleted = new System.Threading.SendOrPostCallback(this.OneditDocumentOperationCompleted);
            }
            this.InvokeAsync("editDocument", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        newDocumentXml,
                        oldDocumentXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.editDocumentOperationCompleted, userState);
        }
        
        private void OneditDocumentOperationCompleted(object arg) {
            if ((this.editDocumentCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.editDocumentCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.flexps.flexdoc.com.br/")]
    public partial class documentDto {
        
        private long batchIdField;
        
        private bool batchIdFieldSpecified;
        
        private int documentCaptureSeqField;
        
        private bool documentCaptureSeqFieldSpecified;
        
        private System.DateTime documentCreatedField;
        
        private bool documentCreatedFieldSpecified;
        
        private byte[] documentFileBackField;
        
        private byte[] documentFileFrontField;
        
        private int documentFileSizeBackField;
        
        private bool documentFileSizeBackFieldSpecified;
        
        private int documentFileSizeFrontField;
        
        private bool documentFileSizeFrontFieldSpecified;
        
        private string documentFileTypeBackField;
        
        private string documentFileTypeFrontField;
        
        private string documentHashFileField;
        
        private string documentHashFileBackField;
        
        private string documentHashXmlField;
        
        private string documentHashXmlBackField;
        
        private long documentIdField;
        
        private bool documentIdFieldSpecified;
        
        private int documentNsuField;
        
        private bool documentNsuFieldSpecified;
        
        private int documentNsuHostField;
        
        private bool documentNsuHostFieldSpecified;
        
        private string documentNumberField;
        
        private string documentReasonField;
        
        private int documentStatusField;
        
        private bool documentStatusFieldSpecified;
        
        private decimal documentValueField;
        
        private bool documentValueFieldSpecified;
        
        private string documentXmlField;
        
        private exceptionDto[] exceptionDtoListField;
        
        private pendingDto[] pendingDtoListField;
        
        private bool receiptField;
        
        private int siteExternalIdField;
        
        private bool siteExternalIdFieldSpecified;
        
        private string siteNameField;
        
        private long transIdField;
        
        private bool transIdFieldSpecified;
        
        private string typeAliasField;
        
        private long typeIdField;
        
        private bool typeIdFieldSpecified;
        
        private int typeOperationField;
        
        private bool typeOperationFieldSpecified;
        
        private int typeReceiptField;
        
        private bool typeReceiptFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long batchId {
            get {
                return this.batchIdField;
            }
            set {
                this.batchIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool batchIdSpecified {
            get {
                return this.batchIdFieldSpecified;
            }
            set {
                this.batchIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentCaptureSeq {
            get {
                return this.documentCaptureSeqField;
            }
            set {
                this.documentCaptureSeqField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentCaptureSeqSpecified {
            get {
                return this.documentCaptureSeqFieldSpecified;
            }
            set {
                this.documentCaptureSeqFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime documentCreated {
            get {
                return this.documentCreatedField;
            }
            set {
                this.documentCreatedField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentCreatedSpecified {
            get {
                return this.documentCreatedFieldSpecified;
            }
            set {
                this.documentCreatedFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")]
        public byte[] documentFileBack {
            get {
                return this.documentFileBackField;
            }
            set {
                this.documentFileBackField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType="base64Binary")]
        public byte[] documentFileFront {
            get {
                return this.documentFileFrontField;
            }
            set {
                this.documentFileFrontField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentFileSizeBack {
            get {
                return this.documentFileSizeBackField;
            }
            set {
                this.documentFileSizeBackField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentFileSizeBackSpecified {
            get {
                return this.documentFileSizeBackFieldSpecified;
            }
            set {
                this.documentFileSizeBackFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentFileSizeFront {
            get {
                return this.documentFileSizeFrontField;
            }
            set {
                this.documentFileSizeFrontField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentFileSizeFrontSpecified {
            get {
                return this.documentFileSizeFrontFieldSpecified;
            }
            set {
                this.documentFileSizeFrontFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentFileTypeBack {
            get {
                return this.documentFileTypeBackField;
            }
            set {
                this.documentFileTypeBackField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentFileTypeFront {
            get {
                return this.documentFileTypeFrontField;
            }
            set {
                this.documentFileTypeFrontField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentHashFile {
            get {
                return this.documentHashFileField;
            }
            set {
                this.documentHashFileField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentHashFileBack {
            get {
                return this.documentHashFileBackField;
            }
            set {
                this.documentHashFileBackField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentHashXml {
            get {
                return this.documentHashXmlField;
            }
            set {
                this.documentHashXmlField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentHashXmlBack {
            get {
                return this.documentHashXmlBackField;
            }
            set {
                this.documentHashXmlBackField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long documentId {
            get {
                return this.documentIdField;
            }
            set {
                this.documentIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentIdSpecified {
            get {
                return this.documentIdFieldSpecified;
            }
            set {
                this.documentIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentNsu {
            get {
                return this.documentNsuField;
            }
            set {
                this.documentNsuField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNsuSpecified {
            get {
                return this.documentNsuFieldSpecified;
            }
            set {
                this.documentNsuFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentNsuHost {
            get {
                return this.documentNsuHostField;
            }
            set {
                this.documentNsuHostField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNsuHostSpecified {
            get {
                return this.documentNsuHostFieldSpecified;
            }
            set {
                this.documentNsuHostFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentNumber {
            get {
                return this.documentNumberField;
            }
            set {
                this.documentNumberField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentReason {
            get {
                return this.documentReasonField;
            }
            set {
                this.documentReasonField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int documentStatus {
            get {
                return this.documentStatusField;
            }
            set {
                this.documentStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentStatusSpecified {
            get {
                return this.documentStatusFieldSpecified;
            }
            set {
                this.documentStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public decimal documentValue {
            get {
                return this.documentValueField;
            }
            set {
                this.documentValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentValueSpecified {
            get {
                return this.documentValueFieldSpecified;
            }
            set {
                this.documentValueFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string documentXml {
            get {
                return this.documentXmlField;
            }
            set {
                this.documentXmlField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("exceptionDtoList", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public exceptionDto[] exceptionDtoList {
            get {
                return this.exceptionDtoListField;
            }
            set {
                this.exceptionDtoListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute("pendingDtoList", Form=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable=true)]
        public pendingDto[] pendingDtoList {
            get {
                return this.pendingDtoListField;
            }
            set {
                this.pendingDtoListField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool receipt {
            get {
                return this.receiptField;
            }
            set {
                this.receiptField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int siteExternalId {
            get {
                return this.siteExternalIdField;
            }
            set {
                this.siteExternalIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool siteExternalIdSpecified {
            get {
                return this.siteExternalIdFieldSpecified;
            }
            set {
                this.siteExternalIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string siteName {
            get {
                return this.siteNameField;
            }
            set {
                this.siteNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long transId {
            get {
                return this.transIdField;
            }
            set {
                this.transIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool transIdSpecified {
            get {
                return this.transIdFieldSpecified;
            }
            set {
                this.transIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string typeAlias {
            get {
                return this.typeAliasField;
            }
            set {
                this.typeAliasField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long typeId {
            get {
                return this.typeIdField;
            }
            set {
                this.typeIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeIdSpecified {
            get {
                return this.typeIdFieldSpecified;
            }
            set {
                this.typeIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int typeOperation {
            get {
                return this.typeOperationField;
            }
            set {
                this.typeOperationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeOperationSpecified {
            get {
                return this.typeOperationFieldSpecified;
            }
            set {
                this.typeOperationFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int typeReceipt {
            get {
                return this.typeReceiptField;
            }
            set {
                this.typeReceiptField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool typeReceiptSpecified {
            get {
                return this.typeReceiptFieldSpecified;
            }
            set {
                this.typeReceiptFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.flexps.flexdoc.com.br/")]
    public partial class exceptionDto {
        
        private int exceptionAuthTypeField;
        
        private bool exceptionAuthTypeFieldSpecified;
        
        private long exceptionIdField;
        
        private bool exceptionIdFieldSpecified;
        
        private string exceptionNameField;
        
        private int exceptionOriginField;
        
        private bool exceptionOriginFieldSpecified;
        
        private string exceptionOsfField;
        
        private int exceptionPendingField;
        
        private bool exceptionPendingFieldSpecified;
        
        private int exceptionTypeField;
        
        private bool exceptionTypeFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int exceptionAuthType {
            get {
                return this.exceptionAuthTypeField;
            }
            set {
                this.exceptionAuthTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool exceptionAuthTypeSpecified {
            get {
                return this.exceptionAuthTypeFieldSpecified;
            }
            set {
                this.exceptionAuthTypeFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long exceptionId {
            get {
                return this.exceptionIdField;
            }
            set {
                this.exceptionIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool exceptionIdSpecified {
            get {
                return this.exceptionIdFieldSpecified;
            }
            set {
                this.exceptionIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string exceptionName {
            get {
                return this.exceptionNameField;
            }
            set {
                this.exceptionNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int exceptionOrigin {
            get {
                return this.exceptionOriginField;
            }
            set {
                this.exceptionOriginField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool exceptionOriginSpecified {
            get {
                return this.exceptionOriginFieldSpecified;
            }
            set {
                this.exceptionOriginFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string exceptionOsf {
            get {
                return this.exceptionOsfField;
            }
            set {
                this.exceptionOsfField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int exceptionPending {
            get {
                return this.exceptionPendingField;
            }
            set {
                this.exceptionPendingField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool exceptionPendingSpecified {
            get {
                return this.exceptionPendingFieldSpecified;
            }
            set {
                this.exceptionPendingFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int exceptionType {
            get {
                return this.exceptionTypeField;
            }
            set {
                this.exceptionTypeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool exceptionTypeSpecified {
            get {
                return this.exceptionTypeFieldSpecified;
            }
            set {
                this.exceptionTypeFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.flexps.flexdoc.com.br/")]
    public partial class documentLogDto {
        
        private string logField;
        
        private System.DateTime logDateField;
        
        private bool logDateFieldSpecified;
        
        private string logStationField;
        
        private string logUsrField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string log {
            get {
                return this.logField;
            }
            set {
                this.logField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime logDate {
            get {
                return this.logDateField;
            }
            set {
                this.logDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool logDateSpecified {
            get {
                return this.logDateFieldSpecified;
            }
            set {
                this.logDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string logStation {
            get {
                return this.logStationField;
            }
            set {
                this.logStationField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string logUsr {
            get {
                return this.logUsrField;
            }
            set {
                this.logUsrField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.flexps.flexdoc.com.br/")]
    public partial class pendingDto {
        
        private System.DateTime pendingDateField;
        
        private bool pendingDateFieldSpecified;
        
        private long pendingIdField;
        
        private bool pendingIdFieldSpecified;
        
        private string pendingReasonField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime pendingDate {
            get {
                return this.pendingDateField;
            }
            set {
                this.pendingDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pendingDateSpecified {
            get {
                return this.pendingDateFieldSpecified;
            }
            set {
                this.pendingDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long pendingId {
            get {
                return this.pendingIdField;
            }
            set {
                this.pendingIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool pendingIdSpecified {
            get {
                return this.pendingIdFieldSpecified;
            }
            set {
                this.pendingIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string pendingReason {
            get {
                return this.pendingReasonField;
            }
            set {
                this.pendingReasonField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void rePrintReceiptCompletedEventHandler(object sender, rePrintReceiptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class rePrintReceiptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal rePrintReceiptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void ackPendingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void setTifDocumentFTransmittedBackDetachedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void getDocsIdCompletedEventHandler(object sender, getDocsIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDocsIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDocsIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void requestTifBackDetachedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void getReceiptByBatchCompletedEventHandler(object sender, getReceiptByBatchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getReceiptByBatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getReceiptByBatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public documentDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((documentDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void updateValDocumentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void ackExceptionCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void getBatchFToReceiptCompletedEventHandler(object sender, getBatchFToReceiptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getBatchFToReceiptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getBatchFToReceiptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public long[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((long[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void getDocumentCompletedEventHandler(object sender, getDocumentCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDocumentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDocumentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public documentDto Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((documentDto)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void getPendingBySiteCompletedEventHandler(object sender, getPendingBySiteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getPendingBySiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getPendingBySiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public documentDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((documentDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void requestJpgDetachedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void printReceiptCompletedEventHandler(object sender, printReceiptCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class printReceiptCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal printReceiptCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void requestJpgBackDetachedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void setJpgDocumentFTransmittedFrontCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void printRibbonByBatchCompletedEventHandler(object sender, printRibbonByBatchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class printRibbonByBatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal printRibbonByBatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void mountTransCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void setJpgTransmittedFrontDetachedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void setJpgDocumentFTransmittedBackDetachedCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void setJpgDocumentFTransmittedBackCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void requestJpgBackCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void requestJpgCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void recaptureCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void reclassifyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void getDocumentLogCompletedEventHandler(object sender, getDocumentLogCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getDocumentLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getDocumentLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public documentLogDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((documentLogDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void editDocumentCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591
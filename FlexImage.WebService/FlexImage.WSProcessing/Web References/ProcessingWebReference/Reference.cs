//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5466
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.5466.
// 
#pragma warning disable 1591

namespace FlexImage.WebService.ProcessingWebReference {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ProcessingFServiceSoapBinding", Namespace="http://impl.service.flexps.flexdoc.com.br/")]
    public partial class ProcessingFService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback processTypingCmc7CtdOperationCompleted;
        
        private System.Threading.SendOrPostCallback processIcrOperationCompleted;
        
        private System.Threading.SendOrPostCallback markValSignAutoOperationCompleted;
        
        private System.Threading.SendOrPostCallback processTypingDataBoaCtdOperationCompleted;
        
        private System.Threading.SendOrPostCallback processOcrAOperationCompleted;
        
        private System.Threading.SendOrPostCallback approveTransInDiff3OperationCompleted;
        
        private System.Threading.SendOrPostCallback approveTransInApprove1OperationCompleted;
        
        private System.Threading.SendOrPostCallback processTypingValCtdOperationCompleted;
        
        private System.Threading.SendOrPostCallback processTypingCmc7TruncOperationCompleted;
        
        private System.Threading.SendOrPostCallback approveTransInApprove4OperationCompleted;
        
        private System.Threading.SendOrPostCallback markValSignManualOperationCompleted;
        
        private System.Threading.SendOrPostCallback markTransInDiff2OperationCompleted;
        
        private System.Threading.SendOrPostCallback processTypingBorderoTruncOperationCompleted;
        
        private System.Threading.SendOrPostCallback processClassifyOperationCompleted;
        
        private System.Threading.SendOrPostCallback processDoubleTypingValCtdOperationCompleted;
        
        private System.Threading.SendOrPostCallback processTypingBorderoCtdOperationCompleted;
        
        private System.Threading.SendOrPostCallback approveTransInDiff1OperationCompleted;
        
        private System.Threading.SendOrPostCallback processDoubleTypingDataBoaCtdOperationCompleted;
        
        private System.Threading.SendOrPostCallback markTransInDiff1OperationCompleted;
        
        private System.Threading.SendOrPostCallback processTypingValTruncOperationCompleted;
        
        private System.Threading.SendOrPostCallback approveValSignManualOperationCompleted;
        
        private System.Threading.SendOrPostCallback approveFormOperationCompleted;
        
        private System.Threading.SendOrPostCallback markFormOperationCompleted;
        
        private System.Threading.SendOrPostCallback approveValSignAutoOperationCompleted;
        
        private System.Threading.SendOrPostCallback processTypingCpfCnpjCtdOperationCompleted;
        
        private System.Threading.SendOrPostCallback markTransInApprove3OperationCompleted;
        
        private System.Threading.SendOrPostCallback approveTransInApprove3OperationCompleted;
        
        private System.Threading.SendOrPostCallback approveTransInApprove2OperationCompleted;
        
        private System.Threading.SendOrPostCallback approveTransInDiff2OperationCompleted;
        
        private System.Threading.SendOrPostCallback processTypingOperationCompleted;
        
        private System.Threading.SendOrPostCallback markTransInApprove1OperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ProcessingFService() {
            this.Url = global::FlexImage.WebService.Properties.Settings.Default.FlexImage_WSProcessing_ProcessingWebReference_ProcessingFService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event processTypingCmc7CtdCompletedEventHandler processTypingCmc7CtdCompleted;
        
        /// <remarks/>
        public event processIcrCompletedEventHandler processIcrCompleted;
        
        /// <remarks/>
        public event markValSignAutoCompletedEventHandler markValSignAutoCompleted;
        
        /// <remarks/>
        public event processTypingDataBoaCtdCompletedEventHandler processTypingDataBoaCtdCompleted;
        
        /// <remarks/>
        public event processOcrACompletedEventHandler processOcrACompleted;
        
        /// <remarks/>
        public event approveTransInDiff3CompletedEventHandler approveTransInDiff3Completed;
        
        /// <remarks/>
        public event approveTransInApprove1CompletedEventHandler approveTransInApprove1Completed;
        
        /// <remarks/>
        public event processTypingValCtdCompletedEventHandler processTypingValCtdCompleted;
        
        /// <remarks/>
        public event processTypingCmc7TruncCompletedEventHandler processTypingCmc7TruncCompleted;
        
        /// <remarks/>
        public event approveTransInApprove4CompletedEventHandler approveTransInApprove4Completed;
        
        /// <remarks/>
        public event markValSignManualCompletedEventHandler markValSignManualCompleted;
        
        /// <remarks/>
        public event markTransInDiff2CompletedEventHandler markTransInDiff2Completed;
        
        /// <remarks/>
        public event processTypingBorderoTruncCompletedEventHandler processTypingBorderoTruncCompleted;
        
        /// <remarks/>
        public event processClassifyCompletedEventHandler processClassifyCompleted;
        
        /// <remarks/>
        public event processDoubleTypingValCtdCompletedEventHandler processDoubleTypingValCtdCompleted;
        
        /// <remarks/>
        public event processTypingBorderoCtdCompletedEventHandler processTypingBorderoCtdCompleted;
        
        /// <remarks/>
        public event approveTransInDiff1CompletedEventHandler approveTransInDiff1Completed;
        
        /// <remarks/>
        public event processDoubleTypingDataBoaCtdCompletedEventHandler processDoubleTypingDataBoaCtdCompleted;
        
        /// <remarks/>
        public event markTransInDiff1CompletedEventHandler markTransInDiff1Completed;
        
        /// <remarks/>
        public event processTypingValTruncCompletedEventHandler processTypingValTruncCompleted;
        
        /// <remarks/>
        public event approveValSignManualCompletedEventHandler approveValSignManualCompleted;
        
        /// <remarks/>
        public event approveFormCompletedEventHandler approveFormCompleted;
        
        /// <remarks/>
        public event markFormCompletedEventHandler markFormCompleted;
        
        /// <remarks/>
        public event approveValSignAutoCompletedEventHandler approveValSignAutoCompleted;
        
        /// <remarks/>
        public event processTypingCpfCnpjCtdCompletedEventHandler processTypingCpfCnpjCtdCompleted;
        
        /// <remarks/>
        public event markTransInApprove3CompletedEventHandler markTransInApprove3Completed;
        
        /// <remarks/>
        public event approveTransInApprove3CompletedEventHandler approveTransInApprove3Completed;
        
        /// <remarks/>
        public event approveTransInApprove2CompletedEventHandler approveTransInApprove2Completed;
        
        /// <remarks/>
        public event approveTransInDiff2CompletedEventHandler approveTransInDiff2Completed;
        
        /// <remarks/>
        public event processTypingCompletedEventHandler processTypingCompleted;
        
        /// <remarks/>
        public event markTransInApprove1CompletedEventHandler markTransInApprove1Completed;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void processTypingCmc7Ctd(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long typeId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typeIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int batchTotalDocs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchTotalDocsSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string xml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentHashXml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentNumber, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] decimal documentValue, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentValueSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int typingTime, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typingTimeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int keystroke, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool keystrokeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string descTypingLog, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("processTypingCmc7Ctd", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        typeId,
                        typeIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        typingTime,
                        typingTimeSpecified,
                        keystroke,
                        keystrokeSpecified,
                        descTypingLog,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void processTypingCmc7CtdAsync(
                    string token, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    int typingTime, 
                    bool typingTimeSpecified, 
                    int keystroke, 
                    bool keystrokeSpecified, 
                    string descTypingLog, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified) {
            this.processTypingCmc7CtdAsync(token, documentId, documentIdSpecified, batchId, batchIdSpecified, typeId, typeIdSpecified, batchTotalDocs, batchTotalDocsSpecified, workflowId, workflowIdSpecified, xml, documentHashXml, documentNumber, documentValue, documentValueSpecified, typingTime, typingTimeSpecified, keystroke, keystrokeSpecified, descTypingLog, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void processTypingCmc7CtdAsync(
                    string token, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    int typingTime, 
                    bool typingTimeSpecified, 
                    int keystroke, 
                    bool keystrokeSpecified, 
                    string descTypingLog, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified, 
                    object userState) {
            if ((this.processTypingCmc7CtdOperationCompleted == null)) {
                this.processTypingCmc7CtdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessTypingCmc7CtdOperationCompleted);
            }
            this.InvokeAsync("processTypingCmc7Ctd", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        typeId,
                        typeIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        typingTime,
                        typingTimeSpecified,
                        keystroke,
                        keystrokeSpecified,
                        descTypingLog,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.processTypingCmc7CtdOperationCompleted, userState);
        }
        
        private void OnprocessTypingCmc7CtdOperationCompleted(object arg) {
            if ((this.processTypingCmc7CtdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.processTypingCmc7CtdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void processIcr(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int batchTotalDocs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchTotalDocsSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string xml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentHashXml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentNumber, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] decimal documentValue, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentValueSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("processIcr", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void processIcrAsync(
                    string token, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    long stationId, 
                    bool stationIdSpecified) {
            this.processIcrAsync(token, usrId, usrIdSpecified, documentId, documentIdSpecified, batchId, batchIdSpecified, batchTotalDocs, batchTotalDocsSpecified, workflowId, workflowIdSpecified, xml, documentHashXml, documentNumber, documentValue, documentValueSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void processIcrAsync(
                    string token, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    long stationId, 
                    bool stationIdSpecified, 
                    object userState) {
            if ((this.processIcrOperationCompleted == null)) {
                this.processIcrOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessIcrOperationCompleted);
            }
            this.InvokeAsync("processIcr", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        stationId,
                        stationIdSpecified}, this.processIcrOperationCompleted, userState);
        }
        
        private void OnprocessIcrOperationCompleted(object arg) {
            if ((this.processIcrCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.processIcrCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void markValSignAuto([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long transId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool transIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("markValSignAuto", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void markValSignAutoAsync(string token, long documentId, bool documentIdSpecified, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.markValSignAutoAsync(token, documentId, documentIdSpecified, transId, transIdSpecified, workflowId, workflowIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void markValSignAutoAsync(string token, long documentId, bool documentIdSpecified, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.markValSignAutoOperationCompleted == null)) {
                this.markValSignAutoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmarkValSignAutoOperationCompleted);
            }
            this.InvokeAsync("markValSignAuto", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.markValSignAutoOperationCompleted, userState);
        }
        
        private void OnmarkValSignAutoOperationCompleted(object arg) {
            if ((this.markValSignAutoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.markValSignAutoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void processTypingDataBoaCtd(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long typeId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typeIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int batchTotalDocs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchTotalDocsSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string xml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentHashXml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentNumber, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] decimal documentValue, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentValueSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int typingTime, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typingTimeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int keystroke, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool keystrokeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string descTypingLog, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("processTypingDataBoaCtd", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        typeId,
                        typeIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        typingTime,
                        typingTimeSpecified,
                        keystroke,
                        keystrokeSpecified,
                        descTypingLog,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void processTypingDataBoaCtdAsync(
                    string token, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    int typingTime, 
                    bool typingTimeSpecified, 
                    int keystroke, 
                    bool keystrokeSpecified, 
                    string descTypingLog, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified) {
            this.processTypingDataBoaCtdAsync(token, documentId, documentIdSpecified, batchId, batchIdSpecified, typeId, typeIdSpecified, batchTotalDocs, batchTotalDocsSpecified, workflowId, workflowIdSpecified, xml, documentHashXml, documentNumber, documentValue, documentValueSpecified, typingTime, typingTimeSpecified, keystroke, keystrokeSpecified, descTypingLog, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void processTypingDataBoaCtdAsync(
                    string token, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    int typingTime, 
                    bool typingTimeSpecified, 
                    int keystroke, 
                    bool keystrokeSpecified, 
                    string descTypingLog, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified, 
                    object userState) {
            if ((this.processTypingDataBoaCtdOperationCompleted == null)) {
                this.processTypingDataBoaCtdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessTypingDataBoaCtdOperationCompleted);
            }
            this.InvokeAsync("processTypingDataBoaCtd", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        typeId,
                        typeIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        typingTime,
                        typingTimeSpecified,
                        keystroke,
                        keystrokeSpecified,
                        descTypingLog,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.processTypingDataBoaCtdOperationCompleted, userState);
        }
        
        private void OnprocessTypingDataBoaCtdOperationCompleted(object arg) {
            if ((this.processTypingDataBoaCtdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.processTypingDataBoaCtdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void processOcrA(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int batchTotalDocs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchTotalDocsSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string xml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentHashXml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentNumber, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] decimal documentValue, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentValueSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("processOcrA", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void processOcrAAsync(
                    string token, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    long stationId, 
                    bool stationIdSpecified) {
            this.processOcrAAsync(token, usrId, usrIdSpecified, documentId, documentIdSpecified, batchId, batchIdSpecified, batchTotalDocs, batchTotalDocsSpecified, workflowId, workflowIdSpecified, xml, documentHashXml, documentNumber, documentValue, documentValueSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void processOcrAAsync(
                    string token, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    long stationId, 
                    bool stationIdSpecified, 
                    object userState) {
            if ((this.processOcrAOperationCompleted == null)) {
                this.processOcrAOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessOcrAOperationCompleted);
            }
            this.InvokeAsync("processOcrA", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        stationId,
                        stationIdSpecified}, this.processOcrAOperationCompleted, userState);
        }
        
        private void OnprocessOcrAOperationCompleted(object arg) {
            if ((this.processOcrACompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.processOcrACompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void approveTransInDiff3([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long transId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool transIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("approveTransInDiff3", new object[] {
                        token,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void approveTransInDiff3Async(string token, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.approveTransInDiff3Async(token, transId, transIdSpecified, workflowId, workflowIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void approveTransInDiff3Async(string token, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.approveTransInDiff3OperationCompleted == null)) {
                this.approveTransInDiff3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnapproveTransInDiff3OperationCompleted);
            }
            this.InvokeAsync("approveTransInDiff3", new object[] {
                        token,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.approveTransInDiff3OperationCompleted, userState);
        }
        
        private void OnapproveTransInDiff3OperationCompleted(object arg) {
            if ((this.approveTransInDiff3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.approveTransInDiff3Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void approveTransInApprove1([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long transId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool transIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("approveTransInApprove1", new object[] {
                        token,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void approveTransInApprove1Async(string token, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.approveTransInApprove1Async(token, transId, transIdSpecified, workflowId, workflowIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void approveTransInApprove1Async(string token, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.approveTransInApprove1OperationCompleted == null)) {
                this.approveTransInApprove1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnapproveTransInApprove1OperationCompleted);
            }
            this.InvokeAsync("approveTransInApprove1", new object[] {
                        token,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.approveTransInApprove1OperationCompleted, userState);
        }
        
        private void OnapproveTransInApprove1OperationCompleted(object arg) {
            if ((this.approveTransInApprove1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.approveTransInApprove1Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void processTypingValCtd(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long typeId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typeIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int batchTotalDocs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchTotalDocsSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string xml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentHashXml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentNumber, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] decimal documentValue, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentValueSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int typingTime, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typingTimeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int keystroke, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool keystrokeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string descTypingLog, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("processTypingValCtd", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        typeId,
                        typeIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        typingTime,
                        typingTimeSpecified,
                        keystroke,
                        keystrokeSpecified,
                        descTypingLog,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void processTypingValCtdAsync(
                    string token, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    int typingTime, 
                    bool typingTimeSpecified, 
                    int keystroke, 
                    bool keystrokeSpecified, 
                    string descTypingLog, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified) {
            this.processTypingValCtdAsync(token, documentId, documentIdSpecified, batchId, batchIdSpecified, typeId, typeIdSpecified, batchTotalDocs, batchTotalDocsSpecified, workflowId, workflowIdSpecified, xml, documentHashXml, documentNumber, documentValue, documentValueSpecified, typingTime, typingTimeSpecified, keystroke, keystrokeSpecified, descTypingLog, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void processTypingValCtdAsync(
                    string token, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    int typingTime, 
                    bool typingTimeSpecified, 
                    int keystroke, 
                    bool keystrokeSpecified, 
                    string descTypingLog, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified, 
                    object userState) {
            if ((this.processTypingValCtdOperationCompleted == null)) {
                this.processTypingValCtdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessTypingValCtdOperationCompleted);
            }
            this.InvokeAsync("processTypingValCtd", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        typeId,
                        typeIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        typingTime,
                        typingTimeSpecified,
                        keystroke,
                        keystrokeSpecified,
                        descTypingLog,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.processTypingValCtdOperationCompleted, userState);
        }
        
        private void OnprocessTypingValCtdOperationCompleted(object arg) {
            if ((this.processTypingValCtdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.processTypingValCtdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void processTypingCmc7Trunc(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long typeId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typeIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int batchTotalDocs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchTotalDocsSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string xml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentHashXml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentNumber, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] decimal documentValue, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentValueSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int typingTime, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typingTimeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int keystroke, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool keystrokeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string descTypingLog, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("processTypingCmc7Trunc", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        typeId,
                        typeIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        typingTime,
                        typingTimeSpecified,
                        keystroke,
                        keystrokeSpecified,
                        descTypingLog,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void processTypingCmc7TruncAsync(
                    string token, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    int typingTime, 
                    bool typingTimeSpecified, 
                    int keystroke, 
                    bool keystrokeSpecified, 
                    string descTypingLog, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified) {
            this.processTypingCmc7TruncAsync(token, documentId, documentIdSpecified, batchId, batchIdSpecified, typeId, typeIdSpecified, batchTotalDocs, batchTotalDocsSpecified, workflowId, workflowIdSpecified, xml, documentHashXml, documentNumber, documentValue, documentValueSpecified, typingTime, typingTimeSpecified, keystroke, keystrokeSpecified, descTypingLog, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void processTypingCmc7TruncAsync(
                    string token, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    int typingTime, 
                    bool typingTimeSpecified, 
                    int keystroke, 
                    bool keystrokeSpecified, 
                    string descTypingLog, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified, 
                    object userState) {
            if ((this.processTypingCmc7TruncOperationCompleted == null)) {
                this.processTypingCmc7TruncOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessTypingCmc7TruncOperationCompleted);
            }
            this.InvokeAsync("processTypingCmc7Trunc", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        typeId,
                        typeIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        typingTime,
                        typingTimeSpecified,
                        keystroke,
                        keystrokeSpecified,
                        descTypingLog,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.processTypingCmc7TruncOperationCompleted, userState);
        }
        
        private void OnprocessTypingCmc7TruncOperationCompleted(object arg) {
            if ((this.processTypingCmc7TruncCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.processTypingCmc7TruncCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void approveTransInApprove4([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long transId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool transIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("approveTransInApprove4", new object[] {
                        token,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void approveTransInApprove4Async(string token, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.approveTransInApprove4Async(token, transId, transIdSpecified, workflowId, workflowIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void approveTransInApprove4Async(string token, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.approveTransInApprove4OperationCompleted == null)) {
                this.approveTransInApprove4OperationCompleted = new System.Threading.SendOrPostCallback(this.OnapproveTransInApprove4OperationCompleted);
            }
            this.InvokeAsync("approveTransInApprove4", new object[] {
                        token,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.approveTransInApprove4OperationCompleted, userState);
        }
        
        private void OnapproveTransInApprove4OperationCompleted(object arg) {
            if ((this.approveTransInApprove4Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.approveTransInApprove4Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void markValSignManual([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long transId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool transIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("markValSignManual", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void markValSignManualAsync(string token, long documentId, bool documentIdSpecified, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.markValSignManualAsync(token, documentId, documentIdSpecified, transId, transIdSpecified, workflowId, workflowIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void markValSignManualAsync(string token, long documentId, bool documentIdSpecified, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.markValSignManualOperationCompleted == null)) {
                this.markValSignManualOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmarkValSignManualOperationCompleted);
            }
            this.InvokeAsync("markValSignManual", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.markValSignManualOperationCompleted, userState);
        }
        
        private void OnmarkValSignManualOperationCompleted(object arg) {
            if ((this.markValSignManualCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.markValSignManualCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void markTransInDiff2([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long transId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool transIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("markTransInDiff2", new object[] {
                        token,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void markTransInDiff2Async(string token, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.markTransInDiff2Async(token, transId, transIdSpecified, workflowId, workflowIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void markTransInDiff2Async(string token, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.markTransInDiff2OperationCompleted == null)) {
                this.markTransInDiff2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnmarkTransInDiff2OperationCompleted);
            }
            this.InvokeAsync("markTransInDiff2", new object[] {
                        token,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.markTransInDiff2OperationCompleted, userState);
        }
        
        private void OnmarkTransInDiff2OperationCompleted(object arg) {
            if ((this.markTransInDiff2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.markTransInDiff2Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void processTypingBorderoTrunc(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long typeId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typeIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int batchTotalDocs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchTotalDocsSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string xml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentHashXml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentNumber, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] decimal documentValue, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentValueSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int typingTime, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typingTimeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int keystroke, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool keystrokeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string descTypingLog, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("processTypingBorderoTrunc", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        typeId,
                        typeIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        typingTime,
                        typingTimeSpecified,
                        keystroke,
                        keystrokeSpecified,
                        descTypingLog,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void processTypingBorderoTruncAsync(
                    string token, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    int typingTime, 
                    bool typingTimeSpecified, 
                    int keystroke, 
                    bool keystrokeSpecified, 
                    string descTypingLog, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified) {
            this.processTypingBorderoTruncAsync(token, documentId, documentIdSpecified, batchId, batchIdSpecified, typeId, typeIdSpecified, batchTotalDocs, batchTotalDocsSpecified, workflowId, workflowIdSpecified, xml, documentHashXml, documentNumber, documentValue, documentValueSpecified, typingTime, typingTimeSpecified, keystroke, keystrokeSpecified, descTypingLog, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void processTypingBorderoTruncAsync(
                    string token, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    int typingTime, 
                    bool typingTimeSpecified, 
                    int keystroke, 
                    bool keystrokeSpecified, 
                    string descTypingLog, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified, 
                    object userState) {
            if ((this.processTypingBorderoTruncOperationCompleted == null)) {
                this.processTypingBorderoTruncOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessTypingBorderoTruncOperationCompleted);
            }
            this.InvokeAsync("processTypingBorderoTrunc", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        typeId,
                        typeIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        typingTime,
                        typingTimeSpecified,
                        keystroke,
                        keystrokeSpecified,
                        descTypingLog,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.processTypingBorderoTruncOperationCompleted, userState);
        }
        
        private void OnprocessTypingBorderoTruncOperationCompleted(object arg) {
            if ((this.processTypingBorderoTruncCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.processTypingBorderoTruncCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void processClassify(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int batchTotalDocs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchTotalDocsSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long typeId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typeIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentXml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("processClassify", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        typeId,
                        typeIdSpecified,
                        documentXml,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void processClassifyAsync(
                    string token, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    string documentXml, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified) {
            this.processClassifyAsync(token, documentId, documentIdSpecified, batchId, batchIdSpecified, batchTotalDocs, batchTotalDocsSpecified, workflowId, workflowIdSpecified, typeId, typeIdSpecified, documentXml, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void processClassifyAsync(
                    string token, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    string documentXml, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified, 
                    object userState) {
            if ((this.processClassifyOperationCompleted == null)) {
                this.processClassifyOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessClassifyOperationCompleted);
            }
            this.InvokeAsync("processClassify", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        typeId,
                        typeIdSpecified,
                        documentXml,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.processClassifyOperationCompleted, userState);
        }
        
        private void OnprocessClassifyOperationCompleted(object arg) {
            if ((this.processClassifyCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.processClassifyCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void processDoubleTypingValCtd(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long typeId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typeIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int batchTotalDocs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchTotalDocsSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string xml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentHashXml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentNumber, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] decimal documentValue, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentValueSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int typingTime, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typingTimeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int keystroke, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool keystrokeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string descTypingLog, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("processDoubleTypingValCtd", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        typeId,
                        typeIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        typingTime,
                        typingTimeSpecified,
                        keystroke,
                        keystrokeSpecified,
                        descTypingLog,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void processDoubleTypingValCtdAsync(
                    string token, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    int typingTime, 
                    bool typingTimeSpecified, 
                    int keystroke, 
                    bool keystrokeSpecified, 
                    string descTypingLog, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified) {
            this.processDoubleTypingValCtdAsync(token, documentId, documentIdSpecified, batchId, batchIdSpecified, typeId, typeIdSpecified, batchTotalDocs, batchTotalDocsSpecified, workflowId, workflowIdSpecified, xml, documentHashXml, documentNumber, documentValue, documentValueSpecified, typingTime, typingTimeSpecified, keystroke, keystrokeSpecified, descTypingLog, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void processDoubleTypingValCtdAsync(
                    string token, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    int typingTime, 
                    bool typingTimeSpecified, 
                    int keystroke, 
                    bool keystrokeSpecified, 
                    string descTypingLog, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified, 
                    object userState) {
            if ((this.processDoubleTypingValCtdOperationCompleted == null)) {
                this.processDoubleTypingValCtdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessDoubleTypingValCtdOperationCompleted);
            }
            this.InvokeAsync("processDoubleTypingValCtd", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        typeId,
                        typeIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        typingTime,
                        typingTimeSpecified,
                        keystroke,
                        keystrokeSpecified,
                        descTypingLog,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.processDoubleTypingValCtdOperationCompleted, userState);
        }
        
        private void OnprocessDoubleTypingValCtdOperationCompleted(object arg) {
            if ((this.processDoubleTypingValCtdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.processDoubleTypingValCtdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void processTypingBorderoCtd(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long typeId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typeIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int batchTotalDocs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchTotalDocsSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string xml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentHashXml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentNumber, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] decimal documentValue, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentValueSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int typingTime, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typingTimeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int keystroke, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool keystrokeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string descTypingLog, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("processTypingBorderoCtd", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        typeId,
                        typeIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        typingTime,
                        typingTimeSpecified,
                        keystroke,
                        keystrokeSpecified,
                        descTypingLog,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void processTypingBorderoCtdAsync(
                    string token, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    int typingTime, 
                    bool typingTimeSpecified, 
                    int keystroke, 
                    bool keystrokeSpecified, 
                    string descTypingLog, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified) {
            this.processTypingBorderoCtdAsync(token, documentId, documentIdSpecified, batchId, batchIdSpecified, typeId, typeIdSpecified, batchTotalDocs, batchTotalDocsSpecified, workflowId, workflowIdSpecified, xml, documentHashXml, documentNumber, documentValue, documentValueSpecified, typingTime, typingTimeSpecified, keystroke, keystrokeSpecified, descTypingLog, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void processTypingBorderoCtdAsync(
                    string token, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    int typingTime, 
                    bool typingTimeSpecified, 
                    int keystroke, 
                    bool keystrokeSpecified, 
                    string descTypingLog, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified, 
                    object userState) {
            if ((this.processTypingBorderoCtdOperationCompleted == null)) {
                this.processTypingBorderoCtdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessTypingBorderoCtdOperationCompleted);
            }
            this.InvokeAsync("processTypingBorderoCtd", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        typeId,
                        typeIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        typingTime,
                        typingTimeSpecified,
                        keystroke,
                        keystrokeSpecified,
                        descTypingLog,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.processTypingBorderoCtdOperationCompleted, userState);
        }
        
        private void OnprocessTypingBorderoCtdOperationCompleted(object arg) {
            if ((this.processTypingBorderoCtdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.processTypingBorderoCtdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void approveTransInDiff1([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long transId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool transIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("approveTransInDiff1", new object[] {
                        token,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void approveTransInDiff1Async(string token, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.approveTransInDiff1Async(token, transId, transIdSpecified, workflowId, workflowIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void approveTransInDiff1Async(string token, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.approveTransInDiff1OperationCompleted == null)) {
                this.approveTransInDiff1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnapproveTransInDiff1OperationCompleted);
            }
            this.InvokeAsync("approveTransInDiff1", new object[] {
                        token,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.approveTransInDiff1OperationCompleted, userState);
        }
        
        private void OnapproveTransInDiff1OperationCompleted(object arg) {
            if ((this.approveTransInDiff1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.approveTransInDiff1Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void processDoubleTypingDataBoaCtd(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long typeId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typeIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int batchTotalDocs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchTotalDocsSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string xml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentHashXml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentNumber, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] decimal documentValue, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentValueSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int typingTime, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typingTimeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int keystroke, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool keystrokeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string descTypingLog, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("processDoubleTypingDataBoaCtd", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        typeId,
                        typeIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        typingTime,
                        typingTimeSpecified,
                        keystroke,
                        keystrokeSpecified,
                        descTypingLog,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void processDoubleTypingDataBoaCtdAsync(
                    string token, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    int typingTime, 
                    bool typingTimeSpecified, 
                    int keystroke, 
                    bool keystrokeSpecified, 
                    string descTypingLog, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified) {
            this.processDoubleTypingDataBoaCtdAsync(token, documentId, documentIdSpecified, batchId, batchIdSpecified, typeId, typeIdSpecified, batchTotalDocs, batchTotalDocsSpecified, workflowId, workflowIdSpecified, xml, documentHashXml, documentNumber, documentValue, documentValueSpecified, typingTime, typingTimeSpecified, keystroke, keystrokeSpecified, descTypingLog, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void processDoubleTypingDataBoaCtdAsync(
                    string token, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    int typingTime, 
                    bool typingTimeSpecified, 
                    int keystroke, 
                    bool keystrokeSpecified, 
                    string descTypingLog, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified, 
                    object userState) {
            if ((this.processDoubleTypingDataBoaCtdOperationCompleted == null)) {
                this.processDoubleTypingDataBoaCtdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessDoubleTypingDataBoaCtdOperationCompleted);
            }
            this.InvokeAsync("processDoubleTypingDataBoaCtd", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        typeId,
                        typeIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        typingTime,
                        typingTimeSpecified,
                        keystroke,
                        keystrokeSpecified,
                        descTypingLog,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.processDoubleTypingDataBoaCtdOperationCompleted, userState);
        }
        
        private void OnprocessDoubleTypingDataBoaCtdOperationCompleted(object arg) {
            if ((this.processDoubleTypingDataBoaCtdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.processDoubleTypingDataBoaCtdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void markTransInDiff1([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long transId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool transIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("markTransInDiff1", new object[] {
                        token,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void markTransInDiff1Async(string token, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.markTransInDiff1Async(token, transId, transIdSpecified, workflowId, workflowIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void markTransInDiff1Async(string token, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.markTransInDiff1OperationCompleted == null)) {
                this.markTransInDiff1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnmarkTransInDiff1OperationCompleted);
            }
            this.InvokeAsync("markTransInDiff1", new object[] {
                        token,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.markTransInDiff1OperationCompleted, userState);
        }
        
        private void OnmarkTransInDiff1OperationCompleted(object arg) {
            if ((this.markTransInDiff1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.markTransInDiff1Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void processTypingValTrunc(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long typeId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typeIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int batchTotalDocs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchTotalDocsSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string xml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentHashXml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentNumber, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] decimal documentValue, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentValueSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int typingTime, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typingTimeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int keystroke, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool keystrokeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string descTypingLog, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("processTypingValTrunc", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        typeId,
                        typeIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        typingTime,
                        typingTimeSpecified,
                        keystroke,
                        keystrokeSpecified,
                        descTypingLog,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void processTypingValTruncAsync(
                    string token, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    int typingTime, 
                    bool typingTimeSpecified, 
                    int keystroke, 
                    bool keystrokeSpecified, 
                    string descTypingLog, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified) {
            this.processTypingValTruncAsync(token, documentId, documentIdSpecified, batchId, batchIdSpecified, typeId, typeIdSpecified, batchTotalDocs, batchTotalDocsSpecified, workflowId, workflowIdSpecified, xml, documentHashXml, documentNumber, documentValue, documentValueSpecified, typingTime, typingTimeSpecified, keystroke, keystrokeSpecified, descTypingLog, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void processTypingValTruncAsync(
                    string token, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    int typingTime, 
                    bool typingTimeSpecified, 
                    int keystroke, 
                    bool keystrokeSpecified, 
                    string descTypingLog, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified, 
                    object userState) {
            if ((this.processTypingValTruncOperationCompleted == null)) {
                this.processTypingValTruncOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessTypingValTruncOperationCompleted);
            }
            this.InvokeAsync("processTypingValTrunc", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        typeId,
                        typeIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        typingTime,
                        typingTimeSpecified,
                        keystroke,
                        keystrokeSpecified,
                        descTypingLog,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.processTypingValTruncOperationCompleted, userState);
        }
        
        private void OnprocessTypingValTruncOperationCompleted(object arg) {
            if ((this.processTypingValTruncCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.processTypingValTruncCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void approveValSignManual([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long transId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool transIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("approveValSignManual", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void approveValSignManualAsync(string token, long documentId, bool documentIdSpecified, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.approveValSignManualAsync(token, documentId, documentIdSpecified, transId, transIdSpecified, workflowId, workflowIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void approveValSignManualAsync(string token, long documentId, bool documentIdSpecified, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.approveValSignManualOperationCompleted == null)) {
                this.approveValSignManualOperationCompleted = new System.Threading.SendOrPostCallback(this.OnapproveValSignManualOperationCompleted);
            }
            this.InvokeAsync("approveValSignManual", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.approveValSignManualOperationCompleted, userState);
        }
        
        private void OnapproveValSignManualOperationCompleted(object arg) {
            if ((this.approveValSignManualCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.approveValSignManualCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void approveForm([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long transId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool transIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long queueId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool queueIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("approveForm", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        queueId,
                        queueIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void approveFormAsync(string token, long documentId, bool documentIdSpecified, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long queueId, bool queueIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.approveFormAsync(token, documentId, documentIdSpecified, transId, transIdSpecified, workflowId, workflowIdSpecified, queueId, queueIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void approveFormAsync(string token, long documentId, bool documentIdSpecified, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long queueId, bool queueIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.approveFormOperationCompleted == null)) {
                this.approveFormOperationCompleted = new System.Threading.SendOrPostCallback(this.OnapproveFormOperationCompleted);
            }
            this.InvokeAsync("approveForm", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        queueId,
                        queueIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.approveFormOperationCompleted, userState);
        }
        
        private void OnapproveFormOperationCompleted(object arg) {
            if ((this.approveFormCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.approveFormCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void markForm([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long transId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool transIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long queueId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool queueIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("markForm", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        queueId,
                        queueIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void markFormAsync(string token, long documentId, bool documentIdSpecified, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long queueId, bool queueIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.markFormAsync(token, documentId, documentIdSpecified, transId, transIdSpecified, workflowId, workflowIdSpecified, queueId, queueIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void markFormAsync(string token, long documentId, bool documentIdSpecified, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long queueId, bool queueIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.markFormOperationCompleted == null)) {
                this.markFormOperationCompleted = new System.Threading.SendOrPostCallback(this.OnmarkFormOperationCompleted);
            }
            this.InvokeAsync("markForm", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        queueId,
                        queueIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.markFormOperationCompleted, userState);
        }
        
        private void OnmarkFormOperationCompleted(object arg) {
            if ((this.markFormCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.markFormCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void approveValSignAuto([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long transId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool transIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("approveValSignAuto", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void approveValSignAutoAsync(string token, long documentId, bool documentIdSpecified, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.approveValSignAutoAsync(token, documentId, documentIdSpecified, transId, transIdSpecified, workflowId, workflowIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void approveValSignAutoAsync(string token, long documentId, bool documentIdSpecified, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.approveValSignAutoOperationCompleted == null)) {
                this.approveValSignAutoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnapproveValSignAutoOperationCompleted);
            }
            this.InvokeAsync("approveValSignAuto", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.approveValSignAutoOperationCompleted, userState);
        }
        
        private void OnapproveValSignAutoOperationCompleted(object arg) {
            if ((this.approveValSignAutoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.approveValSignAutoCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void processTypingCpfCnpjCtd(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long typeId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typeIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int batchTotalDocs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchTotalDocsSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string xml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentHashXml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentNumber, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] decimal documentValue, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentValueSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int typingTime, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typingTimeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int keystroke, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool keystrokeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string descTypingLog, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("processTypingCpfCnpjCtd", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        typeId,
                        typeIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        typingTime,
                        typingTimeSpecified,
                        keystroke,
                        keystrokeSpecified,
                        descTypingLog,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void processTypingCpfCnpjCtdAsync(
                    string token, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    int typingTime, 
                    bool typingTimeSpecified, 
                    int keystroke, 
                    bool keystrokeSpecified, 
                    string descTypingLog, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified) {
            this.processTypingCpfCnpjCtdAsync(token, documentId, documentIdSpecified, batchId, batchIdSpecified, typeId, typeIdSpecified, batchTotalDocs, batchTotalDocsSpecified, workflowId, workflowIdSpecified, xml, documentHashXml, documentNumber, documentValue, documentValueSpecified, typingTime, typingTimeSpecified, keystroke, keystrokeSpecified, descTypingLog, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void processTypingCpfCnpjCtdAsync(
                    string token, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    int typingTime, 
                    bool typingTimeSpecified, 
                    int keystroke, 
                    bool keystrokeSpecified, 
                    string descTypingLog, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified, 
                    object userState) {
            if ((this.processTypingCpfCnpjCtdOperationCompleted == null)) {
                this.processTypingCpfCnpjCtdOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessTypingCpfCnpjCtdOperationCompleted);
            }
            this.InvokeAsync("processTypingCpfCnpjCtd", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        typeId,
                        typeIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        typingTime,
                        typingTimeSpecified,
                        keystroke,
                        keystrokeSpecified,
                        descTypingLog,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.processTypingCpfCnpjCtdOperationCompleted, userState);
        }
        
        private void OnprocessTypingCpfCnpjCtdOperationCompleted(object arg) {
            if ((this.processTypingCpfCnpjCtdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.processTypingCpfCnpjCtdCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void markTransInApprove3([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long transId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool transIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("markTransInApprove3", new object[] {
                        token,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void markTransInApprove3Async(string token, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.markTransInApprove3Async(token, transId, transIdSpecified, workflowId, workflowIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void markTransInApprove3Async(string token, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.markTransInApprove3OperationCompleted == null)) {
                this.markTransInApprove3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnmarkTransInApprove3OperationCompleted);
            }
            this.InvokeAsync("markTransInApprove3", new object[] {
                        token,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.markTransInApprove3OperationCompleted, userState);
        }
        
        private void OnmarkTransInApprove3OperationCompleted(object arg) {
            if ((this.markTransInApprove3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.markTransInApprove3Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void approveTransInApprove3([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long transId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool transIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("approveTransInApprove3", new object[] {
                        token,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void approveTransInApprove3Async(string token, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.approveTransInApprove3Async(token, transId, transIdSpecified, workflowId, workflowIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void approveTransInApprove3Async(string token, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.approveTransInApprove3OperationCompleted == null)) {
                this.approveTransInApprove3OperationCompleted = new System.Threading.SendOrPostCallback(this.OnapproveTransInApprove3OperationCompleted);
            }
            this.InvokeAsync("approveTransInApprove3", new object[] {
                        token,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.approveTransInApprove3OperationCompleted, userState);
        }
        
        private void OnapproveTransInApprove3OperationCompleted(object arg) {
            if ((this.approveTransInApprove3Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.approveTransInApprove3Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void approveTransInApprove2([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long transId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool transIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("approveTransInApprove2", new object[] {
                        token,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void approveTransInApprove2Async(string token, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.approveTransInApprove2Async(token, transId, transIdSpecified, workflowId, workflowIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void approveTransInApprove2Async(string token, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.approveTransInApprove2OperationCompleted == null)) {
                this.approveTransInApprove2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnapproveTransInApprove2OperationCompleted);
            }
            this.InvokeAsync("approveTransInApprove2", new object[] {
                        token,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.approveTransInApprove2OperationCompleted, userState);
        }
        
        private void OnapproveTransInApprove2OperationCompleted(object arg) {
            if ((this.approveTransInApprove2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.approveTransInApprove2Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void approveTransInDiff2([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long transId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool transIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("approveTransInDiff2", new object[] {
                        token,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void approveTransInDiff2Async(string token, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.approveTransInDiff2Async(token, transId, transIdSpecified, workflowId, workflowIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void approveTransInDiff2Async(string token, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.approveTransInDiff2OperationCompleted == null)) {
                this.approveTransInDiff2OperationCompleted = new System.Threading.SendOrPostCallback(this.OnapproveTransInDiff2OperationCompleted);
            }
            this.InvokeAsync("approveTransInDiff2", new object[] {
                        token,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.approveTransInDiff2OperationCompleted, userState);
        }
        
        private void OnapproveTransInDiff2OperationCompleted(object arg) {
            if ((this.approveTransInDiff2Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.approveTransInDiff2Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void processTyping(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long typeId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typeIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int batchTotalDocs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchTotalDocsSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string xml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentHashXml, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentNumber, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] decimal documentValue, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentValueSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int typingTime, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typingTimeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int keystroke, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool keystrokeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string descTypingLog, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("processTyping", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        typeId,
                        typeIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        typingTime,
                        typingTimeSpecified,
                        keystroke,
                        keystrokeSpecified,
                        descTypingLog,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void processTypingAsync(
                    string token, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    int typingTime, 
                    bool typingTimeSpecified, 
                    int keystroke, 
                    bool keystrokeSpecified, 
                    string descTypingLog, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified) {
            this.processTypingAsync(token, documentId, documentIdSpecified, batchId, batchIdSpecified, typeId, typeIdSpecified, batchTotalDocs, batchTotalDocsSpecified, workflowId, workflowIdSpecified, xml, documentHashXml, documentNumber, documentValue, documentValueSpecified, typingTime, typingTimeSpecified, keystroke, keystrokeSpecified, descTypingLog, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void processTypingAsync(
                    string token, 
                    long documentId, 
                    bool documentIdSpecified, 
                    long batchId, 
                    bool batchIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    int batchTotalDocs, 
                    bool batchTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string xml, 
                    string documentHashXml, 
                    string documentNumber, 
                    decimal documentValue, 
                    bool documentValueSpecified, 
                    int typingTime, 
                    bool typingTimeSpecified, 
                    int keystroke, 
                    bool keystrokeSpecified, 
                    string descTypingLog, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified, 
                    object userState) {
            if ((this.processTypingOperationCompleted == null)) {
                this.processTypingOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessTypingOperationCompleted);
            }
            this.InvokeAsync("processTyping", new object[] {
                        token,
                        documentId,
                        documentIdSpecified,
                        batchId,
                        batchIdSpecified,
                        typeId,
                        typeIdSpecified,
                        batchTotalDocs,
                        batchTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        documentHashXml,
                        documentNumber,
                        documentValue,
                        documentValueSpecified,
                        typingTime,
                        typingTimeSpecified,
                        keystroke,
                        keystrokeSpecified,
                        descTypingLog,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.processTypingOperationCompleted, userState);
        }
        
        private void OnprocessTypingOperationCompleted(object arg) {
            if ((this.processTypingCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.processTypingCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void markTransInApprove1([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long transId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool transIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("markTransInApprove1", new object[] {
                        token,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void markTransInApprove1Async(string token, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.markTransInApprove1Async(token, transId, transIdSpecified, workflowId, workflowIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void markTransInApprove1Async(string token, long transId, bool transIdSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.markTransInApprove1OperationCompleted == null)) {
                this.markTransInApprove1OperationCompleted = new System.Threading.SendOrPostCallback(this.OnmarkTransInApprove1OperationCompleted);
            }
            this.InvokeAsync("markTransInApprove1", new object[] {
                        token,
                        transId,
                        transIdSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.markTransInApprove1OperationCompleted, userState);
        }
        
        private void OnmarkTransInApprove1OperationCompleted(object arg) {
            if ((this.markTransInApprove1Completed != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.markTransInApprove1Completed(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void processTypingCmc7CtdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void processIcrCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void markValSignAutoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void processTypingDataBoaCtdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void processOcrACompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void approveTransInDiff3CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void approveTransInApprove1CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void processTypingValCtdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void processTypingCmc7TruncCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void approveTransInApprove4CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void markValSignManualCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void markTransInDiff2CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void processTypingBorderoTruncCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void processClassifyCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void processDoubleTypingValCtdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void processTypingBorderoCtdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void approveTransInDiff1CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void processDoubleTypingDataBoaCtdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void markTransInDiff1CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void processTypingValTruncCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void approveValSignManualCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void approveFormCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void markFormCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void approveValSignAutoCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void processTypingCpfCnpjCtdCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void markTransInApprove3CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void approveTransInApprove3CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void approveTransInApprove2CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void approveTransInDiff2CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void processTypingCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void markTransInApprove1CompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591
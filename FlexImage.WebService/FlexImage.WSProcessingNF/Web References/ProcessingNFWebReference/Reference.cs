//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace FlexImage.WebService.ProcessingNFWebReference {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ProcessingNfServiceSoapBinding", Namespace="http://impl.service.flexps.flexdoc.com.br/")]
    public partial class ProcessingNfService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback processOcrOperationCompleted;
        
        private System.Threading.SendOrPostCallback processOcrFieldCadernetaOperationCompleted;
        
        private System.Threading.SendOrPostCallback processDoubleTypingLivroOperationCompleted;
        
        private System.Threading.SendOrPostCallback processDifferenceLivroOperationCompleted;
        
        private System.Threading.SendOrPostCallback processIndexOperationCompleted;
        
        private System.Threading.SendOrPostCallback reprocessBatchNfOperationCompleted;
        
        private System.Threading.SendOrPostCallback processPreIndexOperationCompleted;
        
        private System.Threading.SendOrPostCallback processTypingLivroOperationCompleted;
        
        private System.Threading.SendOrPostCallback processOcrWithTypeOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ProcessingNfService() {
            this.Url = global::FlexImage.WebService.Properties.Settings.Default.FlexImage_WSProcessingNF_ProcessingNFWebReference_RepositoryService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event processOcrCompletedEventHandler processOcrCompleted;
        
        /// <remarks/>
        public event processOcrFieldCadernetaCompletedEventHandler processOcrFieldCadernetaCompleted;
        
        /// <remarks/>
        public event processDoubleTypingLivroCompletedEventHandler processDoubleTypingLivroCompleted;
        
        /// <remarks/>
        public event processDifferenceLivroCompletedEventHandler processDifferenceLivroCompleted;
        
        /// <remarks/>
        public event processIndexCompletedEventHandler processIndexCompleted;
        
        /// <remarks/>
        public event reprocessBatchNfCompletedEventHandler reprocessBatchNfCompleted;
        
        /// <remarks/>
        public event processPreIndexCompletedEventHandler processPreIndexCompleted;
        
        /// <remarks/>
        public event processTypingLivroCompletedEventHandler processTypingLivroCompleted;
        
        /// <remarks/>
        public event processOcrWithTypeCompletedEventHandler processOcrWithTypeCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void processOcr(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentNfId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentNfIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchNfId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int batchNfTotalDocs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfTotalDocsSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string fileType, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int fileSize, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool fileSizeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string hash, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("processOcr", new object[] {
                        token,
                        documentNfId,
                        documentNfIdSpecified,
                        batchNfId,
                        batchNfIdSpecified,
                        batchNfTotalDocs,
                        batchNfTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        fileType,
                        fileSize,
                        fileSizeSpecified,
                        hash,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void processOcrAsync(
                    string token, 
                    long documentNfId, 
                    bool documentNfIdSpecified, 
                    long batchNfId, 
                    bool batchNfIdSpecified, 
                    int batchNfTotalDocs, 
                    bool batchNfTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string fileType, 
                    int fileSize, 
                    bool fileSizeSpecified, 
                    string hash, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified) {
            this.processOcrAsync(token, documentNfId, documentNfIdSpecified, batchNfId, batchNfIdSpecified, batchNfTotalDocs, batchNfTotalDocsSpecified, workflowId, workflowIdSpecified, fileType, fileSize, fileSizeSpecified, hash, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void processOcrAsync(
                    string token, 
                    long documentNfId, 
                    bool documentNfIdSpecified, 
                    long batchNfId, 
                    bool batchNfIdSpecified, 
                    int batchNfTotalDocs, 
                    bool batchNfTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string fileType, 
                    int fileSize, 
                    bool fileSizeSpecified, 
                    string hash, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified, 
                    object userState) {
            if ((this.processOcrOperationCompleted == null)) {
                this.processOcrOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessOcrOperationCompleted);
            }
            this.InvokeAsync("processOcr", new object[] {
                        token,
                        documentNfId,
                        documentNfIdSpecified,
                        batchNfId,
                        batchNfIdSpecified,
                        batchNfTotalDocs,
                        batchNfTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        fileType,
                        fileSize,
                        fileSizeSpecified,
                        hash,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.processOcrOperationCompleted, userState);
        }
        
        private void OnprocessOcrOperationCompleted(object arg) {
            if ((this.processOcrCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.processOcrCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void processOcrFieldCaderneta([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentNfIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int batchNfTotalDocs, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfTotalDocsSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string xml, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("processOcrFieldCaderneta", new object[] {
                        token,
                        documentNfId,
                        documentNfIdSpecified,
                        batchNfId,
                        batchNfIdSpecified,
                        batchNfTotalDocs,
                        batchNfTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void processOcrFieldCadernetaAsync(string token, long documentNfId, bool documentNfIdSpecified, long batchNfId, bool batchNfIdSpecified, int batchNfTotalDocs, bool batchNfTotalDocsSpecified, long workflowId, bool workflowIdSpecified, string xml, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.processOcrFieldCadernetaAsync(token, documentNfId, documentNfIdSpecified, batchNfId, batchNfIdSpecified, batchNfTotalDocs, batchNfTotalDocsSpecified, workflowId, workflowIdSpecified, xml, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void processOcrFieldCadernetaAsync(string token, long documentNfId, bool documentNfIdSpecified, long batchNfId, bool batchNfIdSpecified, int batchNfTotalDocs, bool batchNfTotalDocsSpecified, long workflowId, bool workflowIdSpecified, string xml, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.processOcrFieldCadernetaOperationCompleted == null)) {
                this.processOcrFieldCadernetaOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessOcrFieldCadernetaOperationCompleted);
            }
            this.InvokeAsync("processOcrFieldCaderneta", new object[] {
                        token,
                        documentNfId,
                        documentNfIdSpecified,
                        batchNfId,
                        batchNfIdSpecified,
                        batchNfTotalDocs,
                        batchNfTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        xml,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.processOcrFieldCadernetaOperationCompleted, userState);
        }
        
        private void OnprocessOcrFieldCadernetaOperationCompleted(object arg) {
            if ((this.processOcrFieldCadernetaCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.processOcrFieldCadernetaCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void processDoubleTypingLivro([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int batchNfTotalDocs, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfTotalDocsSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentNfIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentNfXmlTyping, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("processDoubleTypingLivro", new object[] {
                        token,
                        workflowId,
                        workflowIdSpecified,
                        batchNfId,
                        batchNfIdSpecified,
                        batchNfTotalDocs,
                        batchNfTotalDocsSpecified,
                        documentNfId,
                        documentNfIdSpecified,
                        documentNfXmlTyping,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void processDoubleTypingLivroAsync(string token, long workflowId, bool workflowIdSpecified, long batchNfId, bool batchNfIdSpecified, int batchNfTotalDocs, bool batchNfTotalDocsSpecified, long documentNfId, bool documentNfIdSpecified, string documentNfXmlTyping, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.processDoubleTypingLivroAsync(token, workflowId, workflowIdSpecified, batchNfId, batchNfIdSpecified, batchNfTotalDocs, batchNfTotalDocsSpecified, documentNfId, documentNfIdSpecified, documentNfXmlTyping, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void processDoubleTypingLivroAsync(string token, long workflowId, bool workflowIdSpecified, long batchNfId, bool batchNfIdSpecified, int batchNfTotalDocs, bool batchNfTotalDocsSpecified, long documentNfId, bool documentNfIdSpecified, string documentNfXmlTyping, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.processDoubleTypingLivroOperationCompleted == null)) {
                this.processDoubleTypingLivroOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessDoubleTypingLivroOperationCompleted);
            }
            this.InvokeAsync("processDoubleTypingLivro", new object[] {
                        token,
                        workflowId,
                        workflowIdSpecified,
                        batchNfId,
                        batchNfIdSpecified,
                        batchNfTotalDocs,
                        batchNfTotalDocsSpecified,
                        documentNfId,
                        documentNfIdSpecified,
                        documentNfXmlTyping,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.processDoubleTypingLivroOperationCompleted, userState);
        }
        
        private void OnprocessDoubleTypingLivroOperationCompleted(object arg) {
            if ((this.processDoubleTypingLivroCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.processDoubleTypingLivroCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void processDifferenceLivro([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int batchNfTotalDocs, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfTotalDocsSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentNfIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentNfXmlTyping, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("processDifferenceLivro", new object[] {
                        token,
                        workflowId,
                        workflowIdSpecified,
                        batchNfId,
                        batchNfIdSpecified,
                        batchNfTotalDocs,
                        batchNfTotalDocsSpecified,
                        documentNfId,
                        documentNfIdSpecified,
                        documentNfXmlTyping,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void processDifferenceLivroAsync(string token, long workflowId, bool workflowIdSpecified, long batchNfId, bool batchNfIdSpecified, int batchNfTotalDocs, bool batchNfTotalDocsSpecified, long documentNfId, bool documentNfIdSpecified, string documentNfXmlTyping, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.processDifferenceLivroAsync(token, workflowId, workflowIdSpecified, batchNfId, batchNfIdSpecified, batchNfTotalDocs, batchNfTotalDocsSpecified, documentNfId, documentNfIdSpecified, documentNfXmlTyping, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void processDifferenceLivroAsync(string token, long workflowId, bool workflowIdSpecified, long batchNfId, bool batchNfIdSpecified, int batchNfTotalDocs, bool batchNfTotalDocsSpecified, long documentNfId, bool documentNfIdSpecified, string documentNfXmlTyping, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.processDifferenceLivroOperationCompleted == null)) {
                this.processDifferenceLivroOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessDifferenceLivroOperationCompleted);
            }
            this.InvokeAsync("processDifferenceLivro", new object[] {
                        token,
                        workflowId,
                        workflowIdSpecified,
                        batchNfId,
                        batchNfIdSpecified,
                        batchNfTotalDocs,
                        batchNfTotalDocsSpecified,
                        documentNfId,
                        documentNfIdSpecified,
                        documentNfXmlTyping,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.processDifferenceLivroOperationCompleted, userState);
        }
        
        private void OnprocessDifferenceLivroOperationCompleted(object arg) {
            if ((this.processDifferenceLivroCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.processDifferenceLivroCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void processIndex(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentNfId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentNfIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long typeId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typeIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute("docKeyDtos", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] docKeyDto[] docKeyDtos, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchNfId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int batchNfTotalDocs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfTotalDocsSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("processIndex", new object[] {
                        token,
                        documentNfId,
                        documentNfIdSpecified,
                        typeId,
                        typeIdSpecified,
                        docKeyDtos,
                        batchNfId,
                        batchNfIdSpecified,
                        batchNfTotalDocs,
                        batchNfTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void processIndexAsync(
                    string token, 
                    long documentNfId, 
                    bool documentNfIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    docKeyDto[] docKeyDtos, 
                    long batchNfId, 
                    bool batchNfIdSpecified, 
                    int batchNfTotalDocs, 
                    bool batchNfTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified) {
            this.processIndexAsync(token, documentNfId, documentNfIdSpecified, typeId, typeIdSpecified, docKeyDtos, batchNfId, batchNfIdSpecified, batchNfTotalDocs, batchNfTotalDocsSpecified, workflowId, workflowIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void processIndexAsync(
                    string token, 
                    long documentNfId, 
                    bool documentNfIdSpecified, 
                    long typeId, 
                    bool typeIdSpecified, 
                    docKeyDto[] docKeyDtos, 
                    long batchNfId, 
                    bool batchNfIdSpecified, 
                    int batchNfTotalDocs, 
                    bool batchNfTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified, 
                    object userState) {
            if ((this.processIndexOperationCompleted == null)) {
                this.processIndexOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessIndexOperationCompleted);
            }
            this.InvokeAsync("processIndex", new object[] {
                        token,
                        documentNfId,
                        documentNfIdSpecified,
                        typeId,
                        typeIdSpecified,
                        docKeyDtos,
                        batchNfId,
                        batchNfIdSpecified,
                        batchNfTotalDocs,
                        batchNfTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.processIndexOperationCompleted, userState);
        }
        
        private void OnprocessIndexOperationCompleted(object arg) {
            if ((this.processIndexCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.processIndexCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void reprocessBatchNf([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentNfIdSpecified) {
            this.Invoke("reprocessBatchNf", new object[] {
                        batchNfId,
                        batchNfIdSpecified,
                        documentNfId,
                        documentNfIdSpecified});
        }
        
        /// <remarks/>
        public void reprocessBatchNfAsync(long batchNfId, bool batchNfIdSpecified, long documentNfId, bool documentNfIdSpecified) {
            this.reprocessBatchNfAsync(batchNfId, batchNfIdSpecified, documentNfId, documentNfIdSpecified, null);
        }
        
        /// <remarks/>
        public void reprocessBatchNfAsync(long batchNfId, bool batchNfIdSpecified, long documentNfId, bool documentNfIdSpecified, object userState) {
            if ((this.reprocessBatchNfOperationCompleted == null)) {
                this.reprocessBatchNfOperationCompleted = new System.Threading.SendOrPostCallback(this.OnreprocessBatchNfOperationCompleted);
            }
            this.InvokeAsync("reprocessBatchNf", new object[] {
                        batchNfId,
                        batchNfIdSpecified,
                        documentNfId,
                        documentNfIdSpecified}, this.reprocessBatchNfOperationCompleted, userState);
        }
        
        private void OnreprocessBatchNfOperationCompleted(object arg) {
            if ((this.reprocessBatchNfCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.reprocessBatchNfCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void processPreIndex([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentNfIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long preDocumentId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool preDocumentIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int batchNfTotalDocs, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfTotalDocsSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("processPreIndex", new object[] {
                        token,
                        documentNfId,
                        documentNfIdSpecified,
                        preDocumentId,
                        preDocumentIdSpecified,
                        batchNfId,
                        batchNfIdSpecified,
                        batchNfTotalDocs,
                        batchNfTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void processPreIndexAsync(string token, long documentNfId, bool documentNfIdSpecified, long preDocumentId, bool preDocumentIdSpecified, long batchNfId, bool batchNfIdSpecified, int batchNfTotalDocs, bool batchNfTotalDocsSpecified, long workflowId, bool workflowIdSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.processPreIndexAsync(token, documentNfId, documentNfIdSpecified, preDocumentId, preDocumentIdSpecified, batchNfId, batchNfIdSpecified, batchNfTotalDocs, batchNfTotalDocsSpecified, workflowId, workflowIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void processPreIndexAsync(
                    string token, 
                    long documentNfId, 
                    bool documentNfIdSpecified, 
                    long preDocumentId, 
                    bool preDocumentIdSpecified, 
                    long batchNfId, 
                    bool batchNfIdSpecified, 
                    int batchNfTotalDocs, 
                    bool batchNfTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified, 
                    object userState) {
            if ((this.processPreIndexOperationCompleted == null)) {
                this.processPreIndexOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessPreIndexOperationCompleted);
            }
            this.InvokeAsync("processPreIndex", new object[] {
                        token,
                        documentNfId,
                        documentNfIdSpecified,
                        preDocumentId,
                        preDocumentIdSpecified,
                        batchNfId,
                        batchNfIdSpecified,
                        batchNfTotalDocs,
                        batchNfTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.processPreIndexOperationCompleted, userState);
        }
        
        private void OnprocessPreIndexOperationCompleted(object arg) {
            if ((this.processPreIndexCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.processPreIndexCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void processTypingLivro([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int batchNfTotalDocs, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfTotalDocsSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentNfId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentNfIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string documentNfXmlTyping, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("processTypingLivro", new object[] {
                        token,
                        workflowId,
                        workflowIdSpecified,
                        batchNfId,
                        batchNfIdSpecified,
                        batchNfTotalDocs,
                        batchNfTotalDocsSpecified,
                        documentNfId,
                        documentNfIdSpecified,
                        documentNfXmlTyping,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void processTypingLivroAsync(string token, long workflowId, bool workflowIdSpecified, long batchNfId, bool batchNfIdSpecified, int batchNfTotalDocs, bool batchNfTotalDocsSpecified, long documentNfId, bool documentNfIdSpecified, string documentNfXmlTyping, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.processTypingLivroAsync(token, workflowId, workflowIdSpecified, batchNfId, batchNfIdSpecified, batchNfTotalDocs, batchNfTotalDocsSpecified, documentNfId, documentNfIdSpecified, documentNfXmlTyping, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void processTypingLivroAsync(string token, long workflowId, bool workflowIdSpecified, long batchNfId, bool batchNfIdSpecified, int batchNfTotalDocs, bool batchNfTotalDocsSpecified, long documentNfId, bool documentNfIdSpecified, string documentNfXmlTyping, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.processTypingLivroOperationCompleted == null)) {
                this.processTypingLivroOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessTypingLivroOperationCompleted);
            }
            this.InvokeAsync("processTypingLivro", new object[] {
                        token,
                        workflowId,
                        workflowIdSpecified,
                        batchNfId,
                        batchNfIdSpecified,
                        batchNfTotalDocs,
                        batchNfTotalDocsSpecified,
                        documentNfId,
                        documentNfIdSpecified,
                        documentNfXmlTyping,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.processTypingLivroOperationCompleted, userState);
        }
        
        private void OnprocessTypingLivroOperationCompleted(object arg) {
            if ((this.processTypingLivroCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.processTypingLivroCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void processOcrWithType(
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long documentNfId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool documentNfIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long batchNfId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int batchNfTotalDocs, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool batchNfTotalDocsSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long workflowId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool workflowIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string fileType, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] int fileSize, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool fileSizeSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string hash, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long typeId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool typeIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, 
                    [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("processOcrWithType", new object[] {
                        token,
                        documentNfId,
                        documentNfIdSpecified,
                        batchNfId,
                        batchNfIdSpecified,
                        batchNfTotalDocs,
                        batchNfTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        fileType,
                        fileSize,
                        fileSizeSpecified,
                        hash,
                        typeId,
                        typeIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void processOcrWithTypeAsync(
                    string token, 
                    long documentNfId, 
                    bool documentNfIdSpecified, 
                    long batchNfId, 
                    bool batchNfIdSpecified, 
                    int batchNfTotalDocs, 
                    bool batchNfTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string fileType, 
                    int fileSize, 
                    bool fileSizeSpecified, 
                    string hash, 
                    long typeId, 
                    bool typeIdSpecified, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified) {
            this.processOcrWithTypeAsync(token, documentNfId, documentNfIdSpecified, batchNfId, batchNfIdSpecified, batchNfTotalDocs, batchNfTotalDocsSpecified, workflowId, workflowIdSpecified, fileType, fileSize, fileSizeSpecified, hash, typeId, typeIdSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void processOcrWithTypeAsync(
                    string token, 
                    long documentNfId, 
                    bool documentNfIdSpecified, 
                    long batchNfId, 
                    bool batchNfIdSpecified, 
                    int batchNfTotalDocs, 
                    bool batchNfTotalDocsSpecified, 
                    long workflowId, 
                    bool workflowIdSpecified, 
                    string fileType, 
                    int fileSize, 
                    bool fileSizeSpecified, 
                    string hash, 
                    long typeId, 
                    bool typeIdSpecified, 
                    long usrId, 
                    bool usrIdSpecified, 
                    long stationId, 
                    bool stationIdSpecified, 
                    object userState) {
            if ((this.processOcrWithTypeOperationCompleted == null)) {
                this.processOcrWithTypeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnprocessOcrWithTypeOperationCompleted);
            }
            this.InvokeAsync("processOcrWithType", new object[] {
                        token,
                        documentNfId,
                        documentNfIdSpecified,
                        batchNfId,
                        batchNfIdSpecified,
                        batchNfTotalDocs,
                        batchNfTotalDocsSpecified,
                        workflowId,
                        workflowIdSpecified,
                        fileType,
                        fileSize,
                        fileSizeSpecified,
                        hash,
                        typeId,
                        typeIdSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.processOcrWithTypeOperationCompleted, userState);
        }
        
        private void OnprocessOcrWithTypeOperationCompleted(object arg) {
            if ((this.processOcrWithTypeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.processOcrWithTypeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.6.79.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.flexps.flexdoc.com.br/")]
    public partial class docKeyDto {
        
        private long batchNfIdField;
        
        private bool batchNfIdFieldSpecified;
        
        private long docKeyIdField;
        
        private bool docKeyIdFieldSpecified;
        
        private int docKeyOcrScoreField;
        
        private bool docKeyOcrScoreFieldSpecified;
        
        private string docKeyOcrTextField;
        
        private string docKeyValueField;
        
        private long documentNfIdField;
        
        private bool documentNfIdFieldSpecified;
        
        private long keyDefIdField;
        
        private bool keyDefIdFieldSpecified;
        
        private string keyDefNameField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long batchNfId {
            get {
                return this.batchNfIdField;
            }
            set {
                this.batchNfIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool batchNfIdSpecified {
            get {
                return this.batchNfIdFieldSpecified;
            }
            set {
                this.batchNfIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long docKeyId {
            get {
                return this.docKeyIdField;
            }
            set {
                this.docKeyIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool docKeyIdSpecified {
            get {
                return this.docKeyIdFieldSpecified;
            }
            set {
                this.docKeyIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int docKeyOcrScore {
            get {
                return this.docKeyOcrScoreField;
            }
            set {
                this.docKeyOcrScoreField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool docKeyOcrScoreSpecified {
            get {
                return this.docKeyOcrScoreFieldSpecified;
            }
            set {
                this.docKeyOcrScoreFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string docKeyOcrText {
            get {
                return this.docKeyOcrTextField;
            }
            set {
                this.docKeyOcrTextField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string docKeyValue {
            get {
                return this.docKeyValueField;
            }
            set {
                this.docKeyValueField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long documentNfId {
            get {
                return this.documentNfIdField;
            }
            set {
                this.documentNfIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool documentNfIdSpecified {
            get {
                return this.documentNfIdFieldSpecified;
            }
            set {
                this.documentNfIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long keyDefId {
            get {
                return this.keyDefIdField;
            }
            set {
                this.keyDefIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool keyDefIdSpecified {
            get {
                return this.keyDefIdFieldSpecified;
            }
            set {
                this.keyDefIdFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string keyDefName {
            get {
                return this.keyDefNameField;
            }
            set {
                this.keyDefNameField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void processOcrCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void processOcrFieldCadernetaCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void processDoubleTypingLivroCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void processDifferenceLivroCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void processIndexCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void reprocessBatchNfCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void processPreIndexCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void processTypingLivroCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.6.79.0")]
    public delegate void processOcrWithTypeCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
}

#pragma warning restore 1591
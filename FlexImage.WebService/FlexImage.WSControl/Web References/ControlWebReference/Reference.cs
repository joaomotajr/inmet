//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.5466
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.5466.
// 
#pragma warning disable 1591

namespace FlexImage.WebService.ControlWebReference {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="ControlServiceSoapBinding", Namespace="http://impl.service.flexps.flexdoc.com.br/")]
    public partial class ControlService : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback checkSitesOpenedOperationCompleted;
        
        private System.Threading.SendOrPostCallback findAllControlOperationCompleted;
        
        private System.Threading.SendOrPostCallback closeControlOperationCompleted;
        
        private System.Threading.SendOrPostCallback getOpenedControlDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback openSiteControlOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSiteControlBySiteIdOperationCompleted;
        
        private System.Threading.SendOrPostCallback getControlOperationCompleted;
        
        private System.Threading.SendOrPostCallback getCurrentControlOperationCompleted;
        
        private System.Threading.SendOrPostCallback getControlSuggestedCloseDayOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkSiteMovOperationCompleted;
        
        private System.Threading.SendOrPostCallback openControlOperationCompleted;
        
        private System.Threading.SendOrPostCallback checkControlOperationCompleted;
        
        private System.Threading.SendOrPostCallback getSiteControlNextOpenDayOperationCompleted;
        
        private System.Threading.SendOrPostCallback getControlNextOpenDayOperationCompleted;
        
        private System.Threading.SendOrPostCallback closeSiteControlOperationCompleted;
        
        private System.Threading.SendOrPostCallback findAllSiteControlOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public ControlService() {
            this.Url = global::FlexImage.WebService.Properties.Settings.Default.FlexImage_WSControl_ControlWebReference_ControlService;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event checkSitesOpenedCompletedEventHandler checkSitesOpenedCompleted;
        
        /// <remarks/>
        public event findAllControlCompletedEventHandler findAllControlCompleted;
        
        /// <remarks/>
        public event closeControlCompletedEventHandler closeControlCompleted;
        
        /// <remarks/>
        public event getOpenedControlDateCompletedEventHandler getOpenedControlDateCompleted;
        
        /// <remarks/>
        public event openSiteControlCompletedEventHandler openSiteControlCompleted;
        
        /// <remarks/>
        public event getSiteControlBySiteIdCompletedEventHandler getSiteControlBySiteIdCompleted;
        
        /// <remarks/>
        public event getControlCompletedEventHandler getControlCompleted;
        
        /// <remarks/>
        public event getCurrentControlCompletedEventHandler getCurrentControlCompleted;
        
        /// <remarks/>
        public event getControlSuggestedCloseDayCompletedEventHandler getControlSuggestedCloseDayCompleted;
        
        /// <remarks/>
        public event checkSiteMovCompletedEventHandler checkSiteMovCompleted;
        
        /// <remarks/>
        public event openControlCompletedEventHandler openControlCompleted;
        
        /// <remarks/>
        public event checkControlCompletedEventHandler checkControlCompleted;
        
        /// <remarks/>
        public event getSiteControlNextOpenDayCompletedEventHandler getSiteControlNextOpenDayCompleted;
        
        /// <remarks/>
        public event getControlNextOpenDayCompletedEventHandler getControlNextOpenDayCompleted;
        
        /// <remarks/>
        public event closeSiteControlCompletedEventHandler closeSiteControlCompleted;
        
        /// <remarks/>
        public event findAllSiteControlCompletedEventHandler findAllSiteControlCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool checkSitesOpened([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified) {
            object[] results = this.Invoke("checkSitesOpened", new object[] {
                        token,
                        usrId,
                        usrIdSpecified});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void checkSitesOpenedAsync(string token, long usrId, bool usrIdSpecified) {
            this.checkSitesOpenedAsync(token, usrId, usrIdSpecified, null);
        }
        
        /// <remarks/>
        public void checkSitesOpenedAsync(string token, long usrId, bool usrIdSpecified, object userState) {
            if ((this.checkSitesOpenedOperationCompleted == null)) {
                this.checkSitesOpenedOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckSitesOpenedOperationCompleted);
            }
            this.InvokeAsync("checkSitesOpened", new object[] {
                        token,
                        usrId,
                        usrIdSpecified}, this.checkSitesOpenedOperationCompleted, userState);
        }
        
        private void OncheckSitesOpenedOperationCompleted(object arg) {
            if ((this.checkSitesOpenedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkSitesOpenedCompleted(this, new checkSitesOpenedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public controlDto[] findAllControl([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified) {
            object[] results = this.Invoke("findAllControl", new object[] {
                        token,
                        usrId,
                        usrIdSpecified});
            return ((controlDto[])(results[0]));
        }
        
        /// <remarks/>
        public void findAllControlAsync(string token, long usrId, bool usrIdSpecified) {
            this.findAllControlAsync(token, usrId, usrIdSpecified, null);
        }
        
        /// <remarks/>
        public void findAllControlAsync(string token, long usrId, bool usrIdSpecified, object userState) {
            if ((this.findAllControlOperationCompleted == null)) {
                this.findAllControlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfindAllControlOperationCompleted);
            }
            this.InvokeAsync("findAllControl", new object[] {
                        token,
                        usrId,
                        usrIdSpecified}, this.findAllControlOperationCompleted, userState);
        }
        
        private void OnfindAllControlOperationCompleted(object arg) {
            if ((this.findAllControlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.findAllControlCompleted(this, new findAllControlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void closeControl([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime controlDate, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool controlDateSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("closeControl", new object[] {
                        token,
                        controlDate,
                        controlDateSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void closeControlAsync(string token, System.DateTime controlDate, bool controlDateSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.closeControlAsync(token, controlDate, controlDateSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void closeControlAsync(string token, System.DateTime controlDate, bool controlDateSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.closeControlOperationCompleted == null)) {
                this.closeControlOperationCompleted = new System.Threading.SendOrPostCallback(this.OncloseControlOperationCompleted);
            }
            this.InvokeAsync("closeControl", new object[] {
                        token,
                        controlDate,
                        controlDateSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.closeControlOperationCompleted, userState);
        }
        
        private void OncloseControlOperationCompleted(object arg) {
            if ((this.closeControlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.closeControlCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getOpenedControlDate([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified) {
            object[] results = this.Invoke("getOpenedControlDate", new object[] {
                        token,
                        usrId,
                        usrIdSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getOpenedControlDateAsync(string token, long usrId, bool usrIdSpecified) {
            this.getOpenedControlDateAsync(token, usrId, usrIdSpecified, null);
        }
        
        /// <remarks/>
        public void getOpenedControlDateAsync(string token, long usrId, bool usrIdSpecified, object userState) {
            if ((this.getOpenedControlDateOperationCompleted == null)) {
                this.getOpenedControlDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetOpenedControlDateOperationCompleted);
            }
            this.InvokeAsync("getOpenedControlDate", new object[] {
                        token,
                        usrId,
                        usrIdSpecified}, this.getOpenedControlDateOperationCompleted, userState);
        }
        
        private void OngetOpenedControlDateOperationCompleted(object arg) {
            if ((this.getOpenedControlDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getOpenedControlDateCompleted(this, new getOpenedControlDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void openSiteControl([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long siteId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool siteIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime controlDate, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool controlDateSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("openSiteControl", new object[] {
                        token,
                        siteId,
                        siteIdSpecified,
                        controlDate,
                        controlDateSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void openSiteControlAsync(string token, long siteId, bool siteIdSpecified, System.DateTime controlDate, bool controlDateSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.openSiteControlAsync(token, siteId, siteIdSpecified, controlDate, controlDateSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void openSiteControlAsync(string token, long siteId, bool siteIdSpecified, System.DateTime controlDate, bool controlDateSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.openSiteControlOperationCompleted == null)) {
                this.openSiteControlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnopenSiteControlOperationCompleted);
            }
            this.InvokeAsync("openSiteControl", new object[] {
                        token,
                        siteId,
                        siteIdSpecified,
                        controlDate,
                        controlDateSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.openSiteControlOperationCompleted, userState);
        }
        
        private void OnopenSiteControlOperationCompleted(object arg) {
            if ((this.openSiteControlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.openSiteControlCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public siteControlDto getSiteControlBySiteId([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long siteId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool siteIdSpecified) {
            object[] results = this.Invoke("getSiteControlBySiteId", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        siteId,
                        siteIdSpecified});
            return ((siteControlDto)(results[0]));
        }
        
        /// <remarks/>
        public void getSiteControlBySiteIdAsync(string token, long usrId, bool usrIdSpecified, long siteId, bool siteIdSpecified) {
            this.getSiteControlBySiteIdAsync(token, usrId, usrIdSpecified, siteId, siteIdSpecified, null);
        }
        
        /// <remarks/>
        public void getSiteControlBySiteIdAsync(string token, long usrId, bool usrIdSpecified, long siteId, bool siteIdSpecified, object userState) {
            if ((this.getSiteControlBySiteIdOperationCompleted == null)) {
                this.getSiteControlBySiteIdOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSiteControlBySiteIdOperationCompleted);
            }
            this.InvokeAsync("getSiteControlBySiteId", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        siteId,
                        siteIdSpecified}, this.getSiteControlBySiteIdOperationCompleted, userState);
        }
        
        private void OngetSiteControlBySiteIdOperationCompleted(object arg) {
            if ((this.getSiteControlBySiteIdCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSiteControlBySiteIdCompleted(this, new getSiteControlBySiteIdCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public controlDto getControl([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime controlDate, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool controlDateSpecified) {
            object[] results = this.Invoke("getControl", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        controlDate,
                        controlDateSpecified});
            return ((controlDto)(results[0]));
        }
        
        /// <remarks/>
        public void getControlAsync(string token, long usrId, bool usrIdSpecified, System.DateTime controlDate, bool controlDateSpecified) {
            this.getControlAsync(token, usrId, usrIdSpecified, controlDate, controlDateSpecified, null);
        }
        
        /// <remarks/>
        public void getControlAsync(string token, long usrId, bool usrIdSpecified, System.DateTime controlDate, bool controlDateSpecified, object userState) {
            if ((this.getControlOperationCompleted == null)) {
                this.getControlOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetControlOperationCompleted);
            }
            this.InvokeAsync("getControl", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        controlDate,
                        controlDateSpecified}, this.getControlOperationCompleted, userState);
        }
        
        private void OngetControlOperationCompleted(object arg) {
            if ((this.getControlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getControlCompleted(this, new getControlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getCurrentControl([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified) {
            object[] results = this.Invoke("getCurrentControl", new object[] {
                        token,
                        usrId,
                        usrIdSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getCurrentControlAsync(string token, long usrId, bool usrIdSpecified) {
            this.getCurrentControlAsync(token, usrId, usrIdSpecified, null);
        }
        
        /// <remarks/>
        public void getCurrentControlAsync(string token, long usrId, bool usrIdSpecified, object userState) {
            if ((this.getCurrentControlOperationCompleted == null)) {
                this.getCurrentControlOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetCurrentControlOperationCompleted);
            }
            this.InvokeAsync("getCurrentControl", new object[] {
                        token,
                        usrId,
                        usrIdSpecified}, this.getCurrentControlOperationCompleted, userState);
        }
        
        private void OngetCurrentControlOperationCompleted(object arg) {
            if ((this.getCurrentControlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getCurrentControlCompleted(this, new getCurrentControlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getControlSuggestedCloseDay([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified) {
            object[] results = this.Invoke("getControlSuggestedCloseDay", new object[] {
                        token,
                        usrId,
                        usrIdSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getControlSuggestedCloseDayAsync(string token, long usrId, bool usrIdSpecified) {
            this.getControlSuggestedCloseDayAsync(token, usrId, usrIdSpecified, null);
        }
        
        /// <remarks/>
        public void getControlSuggestedCloseDayAsync(string token, long usrId, bool usrIdSpecified, object userState) {
            if ((this.getControlSuggestedCloseDayOperationCompleted == null)) {
                this.getControlSuggestedCloseDayOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetControlSuggestedCloseDayOperationCompleted);
            }
            this.InvokeAsync("getControlSuggestedCloseDay", new object[] {
                        token,
                        usrId,
                        usrIdSpecified}, this.getControlSuggestedCloseDayOperationCompleted, userState);
        }
        
        private void OngetControlSuggestedCloseDayOperationCompleted(object arg) {
            if ((this.getControlSuggestedCloseDayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getControlSuggestedCloseDayCompleted(this, new getControlSuggestedCloseDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool checkSiteMov([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long siteId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool siteIdSpecified) {
            object[] results = this.Invoke("checkSiteMov", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        siteId,
                        siteIdSpecified});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void checkSiteMovAsync(string token, long usrId, bool usrIdSpecified, long siteId, bool siteIdSpecified) {
            this.checkSiteMovAsync(token, usrId, usrIdSpecified, siteId, siteIdSpecified, null);
        }
        
        /// <remarks/>
        public void checkSiteMovAsync(string token, long usrId, bool usrIdSpecified, long siteId, bool siteIdSpecified, object userState) {
            if ((this.checkSiteMovOperationCompleted == null)) {
                this.checkSiteMovOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckSiteMovOperationCompleted);
            }
            this.InvokeAsync("checkSiteMov", new object[] {
                        token,
                        usrId,
                        usrIdSpecified,
                        siteId,
                        siteIdSpecified}, this.checkSiteMovOperationCompleted, userState);
        }
        
        private void OncheckSiteMovOperationCompleted(object arg) {
            if ((this.checkSiteMovCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkSiteMovCompleted(this, new checkSiteMovCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void openControl([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime controlDate, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool controlDateSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("openControl", new object[] {
                        token,
                        controlDate,
                        controlDateSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void openControlAsync(string token, System.DateTime controlDate, bool controlDateSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.openControlAsync(token, controlDate, controlDateSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void openControlAsync(string token, System.DateTime controlDate, bool controlDateSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.openControlOperationCompleted == null)) {
                this.openControlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnopenControlOperationCompleted);
            }
            this.InvokeAsync("openControl", new object[] {
                        token,
                        controlDate,
                        controlDateSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.openControlOperationCompleted, userState);
        }
        
        private void OnopenControlOperationCompleted(object arg) {
            if ((this.openControlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.openControlCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public bool checkControl([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified) {
            object[] results = this.Invoke("checkControl", new object[] {
                        token,
                        usrId,
                        usrIdSpecified});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void checkControlAsync(string token, long usrId, bool usrIdSpecified) {
            this.checkControlAsync(token, usrId, usrIdSpecified, null);
        }
        
        /// <remarks/>
        public void checkControlAsync(string token, long usrId, bool usrIdSpecified, object userState) {
            if ((this.checkControlOperationCompleted == null)) {
                this.checkControlOperationCompleted = new System.Threading.SendOrPostCallback(this.OncheckControlOperationCompleted);
            }
            this.InvokeAsync("checkControl", new object[] {
                        token,
                        usrId,
                        usrIdSpecified}, this.checkControlOperationCompleted, userState);
        }
        
        private void OncheckControlOperationCompleted(object arg) {
            if ((this.checkControlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.checkControlCompleted(this, new checkControlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getSiteControlNextOpenDay([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified) {
            object[] results = this.Invoke("getSiteControlNextOpenDay", new object[] {
                        token,
                        usrId,
                        usrIdSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getSiteControlNextOpenDayAsync(string token, long usrId, bool usrIdSpecified) {
            this.getSiteControlNextOpenDayAsync(token, usrId, usrIdSpecified, null);
        }
        
        /// <remarks/>
        public void getSiteControlNextOpenDayAsync(string token, long usrId, bool usrIdSpecified, object userState) {
            if ((this.getSiteControlNextOpenDayOperationCompleted == null)) {
                this.getSiteControlNextOpenDayOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetSiteControlNextOpenDayOperationCompleted);
            }
            this.InvokeAsync("getSiteControlNextOpenDay", new object[] {
                        token,
                        usrId,
                        usrIdSpecified}, this.getSiteControlNextOpenDayOperationCompleted, userState);
        }
        
        private void OngetSiteControlNextOpenDayOperationCompleted(object arg) {
            if ((this.getSiteControlNextOpenDayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getSiteControlNextOpenDayCompleted(this, new getSiteControlNextOpenDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public string getControlNextOpenDay([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified) {
            object[] results = this.Invoke("getControlNextOpenDay", new object[] {
                        token,
                        usrId,
                        usrIdSpecified});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void getControlNextOpenDayAsync(string token, long usrId, bool usrIdSpecified) {
            this.getControlNextOpenDayAsync(token, usrId, usrIdSpecified, null);
        }
        
        /// <remarks/>
        public void getControlNextOpenDayAsync(string token, long usrId, bool usrIdSpecified, object userState) {
            if ((this.getControlNextOpenDayOperationCompleted == null)) {
                this.getControlNextOpenDayOperationCompleted = new System.Threading.SendOrPostCallback(this.OngetControlNextOpenDayOperationCompleted);
            }
            this.InvokeAsync("getControlNextOpenDay", new object[] {
                        token,
                        usrId,
                        usrIdSpecified}, this.getControlNextOpenDayOperationCompleted, userState);
        }
        
        private void OngetControlNextOpenDayOperationCompleted(object arg) {
            if ((this.getControlNextOpenDayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.getControlNextOpenDayCompleted(this, new getControlNextOpenDayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void closeSiteControl([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long siteId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool siteIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] System.DateTime controlDate, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool controlDateSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long stationId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool stationIdSpecified) {
            this.Invoke("closeSiteControl", new object[] {
                        token,
                        siteId,
                        siteIdSpecified,
                        controlDate,
                        controlDateSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified});
        }
        
        /// <remarks/>
        public void closeSiteControlAsync(string token, long siteId, bool siteIdSpecified, System.DateTime controlDate, bool controlDateSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified) {
            this.closeSiteControlAsync(token, siteId, siteIdSpecified, controlDate, controlDateSpecified, usrId, usrIdSpecified, stationId, stationIdSpecified, null);
        }
        
        /// <remarks/>
        public void closeSiteControlAsync(string token, long siteId, bool siteIdSpecified, System.DateTime controlDate, bool controlDateSpecified, long usrId, bool usrIdSpecified, long stationId, bool stationIdSpecified, object userState) {
            if ((this.closeSiteControlOperationCompleted == null)) {
                this.closeSiteControlOperationCompleted = new System.Threading.SendOrPostCallback(this.OncloseSiteControlOperationCompleted);
            }
            this.InvokeAsync("closeSiteControl", new object[] {
                        token,
                        siteId,
                        siteIdSpecified,
                        controlDate,
                        controlDateSpecified,
                        usrId,
                        usrIdSpecified,
                        stationId,
                        stationIdSpecified}, this.closeSiteControlOperationCompleted, userState);
        }
        
        private void OncloseSiteControlOperationCompleted(object arg) {
            if ((this.closeSiteControlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.closeSiteControlCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace="http://service.flexps.flexdoc.com.br/", ResponseNamespace="http://service.flexps.flexdoc.com.br/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public siteControlDto[] findAllSiteControl([System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] string token, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] long usrId, [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)] [System.Xml.Serialization.XmlIgnoreAttribute()] bool usrIdSpecified) {
            object[] results = this.Invoke("findAllSiteControl", new object[] {
                        token,
                        usrId,
                        usrIdSpecified});
            return ((siteControlDto[])(results[0]));
        }
        
        /// <remarks/>
        public void findAllSiteControlAsync(string token, long usrId, bool usrIdSpecified) {
            this.findAllSiteControlAsync(token, usrId, usrIdSpecified, null);
        }
        
        /// <remarks/>
        public void findAllSiteControlAsync(string token, long usrId, bool usrIdSpecified, object userState) {
            if ((this.findAllSiteControlOperationCompleted == null)) {
                this.findAllSiteControlOperationCompleted = new System.Threading.SendOrPostCallback(this.OnfindAllSiteControlOperationCompleted);
            }
            this.InvokeAsync("findAllSiteControl", new object[] {
                        token,
                        usrId,
                        usrIdSpecified}, this.findAllSiteControlOperationCompleted, userState);
        }
        
        private void OnfindAllSiteControlOperationCompleted(object arg) {
            if ((this.findAllSiteControlCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.findAllSiteControlCompleted(this, new findAllSiteControlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.flexps.flexdoc.com.br/")]
    public partial class controlDto {
        
        private System.DateTime controlDateField;
        
        private bool controlDateFieldSpecified;
        
        private System.DateTime controlTimeCloseField;
        
        private bool controlTimeCloseFieldSpecified;
        
        private System.DateTime controlTimeOpenField;
        
        private bool controlTimeOpenFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime controlDate {
            get {
                return this.controlDateField;
            }
            set {
                this.controlDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool controlDateSpecified {
            get {
                return this.controlDateFieldSpecified;
            }
            set {
                this.controlDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime controlTimeClose {
            get {
                return this.controlTimeCloseField;
            }
            set {
                this.controlTimeCloseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool controlTimeCloseSpecified {
            get {
                return this.controlTimeCloseFieldSpecified;
            }
            set {
                this.controlTimeCloseFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime controlTimeOpen {
            get {
                return this.controlTimeOpenField;
            }
            set {
                this.controlTimeOpenField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool controlTimeOpenSpecified {
            get {
                return this.controlTimeOpenFieldSpecified;
            }
            set {
                this.controlTimeOpenFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.5420")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.flexps.flexdoc.com.br/")]
    public partial class siteControlDto {
        
        private System.DateTime controlField;
        
        private bool controlFieldSpecified;
        
        private System.DateTime siteControlPreviousDateField;
        
        private bool siteControlPreviousDateFieldSpecified;
        
        private int siteControlStatusField;
        
        private bool siteControlStatusFieldSpecified;
        
        private System.DateTime siteControlTimeCloseField;
        
        private bool siteControlTimeCloseFieldSpecified;
        
        private System.DateTime siteControlTimeOpenField;
        
        private bool siteControlTimeOpenFieldSpecified;
        
        private System.DateTime siteControlTimePreCloseField;
        
        private bool siteControlTimePreCloseFieldSpecified;
        
        private int siteControlTimeZoneField;
        
        private bool siteControlTimeZoneFieldSpecified;
        
        private long siteIdField;
        
        private bool siteIdFieldSpecified;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime control {
            get {
                return this.controlField;
            }
            set {
                this.controlField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool controlSpecified {
            get {
                return this.controlFieldSpecified;
            }
            set {
                this.controlFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime siteControlPreviousDate {
            get {
                return this.siteControlPreviousDateField;
            }
            set {
                this.siteControlPreviousDateField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool siteControlPreviousDateSpecified {
            get {
                return this.siteControlPreviousDateFieldSpecified;
            }
            set {
                this.siteControlPreviousDateFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int siteControlStatus {
            get {
                return this.siteControlStatusField;
            }
            set {
                this.siteControlStatusField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool siteControlStatusSpecified {
            get {
                return this.siteControlStatusFieldSpecified;
            }
            set {
                this.siteControlStatusFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime siteControlTimeClose {
            get {
                return this.siteControlTimeCloseField;
            }
            set {
                this.siteControlTimeCloseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool siteControlTimeCloseSpecified {
            get {
                return this.siteControlTimeCloseFieldSpecified;
            }
            set {
                this.siteControlTimeCloseFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime siteControlTimeOpen {
            get {
                return this.siteControlTimeOpenField;
            }
            set {
                this.siteControlTimeOpenField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool siteControlTimeOpenSpecified {
            get {
                return this.siteControlTimeOpenFieldSpecified;
            }
            set {
                this.siteControlTimeOpenFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public System.DateTime siteControlTimePreClose {
            get {
                return this.siteControlTimePreCloseField;
            }
            set {
                this.siteControlTimePreCloseField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool siteControlTimePreCloseSpecified {
            get {
                return this.siteControlTimePreCloseFieldSpecified;
            }
            set {
                this.siteControlTimePreCloseFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int siteControlTimeZone {
            get {
                return this.siteControlTimeZoneField;
            }
            set {
                this.siteControlTimeZoneField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool siteControlTimeZoneSpecified {
            get {
                return this.siteControlTimeZoneFieldSpecified;
            }
            set {
                this.siteControlTimeZoneFieldSpecified = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long siteId {
            get {
                return this.siteIdField;
            }
            set {
                this.siteIdField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        public bool siteIdSpecified {
            get {
                return this.siteIdFieldSpecified;
            }
            set {
                this.siteIdFieldSpecified = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void checkSitesOpenedCompletedEventHandler(object sender, checkSitesOpenedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkSitesOpenedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkSitesOpenedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void findAllControlCompletedEventHandler(object sender, findAllControlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class findAllControlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal findAllControlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public controlDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((controlDto[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void closeControlCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void getOpenedControlDateCompletedEventHandler(object sender, getOpenedControlDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getOpenedControlDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getOpenedControlDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void openSiteControlCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void getSiteControlBySiteIdCompletedEventHandler(object sender, getSiteControlBySiteIdCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSiteControlBySiteIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSiteControlBySiteIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public siteControlDto Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((siteControlDto)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void getControlCompletedEventHandler(object sender, getControlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getControlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getControlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public controlDto Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((controlDto)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void getCurrentControlCompletedEventHandler(object sender, getCurrentControlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getCurrentControlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getCurrentControlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void getControlSuggestedCloseDayCompletedEventHandler(object sender, getControlSuggestedCloseDayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getControlSuggestedCloseDayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getControlSuggestedCloseDayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void checkSiteMovCompletedEventHandler(object sender, checkSiteMovCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkSiteMovCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkSiteMovCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void openControlCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void checkControlCompletedEventHandler(object sender, checkControlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class checkControlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal checkControlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void getSiteControlNextOpenDayCompletedEventHandler(object sender, getSiteControlNextOpenDayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getSiteControlNextOpenDayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getSiteControlNextOpenDayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void getControlNextOpenDayCompletedEventHandler(object sender, getControlNextOpenDayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class getControlNextOpenDayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal getControlNextOpenDayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void closeSiteControlCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    public delegate void findAllSiteControlCompletedEventHandler(object sender, findAllSiteControlCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.5420")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class findAllSiteControlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal findAllSiteControlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public siteControlDto[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((siteControlDto[])(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591